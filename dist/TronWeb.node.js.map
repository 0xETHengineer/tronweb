{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@babel/runtime/helpers/asyncToGenerator\"","webpack:///external \"source-map-support/register\"","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///external \"@babel/runtime/helpers/objectSpread\"","webpack:///external \"@babel/runtime/helpers/assertThisInitialized\"","webpack:///external \"@babel/runtime/helpers/toConsumableArray\"","webpack:///external \"bignumber.js\"","webpack:///external \"@babel/runtime/helpers/slicedToArray\"","webpack:///external \"axios\"","webpack:///external \"ethers\"","webpack:///external \"js-sha3\"","webpack:///external \"elliptic\"","webpack:///external \"@babel/runtime/helpers/defineProperty\"","webpack:///external \"@babel/runtime/helpers/typeof\"","webpack:///external \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack:///external \"@babel/runtime/helpers/getPrototypeOf\"","webpack:///external \"@babel/runtime/helpers/inherits\"","webpack:///external \"jssha\"","webpack:///external \"validator\"","webpack:///external \"eventemitter3\"","webpack:///./src/utils/base64.js","webpack:///./src/utils/bytes.js","webpack:///./src/utils/address.js","webpack:///./src/utils/code.js","webpack:///./src/utils/base58.js","webpack:///./src/utils/crypto.js","webpack:///./src/utils/accounts.js","webpack:///./src/utils/abi.js","webpack:///./src/utils/index.js","webpack:///./src/lib/providers/index.js","webpack:///./src/lib/providers/HttpProvider.js","webpack:///./src/lib/transactionBuilder.js","webpack:///./src/lib/trx.js","webpack:///./src/lib/witness.js","webpack:///./src/lib/contract/method.js","webpack:///./src/lib/contract/index.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","Base64","_this","this","_keyStr","encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","length","charCodeAt","isNaN","charAt","encodeIgnoreUtf8","inputBytes","decode","replace","indexOf","String","fromCharCode","_utf8_decode","decodeToByteArray","_out2ByteArray","utftext","byteArray","Array","c1","c2","_utf8_encode","string","c3","byte2hexStr","byte","str","bytesToString","arr","one","toString","v","match","bytesLength","store","slice","st","parseInt","hextoString","hex","split","out","tmp","concat","base64DecodeFromString","string64","byteArray2hexStr","ADDRESS_SIZE","ADDRESS_PREFIX","ADDRESS_PREFIX_BYTE","bin2String","array","apply","toConsumableArray_default","arrayEquals","array1","array2","stringToBytes","len","bytes","push","code_bytesToString","code_hextoString","hexChar2byte","isHexChar","hexStr2byteArray","j","k","code_byte2hexStr","code_byteArray2hexStr","reduce","code_base64DecodeFromString","base64EncodeToString","strToDate","tempStrs","dateStrs","year","month","day","timeStrs","hour","minute","second","Date","isNumber","getStringType","ALPHABET","ALPHABET_MAP","base58_i","BASE","encode58","buffer","digits","carry","reverse","map","digit","join","decode58","Error","getBase58CheckAddress","addressBytes","checkSum","SHA256","decodeBase58Address","base58Sting","address","offset","checkSum1","signTransaction","priKeyBytes","transaction","signature","ECKeySign","txID","arrayToBase64String","a","btoa","crypto_signBytes","privateKey","contents","getRowBytesFromTransactionBase64","base64Data","bytesDecode","proto","protocol","Transaction","deserializeBinary","getRawData","serializeBinary","genPriKey","priKeyHex","external_elliptic_","genKeyPair","getPrivate","computeAddress","pubBytes","hash","external_js_sha3_","substring","getAddressFromPriKey","getPubKeyFromPriKey","decode58Check","addressStr","decodeCheck","decodeData","hash1","isAddressValid","base58Str","getBase58CheckAddressFromPriKeyBase64String","priKeyBase64String","getHexStrAddressFromPriKeyBase64String","getAddressFromPriKeyBase64String","pubkey","keyFromPrivate","getPublic","x","y","xHex","yHex","hashBytes","sign","id","recoveryParam","rHex","sHex","msgBytes","shaObj","external_jssha_default","msgHex","update","getHash","passwordToAddress","password","pkToAddress","generateAccount","pubKeyBytes","publicKey","base58","abi_abiCoder","external_ethers_default","utils","AbiCoder","decodeParams","names","types","ignoreMethodHash","obj","arg","index","substr","toLowerCase","encodeParams","values","src_TronWeb","toHex","isValidURL","url","external_validator_default","isURL","protocols","isObject","isArray","isJson","JSON","parse","ex","isBoolean","bool","isBigNumber","number","external_bignumber_js_default","constructor","isString","isFunction","isHex","isInteger","Number","hasProperty","hasProperties","_len","arguments","properties","_key","includes","injectPromise","func","_len2","args","_key2","Promise","resolve","reject","err","res","promiseInjector","scope","_this2","_len3","_key3","mapEvent","event","block","block_number","timestamp","block_timestamp","contract","contract_address","event_name","transaction_id","result","parseEvent","_ref","abi","inputs","type","_abi$index","src_utils","objectSpread_default","code","code_namespaceObject","accounts","accounts_namespaceObject","base58_namespaceObject","bytes_namespaceObject","crypto","crypto_namespaceObject","abi_namespaceObject","providers","HttpProvider","host","timeout","undefined","user","headers","statusPage","classCallCheck_default","instance","external_axios_default","baseURL","auth","request","then","data","catch","payload","method","params","transactionBuilder_TransactionBuilder","TransactionBuilder","tronWeb","to","amount","from","defaultAddress","callback","isAddress","fullNode","to_address","owner_address","sendTrx","tokenID","fromUtf8","asset_name","sendToken","issuerAddress","buyer","purchaseToken","duration","resource","frozen_balance","frozen_duration","freezeBalance","unfreezeBalance","withdrawBlockRewards","applyForSR","votes","voterAddress","vote","keys","invalid","entries","_ref2","slicedToArray_default","srAddress","voteCount","vote_address","vote_count","options","createSmartContract","_options$abi","_options$bytecode","bytecode","_options$feeLimit","feeLimit","_options$callValue","callValue","_options$userFeePerce","userFeePercentage","_options$parameters","parameters","_unused","payable","some","constructorParams","find","it","abiCoder","fee_limit","call_value","consume_user_resource_percent","stringify","parameter","contractAddress","functionSelector","triggerSmartContract","_parameters$i","function_selector","message","toUtf8","_this3","createToken","_options$name","_options$abbreviation","abbreviation","_options$description","description","_options$url","_options$totalSupply","totalSupply","_options$trxRatio","trxRatio","_options$tokenRatio","tokenRatio","_options$saleStart","saleStart","now","_options$saleEnd","saleEnd","_options$freeBandwidt","freeBandwidth","_options$freeBandwidt2","freeBandwidthLimit","_options$frozenAmount","frozenAmount","_options$frozenDurati","frozenDuration","abbr","total_supply","trx_num","num","start_time","end_time","free_asset_net_limit","public_free_asset_net_limit","frozen_supply","frozen_amount","frozen_days","_this4","updateToken","_options$description2","_options$url2","_options$freeBandwidt3","_options$freeBandwidt4","new_limit","new_public_limit","_this5","createProposal","_this6","proposalID","proposal_id","deleteProposal","_this7","hasApproval","is_add_approval","isApproval","voteProposal","_this8","exchangeID","tokenName","tokenAmount","ownerAddress","exchange_id","token_id","fromAscii","quant","injectExchangeTokens","_this9","withdrawExchangeTokens","_this10","tokenAmountSold","tokenAmountExpected","expected","tradeExchangeTokens","trx_Trx","Trx","token","getCurrentBlock","defaultBlock","getBlockByHash","getBlockByNumber","getBlock","blockHash","blockID","getBlockTransactionCount","_ref$transactions","transactions","_ref2$transactions","getTransactionFromBlock","transactionID","getTransaction","getTransactionInfo","solidityNode","limit","getTransactionsRelated","getTransactionsToAddress","getTransactionsFromAddress","direction","tx","sort","b","raw_data","_context","t0","account","_ref3","getAccount","getBalance","_ref4","_ref4$balance","balance","_ref5","_ref5$freeNetUsed","freeNetUsed","_ref5$freeNetLimit","freeNetLimit","_ref5$NetUsed","NetUsed","_ref5$NetLimit","NetLimit","getBandwidth","_ref6","_ref6$assetIssue","assetIssue","tokens","parseToken","getTokensIssuedByAddress","getTokenFromID","listNodes","_ref7","_ref7$nodes","nodes","_ref8","_ref8$address","port","start","end","startNum","endNum","_ref9","_ref9$block","getBlockRange","listSuperRepresentatives","_ref10","_ref10$witnesses","witnesses","_ref12","_ref12$assetIssue","_ref11","_ref11$assetIssue","listTokens","timeUntilNextVoteCycle","_ref13","_ref13$num","Math","floor","getContract","defaultPrivateKey","fromPrivateKey","_context2","signedTransaction","sendRawTransaction","sendTransaction","transactionBuilder","_context3","_context4","proposal","getProposal","listProposals","_ref14","_ref14$proposals","proposals","getChainParameters","_ref15","_ref15$chainParameter","chainParameter","resources","getAccountResources","exchange","getExchangeByID","listExchanges","_ref16","_ref16$exchanges","exchanges","firstTokenID","firstTokenBalance","secondTokenID","secondTokenBalance","first_token_id","first_token_balance","second_token_id","second_token_balance","_ref17","_ref17$exchanges","witness_Witness","getFunctionSelector","getParamTypes","method_decodeOutput","filter","method_Method","Method","outputs","sha3","defaultOptions","shouldPollResponse","forEach","methodArgs","_call","send","_send","watch","_watch","deployed","stateMutability","constant_result","trx","broadcast","checkResult","_callee2","decoded","_args2","regenerator_default","wrap","prev","next","abrupt","error","sent","setTimeout","resMessage","contractResult","stop","eventServer","listener","lastBlock","sinceTimestamp","getTime","getEvents","_callee4","events","_events$sort","_events$sort2","latestEvent","newEvents","getEventResult","priorEvent","bindListener","clearInterval","setInterval","contract_Contract","Contract","eventListener","methods","props","loadAbi","eventCallback","_getEvents","console","__proto__","prop","methodCall","onMethod","new","at","entrys","self","startCallback","_startEventListener","_stopEventListener","TronWeb","possibleConstructorReturn_default","getPrototypeOf_default","setFullNode","setSolidityNode","setEventServer","BigNumber","setPrivateKey","assertThisInitialized_default","witness","abs","setAddress","emit","fromHex","provider","knownProvider","isValidProvider","setStatusPage","currentProviders","eventName","blockNumber","routeParams","_ref2$data","response","_ref3$data","getEventByTransacionID","isConnected","isEventServerConnected","val","fromDecimal","typeof_default","test","isFinite","Buffer","padding","padEnd","toBigNumber","toNumber","isLessThan","sun","div","times","solditySource","_unused2","external_eventemitter3_default"],"mappings":"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","file":"TronWeb.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 22);\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"source-map-support/register\");","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","module.exports = require(\"@babel/runtime/helpers/objectSpread\");","module.exports = require(\"@babel/runtime/helpers/assertThisInitialized\");","module.exports = require(\"@babel/runtime/helpers/toConsumableArray\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"@babel/runtime/helpers/slicedToArray\");","module.exports = require(\"axios\");","module.exports = require(\"ethers\");","module.exports = require(\"js-sha3\");","module.exports = require(\"elliptic\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"@babel/runtime/helpers/typeof\");","module.exports = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"@babel/runtime/helpers/getPrototypeOf\");","module.exports = require(\"@babel/runtime/helpers/inherits\");","module.exports = require(\"jssha\");","module.exports = require(\"validator\");","module.exports = require(\"eventemitter3\");","export function Base64() {\n    this._keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n    this.encode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n        \n        while (i < input.length) {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.encodeIgnoreUtf8 = inputBytes => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n        \n        while (i < inputBytes.length) {\n            chr1 = inputBytes[i++];\n            chr2 = inputBytes[i++];\n            chr3 = inputBytes[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.decode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = _keyStr.indexOf(input.charAt(i++));\n            enc2 = _keyStr.indexOf(input.charAt(i++));\n            enc3 = _keyStr.indexOf(input.charAt(i++));\n            enc4 = _keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n                \n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n        \n        return this._utf8_decode(output);\n    }\n\n    this.decodeToByteArray = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = _keyStr.indexOf(input.charAt(i++));\n            enc2 = _keyStr.indexOf(input.charAt(i++));\n            enc3 = _keyStr.indexOf(input.charAt(i++));\n            enc4 = _keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n        \n        return this._out2ByteArray(output);\n    }\n\n    this._out2ByteArray = utftext => {\n        const byteArray = new Array(utftext.length);\n\n        let i = 0;\n        let c = c1 = c2 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n            byteArray[i] = c;\n            i++;\n        }\n\n        return byteArray;\n    }\n\n    this._utf8_encode = string => {\n        string = string.replace(/\\r\\n/g, \"\\n\");\n        let utftext = \"\";\n\n        for (let n = 0; n < string.length; n++) {\n            const c = string.charCodeAt(n);\n\n            if (c < 128) {\n                utftext += String.fromCharCode(c);\n            } else if ((c > 127) && (c < 2048)) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            } else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n        }\n\n        return utftext;\n    }\n\n    this._utf8_decode = utftext => {\n        let string = \"\";\n        let i = 0;\n        let c = c1 = c2 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n\n            if (c < 128) {\n                string += String.fromCharCode(c);\n                i++;\n            } else if ((c > 191) && (c < 224)) {\n                c2 = utftext.charCodeAt(i + 1);\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                i += 2;\n            } else {\n                c2 = utftext.charCodeAt(i + 1);\n                c3 = utftext.charCodeAt(i + 2);\n\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\n                i += 3;\n            }\n        }\n\n        return string;\n    }\n}","import { Base64 } from './base64';\n\nexport function byte2hexStr(byte) {\n    const hexByteMap = '0123456789ABCDEF';\n\n    let str = '';\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n        \n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length === 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else {\n            str += String.fromCharCode(arr[i]);\n        }\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.split('');\n    let out = '';\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        let tmp = `0x${ arr[i * 2] }${ arr[i * 2 + 1] }`;\n        out += String.fromCharCode(tmp);\n    }\n\n    return out;\n}\n\nexport function base64DecodeFromString(string64) {\n    return new Base64().decodeToByteArray(string64);\n}\n\nexport function byteArray2hexStr(byteArray) {\n    let str = '';\n\n    for (let i = 0; i < (byteArray.length); i++)\n        str += byte2hexStr(byteArray[i]);\n        \n    return str;\n}","export const ADDRESS_SIZE = 34;\nexport const ADDRESS_PREFIX = \"41\";\nexport const ADDRESS_PREFIX_BYTE = 0x41;\n","import { Base64 } from './base64';\n\nexport function bin2String(array) {\n    return String.fromCharCode(...array);\n}\n\nexport function arrayEquals(array1, array2) {\n    if (array1.length != array2.length)\n        return false;\n        \n    let i;\n\n    for (i = 0; i < array1.length; i++) {\n        if (array1[i] != array2[i])\n            return false;\n    }\n\n    return true;\n}\n\nexport function stringToBytes(str) {\n    const bytes = new Array();\n    let len;\n    let c;\n\n    len = str.length;\n\n    for (let i = 0; i < len; i++) {\n        c = str.charCodeAt(i);\n\n        if (c >= 0x010000 && c <= 0x10FFFF) {\n            bytes.push(((c >> 18) & 0x07) | 0xF0);\n            bytes.push(((c >> 12) & 0x3F) | 0x80);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000800 && c <= 0x00FFFF) {\n            bytes.push(((c >> 12) & 0x0F) | 0xE0);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000080 && c <= 0x0007FF) {\n            bytes.push(((c >> 6) & 0x1F) | 0xC0);\n            bytes.push((c & 0x3F) | 0x80);\n        } else bytes.push(c & 0xFF);\n    }\n\n    return bytes;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n        \n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length == 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else str += String.fromCharCode(arr[i]);\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.split(\"\");\n    let out = \"\";\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        const tmp = `0x${arr[i * 2]}${arr[i * 2 + 1]}`;\n        const charValue = String.fromCharCode(tmp);\n\n        out += charValue;\n    }\n\n    return out\n}\n\nexport function hexChar2byte(c) {\n    let d = 0;\n\n    if (c >= 'A' && c <= 'F')\n        d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    else if (c >= 'a' && c <= 'f')\n        d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10;\n    else if (c >= '0' && c <= '9')\n        d = c.charCodeAt(0) - '0'.charCodeAt(0);\n        \n    return d;\n}\n\nexport function isHexChar(c) {\n    if ((c >= 'A' && c <= 'F') ||\n        (c >= 'a' && c <= 'f') ||\n        (c >= '0' && c <= '9')) {\n        return 1;\n    }\n\n    return 0;\n}\n\nexport function hexStr2byteArray(str) {\n    const byteArray = Array();\n    let d = 0;\n    let j = 0;\n    let k = 0;\n\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charAt(i);\n\n        if (isHexChar(c)) {\n            d <<= 4;\n            d += hexChar2byte(c);\n            j++;\n\n            if (0 === (j % 2)) {\n                byteArray[k++] = d;\n                d = 0;\n            }\n        }\n    }\n\n    return byteArray;\n}\n\nexport function byte2hexStr(byte) {\n    const hexByteMap = \"0123456789ABCDEF\";\n    let str = \"\";\n\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function byteArray2hexStr(byteArray) {\n    return byteArray.reduce((string, byte) => {\n        return string + byte2hexStr(byte);\n    }, '');\n}\n\nexport function base64DecodeFromString(string64) {\n    const b = new Base64();\n    const decodeBytes = b.decodeToByteArray(string64);\n\n    return decodeBytes;\n}\n\nexport function base64EncodeToString(bytes) {\n    const b = new Base64();\n    const string64 = b.encodeIgnoreUtf8(bytes);\n\n    return string64\n}\n\n//yyyy-MM-DD HH-mm-ss\nexport function strToDate(str) {\n    const tempStrs = str.split(\" \");\n    const dateStrs = tempStrs[0].split(\"-\");\n    const year = parseInt(dateStrs[0], 10);\n    const month = parseInt(dateStrs[1], 10) - 1;\n    const day = parseInt(dateStrs[2], 10);\n\n    if (tempStrs.length > 1) {\n        const timeStrs = tempStrs[1].split(\"-\");\n        const hour = parseInt(timeStrs[0], 10);\n        const minute = parseInt(timeStrs[1], 10) - 1;\n        const second = parseInt(timeStrs[2], 10);\n\n        return new Date(year, month, day, hour, minute, second);\n    }\n\n    return new Date(year, month, day);\n}\n\nexport function isNumber(c) {\n    if (c >= '0' && c <= '9')\n        return 1;\n        \n    return 0;\n}\n\n//return 1: address  --- 20Bytes HexString\n//return 2: blockNumber ------ Decimal number\n//return 3: assetName ------ String\n//return other: error\nexport function getStringType(str) {\n    if (null == str)\n        return -1;\n\n    if (typeof (str) != 'string')\n        return -1;\n\n    if (str.length == 0 || str == \"\")\n        return -1;\n\n    let i = 0;\n\n    if (str.length == 40) {\n        for (; i < 40; i++) {\n            var c = str.charAt(i);\n\n            if (!isHexChar(c))\n                break;\n        }\n    }\n\n    if (i == 40)\n        return 1; //40 Hex, Address\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (!isNumber(c))\n            break;\n    }\n\n    if (i == str.length)\n        return 2; //Alll Decimal number, BlockNumber\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (c > ' ')\n            return 3; //At least one visible character\n    }\n\n    return -1;\n}","const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nconst ALPHABET_MAP = {};\n\nfor (let i = 0; i < ALPHABET.length; i++)\n    ALPHABET_MAP[ALPHABET.charAt(i)] = i;\n\nconst BASE = 58;\n\nexport function encode58(buffer) {\n    if (buffer.length === 0) \n        return '';\n\n    let i;\n    let j;\n\n    const digits = [0];\n\n    for (i = 0; i < buffer.length; i++) {\n        for (j = 0; j < digits.length; j++) \n            digits[j] <<= 8;\n\n        digits[0] += buffer[i];\n        let carry = 0;\n\n        for (j = 0; j < digits.length; ++j) {\n            digits[j] += carry;\n            carry = (digits[j] / BASE) | 0;\n            digits[j] %= BASE\n        }\n\n        while (carry) {\n            digits.push(carry % BASE);\n            carry = (carry / BASE) | 0\n        }\n    }\n\n    for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++) \n        digits.push(0);\n\n    return digits.reverse().map(digit => ALPHABET[digit]).join('');\n}\n\nexport function decode58(string) {\n    if (string.length === 0) \n        return [];\n\n    let i;\n    let j;\n\n    const bytes = [0];\n\n    for (i = 0; i < string.length; i++) {\n        const c = string[i];\n\n        if (!(c in ALPHABET_MAP))\n            throw new Error('Non-base58 character');\n\n        for (j = 0; j < bytes.length; j++) \n            bytes[j] *= BASE;\n\n        bytes[0] += ALPHABET_MAP[c];\n        let carry = 0;\n\n        for (j = 0; j < bytes.length; ++j) {\n            bytes[j] += carry;\n            carry = bytes[j] >> 8;\n            bytes[j] &= 0xff;\n        }\n\n        while (carry) {\n            bytes.push(carry & 0xff);\n            carry >>= 8;\n        }\n    }\n\n    for (i = 0; string[i] === '1' && i < string.length - 1; i++)\n        bytes.push(0);\n\n    return bytes.reverse();\n}","import jsSHA from 'jssha';\n\nimport { ADDRESS_PREFIX, ADDRESS_PREFIX_BYTE } from './address';\nimport { base64EncodeToString } from './code';\nimport { base64DecodeFromString, hexStr2byteArray } from './code';\nimport { encode58, decode58 } from './base58';\nimport { keccak256 } from 'js-sha3';\nimport { ADDRESS_SIZE } from './address';\nimport { byte2hexStr, byteArray2hexStr } from './bytes';\nimport { ec as EC } from 'elliptic';\n\nexport function getBase58CheckAddress(addressBytes) {\n    const hash0 = SHA256(addressBytes);\n    const hash1 = SHA256(hash0);\n\n    let checkSum = hash1.slice(0, 4);\n    checkSum = addressBytes.concat(checkSum);\n\n    return encode58(checkSum);\n}\n\nexport function decodeBase58Address(base58Sting) {\n    if (typeof (base58Sting) != 'string')\n        return false;\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    let address = decode58(base58Sting);\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    const len = address.length;\n    const offset = len - 4;\n    const checkSum = address.slice(offset);\n\n    address = address.slice(0, offset);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return address;\n    }\n\n    return hexStr2byteArray('000000000000000000000000000000000000000000');\n}\n\nexport function signTransaction(priKeyBytes, transaction) {\n    if (typeof priKeyBytes === 'string')\n        priKeyBytes = hexStr2byteArray(priKeyBytes);\n\n    const txID = transaction.txID;\n    const signature = ECKeySign(hexStr2byteArray(txID), priKeyBytes);\n\n    transaction.signature = [ signature ];\n    return transaction;\n}\n\nexport function arrayToBase64String(a) {\n    return btoa(String.fromCharCode(...a));\n}\n\nexport function signBytes(privateKey, contents) {\n    if (typeof privateKey === 'string')\n        privateKey = hexStr2byteArray(privateKey);\n\n    const hashBytes = SHA256(contents);\n    const signBytes = ECKeySign(hashBytes, privateKey);\n\n    return signBytes;\n}\n\nexport function getRowBytesFromTransactionBase64(base64Data) {\n    const bytesDecode = base64DecodeFromString(base64Data);\n    const transaction = proto.protocol.Transaction.deserializeBinary(bytesDecode);\n    const raw = transaction.getRawData();\n\n    return raw.serializeBinary();\n}\n\nexport function genPriKey() {\n    const ec = new EC('secp256k1');\n    const key = ec.genKeyPair();\n    const priKey = key.getPrivate();\n\n    let priKeyHex = priKey.toString('hex');\n\n    while (priKeyHex.length < 64) {\n        priKeyHex = `0${priKeyHex}`;\n    }\n\n    return hexStr2byteArray(priKeyHex);\n}\n\nexport function computeAddress(pubBytes) {\n    if (pubBytes.length === 65)\n        pubBytes = pubBytes.slice(1);\n\n    const hash = keccak256(pubBytes).toString();\n    const addressHex = ADDRESS_PREFIX + hash.substring(24);\n\n    return hexStr2byteArray(addressHex);\n}\n\nexport function getAddressFromPriKey(priKeyBytes) {\n    let pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    return computeAddress(pubBytes);\n}\n\nexport function decode58Check(addressStr) {\n    const decodeCheck = decode58(addressStr);\n\n    if (decodeCheck.length <= 4)\n        return false;\n\n    const decodeData = decodeCheck.slice(0, decodeCheck.length - 4);\n    const hash0 = SHA256(decodeData);\n    const hash1 = SHA256(hash0);\n\n    if (hash1[0] === decodeCheck[decodeData.length] &&\n        hash1[1] === decodeCheck[decodeData.length + 1] &&\n        hash1[2] === decodeCheck[decodeData.length + 2] &&\n        hash1[3] === decodeCheck[decodeData.length + 3]) {\n        return decodeData;\n    }\n\n    return false;\n}\n\nexport function isAddressValid(base58Str) {\n    if (typeof (base58Str) !== 'string')\n        return false;\n        \n    if (base58Str.length !== ADDRESS_SIZE)\n        return false;\n\n    let address = decode58(base58Str);\n\n    if (address.length !== 25)\n        return false;\n        \n    if (address[0] !== ADDRESS_PREFIX_BYTE)\n        return false;\n        \n    const checkSum = address.slice(21);\n    address = address.slice(0, 21);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return true\n    }\n\n    return false;\n}\n\nexport function getBase58CheckAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n\n    return getBase58CheckAddress(addressBytes);\n}\n\nexport function getHexStrAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressHex = byteArray2hexStr(addressBytes);\n\n    return addressHex;\n}\n\nexport function getAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressBase64 = base64EncodeToString(addressBytes);\n\n    return addressBase64;\n}\n\nexport function getPubKeyFromPriKey(priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const pubkey = key.getPublic();\n    const x = pubkey.x;\n    const y = pubkey.y;\n\n    let xHex = x.toString('hex');\n\n    while (xHex.length < 64) {\n        xHex = `0${xHex}`;\n    }\n\n    let yHex = y.toString('hex');\n\n    while (yHex.length < 64) {\n        yHex = `0${yHex}`;\n    }\n\n    const pubkeyHex = `04${xHex}${yHex}`;\n    const pubkeyBytes = hexStr2byteArray(pubkeyHex);\n\n    return pubkeyBytes;\n}\n\nexport function ECKeySign(hashBytes, priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const signature = key.sign(hashBytes);\n    const r = signature.r;\n    const s = signature.s;\n    const id = signature.recoveryParam;\n\n    let rHex = r.toString('hex');\n\n    while (rHex.length < 64) {\n        rHex = `0${rHex}`;\n    }\n\n    let sHex = s.toString('hex');\n\n    while (sHex.length < 64) {\n        sHex = `0${sHex}`;\n    }\n\n    const idHex = byte2hexStr(id);\n    const signHex = rHex + sHex + idHex;\n\n    return signHex;\n}\n\nexport function SHA256(msgBytes) {\n    const shaObj = new jsSHA('SHA-256', 'HEX');\n    const msgHex = byteArray2hexStr(msgBytes);\n\n    shaObj.update(msgHex);\n    const hashHex = shaObj.getHash('HEX');\n\n    return hexStr2byteArray(hashHex);\n}\n\nexport function passwordToAddress(password) {\n    const com_priKeyBytes = base64DecodeFromString(password);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n\nexport function pkToAddress(privateKey) {\n    const com_priKeyBytes = hexStr2byteArray(privateKey);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}","import { byteArray2hexStr } from './bytes';\nimport { \n    getBase58CheckAddress,\n    genPriKey,\n    getAddressFromPriKey,\n    getPubKeyFromPriKey\n} from './crypto';\n\nexport function generateAccount() {\n    const priKeyBytes = genPriKey();\n    const pubKeyBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = getAddressFromPriKey(priKeyBytes);\n    \n    const privateKey = byteArray2hexStr(priKeyBytes);\n    const publicKey = byteArray2hexStr(pubKeyBytes);\n\n    return {\n        privateKey,\n        publicKey,\n        address: {\n            base58: getBase58CheckAddress(addressBytes),\n            hex: byteArray2hexStr(addressBytes)\n        }\n    }\n}","import Ethers from 'ethers';\nimport TronWeb from 'index';\n\nconst abiCoder = new Ethers.utils.AbiCoder();\n\nexport function decodeParams(names, types, output, ignoreMethodHash) {\n\n    if (!output || typeof output === 'boolean') {\n        ignoreMethodHash = output;\n        output = types;\n        types = names;\n        names = [];\n    }\n\n    if (ignoreMethodHash && output.replace(/^0x/,'').length % 64 === 8)\n        output = '0x' + output.replace(/^0x/,'').substring(8);\n\n    if (output.replace(/^0x/,'').length % 64)\n        throw new Error('The encoded string is not valid. Its length must be a multiple of 64.');\n\n    return abiCoder.decode(types, output).reduce((obj, arg, index) => {\n        if(types[index] == 'address')\n            arg = '41' + arg.substr(2).toLowerCase();\n\n        if(names.length)\n            obj[names[index]] = arg;\n        else obj.push(arg);\n\n        return obj;\n    }, names.length ? {} : []);\n}\n\nexport function encodeParams(types, values) {\n\n    for (let i =0;i<types.length;i++) {\n        if (types[i] === 'address') {\n            values[i] =  TronWeb.address.toHex(values[i]).replace(/^41/, '0x');\n        }\n    }\n\n    return abiCoder.encode(types, values);\n}\n","import * as accounts from './accounts';\nimport * as base58 from './base58';\nimport * as bytes from './bytes';\nimport * as crypto from './crypto';\nimport * as code from './code';\nimport * as abi from './abi';\n\nimport validator from 'validator';\nimport BigNumber from 'bignumber.js';\n\nconst utils = {\n    isValidURL(url) {\n        return validator.isURL(url.toString(), {\n            protocols: [ 'http', 'https' ]\n        });\n    },\n\n    isObject(obj) {\n        return obj === Object(obj) && Object.prototype.toString.call(obj) !== '[object Array]';\n    },\n\n    isArray(array) {\n        return Array.isArray(array);\n    },\n\n    isJson(string) {\n        try {\n            return !!JSON.parse(string);\n        } catch (ex) {\n            return false;\n        }\n    },\n\n    isBoolean(bool) {\n        return typeof bool === 'boolean';\n    },\n\n    isBigNumber(number) {\n        return number && (number instanceof BigNumber || (number.constructor && number.constructor.name === 'BigNumber'));\n    },\n\n    isString(string) {\n        return typeof string === 'string' || (string && string.constructor && string.constructor.name === 'String');\n    },\n\n    isFunction(obj) {\n        return typeof obj === 'function';\n    },\n\n    isHex(string) {\n        return typeof string === 'string' && !isNaN(parseInt(string, 16));\n    },\n\n    isInteger(number) {\n        return Number.isInteger(\n            Number(number)\n        );\n    },\n\n    hasProperty(obj, property) {\n        return Object.prototype.hasOwnProperty.call(obj, property);\n    },\n\n    hasProperties(obj, ...properties) {\n        return properties.length && !properties.map(property => {\n            return this.hasProperty(obj, property)\n        }).includes(false);\n    },\n\n    injectPromise(func, ...args) {\n        return new Promise((resolve, reject) => {\n            func(...args, (err, res) => {\n                if(err)\n                    reject(err);\n                else resolve(res);\n            });\n        });\n    },\n\n    promiseInjector(scope) {\n        return (func, ...args) => {\n            return this.injectPromise(func.bind(scope), ...args);\n        }\n    },\n\n    mapEvent(event) {\n        return {\n            block: event.block_number,\n            timestamp: event.block_timestamp,\n            contract: event.contract_address,\n            name: event.event_name,\n            transaction: event.transaction_id,\n            result: event.result\n        };\n    },\n\n    parseEvent(event, { inputs: abi }) {\n        if(!event.result)\n            return event;\n\n        if (this.isObject(event.result)) {\n            for (var i = 0; i < abi.length; i++) {\n                let obj = abi[i];\n                if (obj.type == 'address' && obj.name in event.result)\n                    event.result[obj.name] = '41' + event.result[obj.name].substr(2).toLowerCase();\n            }\n        } else if (this.isArray(event.result)) {\n            event.result = event.result.reduce((obj, result, index) => {\n                const {\n                    name,\n                    type\n                } = abi[index];\n\n                if(type == 'address')\n                    result = '41' + result.substr(2).toLowerCase();\n\n                obj[name] = result;\n\n                return obj;\n            }, {});\n        }\n\n        return event;\n    }\n}\n\nexport default {\n    ...utils,\n    code,\n    accounts,\n    base58,\n    bytes,\n    crypto,\n    abi\n};\n","import HttpProvider from './HttpProvider';\n\nexport default {\n    HttpProvider\n};","import axios from 'axios';\nimport utils from 'utils';\n\nexport default class HttpProvider {\n    constructor(host, timeout = 30000, user = false, password = false, headers = {}, statusPage = '/') {\n        if(!utils.isValidURL(host))\n            throw new Error('Invalid URL provided to HttpProvider');\n\n        if(isNaN(timeout) || timeout < 0)\n            throw new Error('Invalid timeout duration provided');\n\n        if(!utils.isObject(headers))\n            throw new Error('Invalid headers object provided');\n\n        host = host.replace(/\\/+$/,'');\n\n        this.host = host;\n        this.timeout = timeout;\n        this.user = user;\n        this.password = password;\n        this.headers = headers;\n        this.statusPage = statusPage;\n\n        this.instance = axios.create({            \n            baseURL: host,\n            timeout: timeout,\n            headers: headers,\n            auth: user && {\n                user,\n                password\n            },\n        });\n    }\n\n    setStatusPage(statusPage = '/') {\n        this.statusPage = statusPage;\n    }\n\n    async isConnected(statusPage = this.statusPage) {\n        return this.request(statusPage).then(data => {\n            return utils.hasProperties(data, 'blockID', 'block_header');\n        }).catch(() => false);\n    }\n\n    request(url, payload = {}, method = 'get') {\n        method = method.toLowerCase();\n\n        return this.instance.request({\n            data: method == 'post' && payload,\n            params: method =='get' && payload,\n            url,\n            method\n        }).then(({ data }) => data);\n    }\n};\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport Ethers from 'ethers';\n\nexport default class TransactionBuilder {\n    constructor(tronWeb = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    sendTrx(to = false, amount = 0, from = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.sendTrx, to, amount, from);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!this.tronWeb.isAddress(from))\n            return callback('Invalid origin address provided');\n\n        to = this.tronWeb.address.toHex(to);\n        from = this.tronWeb.address.toHex(from);\n\n        if(to === from)\n            return callback('Cannot transfer TRX to the same account');\n\n        this.tronWeb.fullNode.request('wallet/createtransaction', {\n            to_address: to,\n            owner_address: from,\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    sendToken(to = false, amount = 0, tokenID = false, from = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, from);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if(!this.tronWeb.isAddress(from))\n            return callback('Invalid origin address provided');\n\n        to = this.tronWeb.address.toHex(to);\n        tokenID = this.tronWeb.fromUtf8(tokenID);\n        from = this.tronWeb.address.toHex(from);\n\n        if(to === from)\n            return callback('Cannot transfer tokens to the same account');\n\n        this.tronWeb.fullNode.request('wallet/transferasset', {\n            to_address: to,\n            owner_address: from,\n            asset_name: tokenID,\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    purchaseToken(issuerAddress = false, tokenID = false, amount = 0, buyer = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(buyer)) {\n            callback = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.purchaseToken, issuerAddress, tokenID, amount, buyer);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!this.tronWeb.isAddress(buyer))\n            return callback('Invalid buyer address provided');\n\n        this.tronWeb.fullNode.request('wallet/participateassetissue', {\n            to_address: this.tronWeb.address.toHex(issuerAddress),\n            owner_address: this.tronWeb.address.toHex(buyer),\n            asset_name: this.tronWeb.fromUtf8(tokenID),\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    freezeBalance(address = this.tronWeb.defaultAddress.hex, amount = 0, duration = 3, resource = \"BANDWIDTH\", callback = false) {\n        if(utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n            \n        if(!callback)\n            return this.injectPromise(this.freezeBalance, address, amount, duration, resource);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isInteger(duration) || duration < 3)\n            return callback('Invalid duration provided, minimum of 3 days');\n\n        this.tronWeb.fullNode.request('wallet/freezebalance', {\n            owner_address: this.tronWeb.address.toHex(address),\n            frozen_balance: parseInt(amount),\n            frozen_duration: parseInt(duration),\n            resource: resource\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    unfreezeBalance(address = this.tronWeb.defaultAddress.hex, resource = \"BANDWIDTH\", callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if(!callback)\n            return this.injectPromise(this.unfreezeBalance, address, resource);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n        \n        this.tronWeb.fullNode.request('wallet/unfreezebalance', {\n            owner_address: this.tronWeb.address.toHex(address),\n            resource: resource\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    withdrawBlockRewards(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.withdrawBlockRewards, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n        \n        this.tronWeb.fullNode.request('wallet/withdrawbalance', {\n            owner_address: this.tronWeb.address.toHex(address)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    applyForSR(address = this.tronWeb.defaultAddress.hex, url = false, callback = false) {\n        if(utils.isValidURL(address)) {\n            callback = url || false;\n            url = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.applyForSR, address, url);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isValidURL(url))\n            return callback('Invalid url provided');\n        \n        this.tronWeb.fullNode.request('wallet/createwitness', {\n            owner_address: this.tronWeb.address.toHex(address),\n            url: this.tronWeb.fromUtf8(url)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    vote(votes = {}, voterAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.vote, votes, voterAddress);\n\n        if(!utils.isObject(votes) || !Object.keys(votes).length)\n            return callback('Invalid votes object provided');\n\n        if(!this.tronWeb.isAddress(voterAddress))\n            return callback('Invalid voter address provided');\n\n        let invalid = false;\n\n        votes = Object.entries(votes).map(([ srAddress, voteCount ]) => {\n            if(invalid)\n                return;\n\n            if(!this.tronWeb.isAddress(srAddress)) {\n                callback('Invalid SR address provided: ' + srAddress);\n                return invalid = true;\n            }\n\n            if(!utils.isInteger(voteCount) || voteCount <= 0) {\n                callback('Invalid vote count provided for SR: ' + srAddress);\n                return invalid = true;\n            }\n\n            return {\n                vote_address: this.tronWeb.address.toHex(srAddress),\n                vote_count: parseInt(voteCount)\n            };\n        });\n\n        if(invalid)\n            return;\n\n        this.tronWeb.fullNode.request('wallet/votewitnessaccount', {\n            owner_address: this.tronWeb.address.toHex(voterAddress),\n            votes\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    createSmartContract(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.createSmartContract, options, issuerAddress);\n\n        let {\n            abi = false,\n            bytecode = false,\n            feeLimit = 1_000_000_000,\n            callValue = 0,\n            userFeePercentage = 0,\n            parameters = []\n        } = options;\n        \n\n        if(abi && utils.isString(abi)) {\n            try {\n                abi = JSON.parse(abi);\n            } catch{\n                return callback('Invalid options.abi provided');\n            }\n        }\n\n        if(!utils.isArray(abi))\n            return callback('Invalid options.abi provided');\n\n\n        const payable = abi.some(func => {\n            return func.type == 'constructor' && func.payable;\n        });\n\n        if(!utils.isHex(bytecode))\n            return callback('Invalid options.bytecode provided');\n\n        if(!utils.isInteger(feeLimit) || feeLimit <= 0 || feeLimit > 1_000_000_000)\n            return callback('Invalid options.feeLimit provided');\n\n        if(!utils.isInteger(callValue) || callValue < 0)\n            return callback('Invalid options.callValue provided');\n\n        if(payable && callValue == 0)\n            return callback('When contract is payable, options.callValue must be a positive integer');\n\n        if(!payable && callValue > 0)\n            return callback('When contract is not payable, options.callValue must be 0');\n\n        if(!utils.isInteger(userFeePercentage) || userFeePercentage < 0 || userFeePercentage > 100)\n            return callback('Invalid options.userFeePercentage provided');\n\n        if(!utils.isArray(parameters))\n            return callback('Invalid parameters provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        var constructorParams = abi.find(\n            (it) => {\n                return it.type === 'constructor';\n            }\n        );\n\n        if(typeof constructorParams !== 'undefined' && constructorParams) {\n            const abiCoder = new Ethers.utils.AbiCoder();\n            const types = [];\n            const values = [];\n            constructorParams = constructorParams.inputs;\n\n            if(parameters.length != constructorParams.length)\n                return callback(`constructor needs ${constructorParams.length} but ${parameters.length} provided`);\n\n            for(let i = 0; i < parameters.length; i++) {\n                let type = constructorParams[i].type;\n                let value = parameters[i];\n\n                if(!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if(type == 'address')\n                    value = this.tronWeb.address.toHex(value).replace(/^(41)/, '0x');\n                    \n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        this.tronWeb.fullNode.request('wallet/deploycontract', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            consume_user_resource_percent: userFeePercentage,\n            abi: JSON.stringify(abi),\n            bytecode,\n            parameter: parameters\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    triggerSmartContract(\n        contractAddress, \n        functionSelector,\n        feeLimit = 1_000_000_000,\n        callValue = 0,\n        parameters = [], \n        issuerAddress = this.tronWeb.defaultAddress.hex, \n        callback = false\n    ) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(parameters)) {\n            callback = parameters;\n            parameters = [];\n        }\n\n        if(utils.isFunction(callValue)) {\n            callback = callValue;\n            callValue = 0;\n        }\n\n        if(utils.isFunction(feeLimit)) {\n            callback = feeLimit;\n            feeLimit = 1_000_000_000;\n        }\n\n        if(!callback) {\n            return this.injectPromise(\n                this.triggerSmartContract, \n                contractAddress, \n                functionSelector, \n                feeLimit,\n                callValue, \n                parameters,\n                issuerAddress\n            );\n        }\n\n        if(!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if(!utils.isString(functionSelector) || !functionSelector.length)\n            return callback('Invalid function selector provided');\n\n        if(!utils.isInteger(callValue) || callValue < 0)\n            return callback('Invalid call value provided');\n\n        if(!utils.isInteger(feeLimit) || feeLimit <= 0 || feeLimit > 1_000_000_000)\n            return callback('Invalid fee limit provided');\n\n        if(!utils.isArray(parameters))\n            return callback('Invalid parameters provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        functionSelector = functionSelector.replace('/\\s*/g', '');\n\n        if(parameters.length) {\n            const abiCoder = new Ethers.utils.AbiCoder();\n            const types = [];\n            const values = [];\n\n            for(let i = 0; i < parameters.length; i++) {\n                let { type, value } = parameters[i];\n\n                if(!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if(type == 'address')\n                    value = this.tronWeb.address.toHex(value).replace(/^(41)/, '0x');\n                    \n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        this.tronWeb.fullNode.request('wallet/triggersmartcontract', {\n            contract_address: this.tronWeb.address.toHex(contractAddress),\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            function_selector: functionSelector,\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            parameter: parameters\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            if(!transaction.result.result)\n                return callback(transaction);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    createToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.createToken, options, issuerAddress);\n\n        const {\n            name = false,\n            abbreviation = false,\n            description = false,\n            url = false,\n            totalSupply = 0,\n            trxRatio = 1, // How much TRX will `tokenRatio` cost?\n            tokenRatio = 1, // How many tokens will `trxRatio` afford?\n            saleStart = Date.now(),\n            saleEnd = false,            \n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0, // Out of `totalFreeBandwidth`, the amount each token holder get\n            frozenAmount = 0,\n            frozenDuration = 0\n        } = options;\n\n        if(!utils.isString(name) || !name.length)\n            return callback('Invalid token name provided');\n\n        if(!utils.isString(abbreviation) || !abbreviation.length)\n            return callback('Invalid token abbreviation provided');\n\n        if(!utils.isInteger(totalSupply) || totalSupply <= 0)\n            return callback('Invalid supply amount provided');\n\n        if(!utils.isInteger(trxRatio) || trxRatio <= 0)\n            return callback('TRX ratio must be a positive integer');\n\n        if(!utils.isInteger(tokenRatio) || tokenRatio <= 0)\n            return callback('Token ratio must be a positive integer');\n\n        if(!utils.isInteger(saleStart) || saleStart < Date.now())\n            return callback('Invalid sale start timestamp provided');\n\n        if(!utils.isInteger(saleEnd) || saleEnd <= saleStart)\n            return callback('Invalid sale end timestamp provided');\n\n        if(!utils.isString(description) || !description.length)\n            return callback('Invalid token description provided');\n\n        if(!utils.isString(url) || !url.length || !utils.isValidURL(url))\n            return callback('Invalid token url provided');\n\n        if(!utils.isInteger(freeBandwidth) || freeBandwidth < 0)\n            return callback('Invalid free bandwidth amount provided');\n\n        if(!utils.isInteger(freeBandwidthLimit) || freeBandwidthLimit < 0 || (freeBandwidth && !freeBandwidthLimit))\n            return callback('Invalid free bandwidth limit provided');\n\n        if(!utils.isInteger(frozenAmount) || frozenAmount < 0 || (!frozenDuration && frozenAmount))\n            return callback('Invalid frozen supply provided');\n\n        if(!utils.isInteger(frozenDuration) || frozenDuration < 0 || (frozenDuration && !frozenAmount))\n            return callback('Invalid frozen duration provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        this.tronWeb.fullNode.request('wallet/createassetissue', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            name: this.tronWeb.fromUtf8(name),\n            abbr: this.tronWeb.fromUtf8(abbreviation),\n            description: this.tronWeb.fromUtf8(description),\n            url: this.tronWeb.fromUtf8(url),\n            total_supply: parseInt(totalSupply),\n            trx_num: parseInt(trxRatio),\n            num: parseInt(tokenRatio),\n            start_time: parseInt(saleStart),\n            end_time: parseInt(saleEnd),\n            free_asset_net_limit: parseInt(freeBandwidth),\n            public_free_asset_net_limit: parseInt(freeBandwidthLimit),\n            frozen_supply: {\n                frozen_amount: parseInt(frozenAmount),\n                frozen_days: parseInt(frozenDuration)\n            }\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    updateToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.updateToken, options, issuerAddress);\n\n        const {\n            description = false,\n            url = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0 // Out of `totalFreeBandwidth`, the amount each token holder get\n        } = options;\n\n        if(!utils.isInteger(freeBandwidth) || freeBandwidth < 0)\n            return callback('Invalid free bandwidth amount provided');\n\n        if(!utils.isInteger(freeBandwidthLimit) || freeBandwidthLimit < 0 || (freeBandwidth && !freeBandwidthLimit))\n            return callback('Invalid free bandwidth limit provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        this.tronWeb.fullNode.request('wallet/updateasset', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            description: this.tronWeb.fromUtf8(description),\n            url: this.tronWeb.fromUtf8(url),\n            new_limit: parseInt(freeBandwidth),\n            new_public_limit: parseInt(freeBandwidthLimit)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    purchaseAsset(...args) {\n        return this.purchaseToken(...args);\n    }\n\n    createAsset(...args) {\n        return this.createToken(...args);\n    }\n\n    updateAsset(...args) {\n        return this.updateToken(...args);\n    }\n\n    /**\n     * Creates a proposal to modify the network.\n     * Can only be created by a current Super Representative.\n     */\n    createProposal(parameters = false, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!parameters)\n            return callback('Invalid proposal parameters provided');\n\n        if(!callback)\n            return this.injectPromise(this.createProposal, parameters, issuerAddress);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuerAddress provided');\n\n        if(!utils.isObject(parameters))\n            return callback('Invalid parameters provided');\n\n        this.tronWeb.fullNode.request('wallet/proposalcreate', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            parameters: parameters\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Deletes a network modification proposal that the owner issued.\n     * Only current Super Representative can vote on a proposal.\n     */\n    deleteProposal(proposalID = false, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.deleteProposal, proposalID, issuerAddress);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuerAddress provided');\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/proposaldelete', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            proposal_id: parseInt(proposalID)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds a vote to an issued network modification proposal.\n     * Only current Super Representative can vote on a proposal.\n     */\n    voteProposal(proposalID = false, hasApproval = false, voterAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.voteProposal, proposalID, hasApproval, voterAddress);\n\n        if(!this.tronWeb.isAddress(voterAddress))\n            return callback('Invalid voterAddress address provided');\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        if(!utils.isBoolean(hasApproval))\n            return callback('Invalid hasApproval provided');\n\n        this.tronWeb.fullNode.request('wallet/proposalapprove', {\n            owner_address: this.tronWeb.address.toHex(voterAddress),\n            proposal_id: parseInt(proposalID),\n            is_add_approval: isApproval.toString()\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds tokens into a bancor style exchange.\n     */\n    injectExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.injectExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmount) || tokenAmount < 1)\n            return callback('Invalid tokenAmount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangeinject', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant:parseInt(tokenAmount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Withdraws tokens from a bancor style exchange.\n     */\n    withdrawExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.withdrawExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmount) || tokenAmount < 1)\n            return callback('Invalid tokenAmount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangewithdraw', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant:parseInt(tokenAmount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Trade tokens on a bancor style exchange.\n     */\n    tradeExchangeTokens(exchangeID = false, \n        tokenName = false, \n        tokenAmountSold = 0, \n        tokenAmountExpected = 0, \n        ownerAddress = this.tronWeb.defaultAddress.hex, \n        callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.tradeExchangeTokens, exchangeID, tokenName, tokenAmountSold, tokenAmountExpected, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmountSold) || tokenAmountSold < 1)\n            return callback('Invalid tokenAmountSold provided');\n\n        if(!utils.isInteger(tokenAmountExpected) || tokenAmountExpected < 1)\n            return callback('Invalid tokenAmountExpected provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangewithdraw', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant:parseInt(tokenAmountSold),\n            expected:parseInt(tokenAmountExpected)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n}","import TronWeb from 'index';\nimport utils from 'utils';\n\nexport default class Trx {\n    constructor(tronWeb = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    parseToken(token) {\n        return {\n            ...token,\n            name: this.tronWeb.toUtf8(token.name),\n            abbr: token.abbr && this.tronWeb.toUtf8(token.abbr),\n            description: token.description && this.tronWeb.toUtf8(token.description),\n            url: token.url && this.tronWeb.toUtf8(token.url)\n        };\n    }\n\n    getCurrentBlock(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getCurrentBlock);\n\n        this.tronWeb.fullNode.request('wallet/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlock(block = this.tronWeb.defaultBlock, callback = false) {\n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlock, block);\n\n        if(block === false)\n            return callback('No block identifier provided');\n\n        if(block == 'earliest')\n            block = 0;\n\n        if(block == 'latest')\n            return this.getCurrentBlock(callback);\n\n        if(isNaN(block) && utils.isHex(block))\n            return this.getBlockByHash(block, callback);\n\n        this.getBlockByNumber(block, callback);\n    }\n\n    getBlockByHash(blockHash, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getBlockByHash, blockHash);\n\n        this.tronWeb.fullNode.request('wallet/getblockbyid', { \n            value: blockHash \n        }, 'post').then(block => {\n            if(!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockByNumber(blockID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getBlockByNumber, blockID);\n\n        if(!utils.isInteger(blockID) || blockID < 0)\n            return callback('Invalid block number provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbynum', { \n            num: parseInt(blockID) \n        }, 'post').then(block => {\n            if(!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockTransactionCount(block = this.tronWeb.defaultBlock, callback = false) {\n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlockTransactionCount, block);\n\n        this.getBlock(block).then(({ transactions = [] }) => {\n            callback(null, transactions.length);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionFromBlock(block = this.tronWeb.defaultBlock, index = 0, callback = false) {\n        if(utils.isFunction(index)) {\n            callback = index;\n            index = 0;\n        }\n        \n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionFromBlock, block, index);\n\n        if(!utils.isInteger(index) || index < 0)\n            return callback('Invalid transaction index provided');\n\n        this.getBlock(block).then(({ transactions = false }) => {\n            if(!transactions || transactions.length < index)\n                return callback('Transaction not found in block');\n\n            callback(null, transactions[index]);\n        }).catch(err => callback(err));\n    }\n\n    getTransaction(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTransaction, transactionID);\n\n        this.tronWeb.fullNode.request('wallet/gettransactionbyid', { \n            value: transactionID \n        }, 'post').then(transaction => {\n            if(!Object.keys(transaction).length)\n                return callback('Transaction not found');\n                \n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionInfo(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTransactionInfo, transactionID);\n\n        this.tronWeb.solidityNode.request('walletsolidity/gettransactioninfobyid', { \n            value: transactionID \n        }, 'post').then(transaction => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionsToAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;          \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsToAddress, address, limit, offset);\n\n        return this.getTransactionsRelated(address, 'to', limit, offset, callback);\n    }\n\n    getTransactionsFromAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;           \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsFromAddress, address, limit, offset);\n\n        return this.getTransactionsRelated(address, 'from', limit, offset, callback);\n    }\n\n    async getTransactionsRelated(address = this.tronWeb.defaultAddress.hex, direction = 'all', limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;         \n        }\n\n        if(utils.isFunction(direction)) {\n            callback = direction;\n            direction = 'all';\n        }\n\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsRelated, address, direction, limit, offset);\n\n        if(![ 'to', 'from', 'all' ].includes(direction))\n            return callback('Invalid direction provided: Expected \"to\", \"from\" or \"all\"');\n        \n        if(direction == 'all') {\n            try {\n                const from = await this.getTransactionsRelated(address, 'from', limit, offset);\n                const to = await this.getTransactionsRelated(address, 'to', limit, offset);\n\n                return callback(null, [\n                    ...from.map(tx => (tx.direction = 'from', tx)),\n                    ...to.map(tx => (tx.direction = 'to', tx))\n                ].sort((a, b) => b.raw_data.timestamp - a.raw_data.timestamp));\n            } catch(ex) {\n                return callback(ex);\n            }\n        }\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if(!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request(`walletextension/gettransactions${direction}this`, {\n            account: {\n                address\n            },\n            offset,\n            limit\n        }, 'post').then(({ transaction }) => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getAccount, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBalance, address);\n\n        this.getAccount(address).then(({ balance = 0 }) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getBandwidth(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBandwidth, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccountnet', {\n            address\n        }, 'post').then(({ freeNetUsed = 0, freeNetLimit = 0, NetUsed = 0, NetLimit = 0 }) => {\n            callback(null, (freeNetLimit - freeNetUsed) + (NetLimit - NetUsed));\n        }).catch(err => callback(err));\n    }\n\n    getTokensIssuedByAddress(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTokensIssuedByAddress, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyaccount', {\n            address\n        }, 'post').then(({ assetIssue = false }) => {\n            if(!assetIssue)\n                return callback(null, {});\n\n            const tokens = assetIssue.map(token => {\n                return this.parseToken(token);\n            }).reduce((tokens, token) => {\n                return tokens[token.name] = token, tokens;\n            }, {});\n\n            callback(null, tokens);\n        }).catch(err => callback(err));\n    }\n\n    getTokenFromID(tokenID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTokenFromID, tokenID);\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if(!token.name)\n                return callback('Token does not exist');\n                \n            callback(null, this.parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    listNodes(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listNodes);\n\n        this.tronWeb.fullNode.request('wallet/listnodes').then(({ nodes = [] }) => {\n            callback(null, nodes.map(({ address: { host, port } }) => (\n                `${this.tronWeb.toUtf8(host)}:${port}`\n            )));\n        }).catch(err => callback(err));\n    }\n\n    getBlockRange(start = 0, end = 30, callback = false) {\n        if(utils.isFunction(end)) {\n            callback = end;\n            end = 30;            \n        }\n\n        if(utils.isFunction(start)) {\n            callback = start;\n            start = 0;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlockRange, start, end);\n\n        if(!utils.isInteger(start) || start < 0)\n            return callback('Invalid start of range provided');\n\n        if(!utils.isInteger(end) || end <= start)\n            return callback('Invalid end of range provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbylimitnext', { \n            startNum: parseInt(start),\n            endNum: parseInt(end) + 1\n        }, 'post').then(({ block = [] }) => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    listSuperRepresentatives(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listSuperRepresentatives);\n\n        this.tronWeb.fullNode.request('wallet/listwitnesses').then(({ witnesses = [] }) => {\n            callback(null, witnesses);\n        }).catch(err => callback(err));\n    }\n\n    listTokens(limit = 0, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 0;  \n        }\n        \n        if(!callback)\n            return this.injectPromise(this.listTokens, limit, offset);\n\n        if(!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if(!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        if(!limit) {\n            return this.tronWeb.fullNode.request('wallet/getassetissuelist').then(({ assetIssue = [] }) => {\n                callback(null, assetIssue.map(token => this.parseToken(token)));\n            }).catch(err => callback(err));\n        }\n\n        this.tronWeb.fullNode.request('wallet/getpaginatedassetissuelist', {\n            offset: parseInt(offset),\n            limit: parseInt(limit)\n        }, 'post').then(({ assetIssue = [] }) => {\n            callback(null, assetIssue.map(token => this.parseToken(token)));\n        }).catch(err => callback(err));\n    }\n\n    timeUntilNextVoteCycle(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.timeUntilNextVoteCycle);\n\n        this.tronWeb.fullNode.request('wallet/getnextmaintenancetime').then(({ num = -1 }) => {\n            if(num == -1)\n                return callback('Failed to get time until next vote cycle');\n\n            callback(null, Math.floor(num / 1000));\n        }).catch(err => callback(err));\n    }\n\n    getContract(contractAddress, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getContract, contractAddress);\n\n        if(!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        contractAddress = this.tronWeb.address.toHex(contractAddress);\n\n        this.tronWeb.fullNode.request('wallet/getcontract', {\n            value: contractAddress\n        }).then(contract => {\n            if(contract.Error)\n                return callback('Contract does not exist');\n\n            callback(null, contract);\n        }).catch(err => callback(err));\n    }\n\n    async sign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sign, transaction, privateKey);\n\n        if(!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if(transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            const address = this.tronWeb.address.toHex(\n                this.tronWeb.address.fromPrivateKey(privateKey)\n            ).toLowerCase();\n\n            if(address !== transaction.raw_data.contract[0].parameter.value.owner_address.toLowerCase())\n                return callback('Private key does not match address in transaction');\n\n            return callback(null,\n                utils.crypto.signTransaction(privateKey, transaction)\n            );\n        } catch(ex) {\n            callback(ex);\n        }\n    }\n\n    sendRawTransaction(signedTransaction = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.sendRawTransaction, signedTransaction);\n\n        if(!utils.isObject(signedTransaction))\n            return callback('Invalid transaction provided');\n\n        if(!signedTransaction.signature || !utils.isArray(signedTransaction.signature))\n            return callback('Transaction is not signed');\n\n        this.tronWeb.fullNode.request(\n            'wallet/broadcasttransaction', \n            signedTransaction,\n            'post'\n        ).then(result => {\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    async sendTransaction(to = false, amount = false, options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sendTransaction, to, amount, options);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendTrx(to, amount, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    async sendToken(to = false, amount = false, tokenID = false, options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, options);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isString(tokenID))\n            return callback('Invalid token ID provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendToken(to, amount, tokenID, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    send(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    sendTrx(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    broadcast(...args) {\n        return this.sendRawTransaction(...args);\n    }\n\n    signTransaction(...args) {\n        return this.sign(...args);\n    }\n\n    /**\n     * Gets a network modification proposal by ID.\n     */\n    getProposal(proposalID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getProposal, proposalID);\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/getproposalbyid', { \n            id: parseInt(proposalID),\n        }, 'post').then(proposal => {\n            callback(null, proposal);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listProposals(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listProposals);\n\n        this.tronWeb.fullNode.request('wallet/listproposals', {}, 'post').then(({ proposals = [] }) => {\n            callback(null, proposals);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all parameters available for network modification proposals.\n     */\n    getChainParameters(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getChainParameters);\n\n        this.tronWeb.fullNode.request('wallet/getchainparameters', {}, 'post').then(({ chainParameter = [] }) => {\n            callback(null, chainParameter);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    getAccountResources(address = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getAccountResources, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/getaccountresource', { \n            address: this.tronWeb.address.toHex(address),\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    getExchangeByID(exchangeID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getExchangeByID, address);\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        this.tronWeb.fullNode.request('wallet/getexchangebyid', { \n            address: this.tronWeb.address.toHex(address),\n        }, 'post').then(exchange => {\n            callback(null, exchange);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listExchanges(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchanges', {}, 'post').then(({ exchanges = [] }) => {\n            callback(null, exchanges);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between tokens.\n     */\n    exchangeCreate(ownerAddress = false,\n                   firstTokenID, firstTokenBalance,\n                   secondTokenID, secondTokenBalance, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getAccountResources, address);\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid address provided');\n\n        if (!utils.isString(firstTokenID) || !firstTokenID.length\n            || !utils.isString(secondTokenID) || !secondTokenID.length)\n            return callback('Invalid token ID provided');\n\n        if (!utils.isInteger(firstTokenBalance) || firstTokenBalance <= 0\n            || !utils.isInteger(secondTokenBalance) || secondTokenBalance <= 0)\n            return callback('Invalid amount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            first_token_id: firstTokenID,\n            first_token_balance: firstTokenBalance,\n            second_token_id: secondTokenID,\n            second_token_balance: secondTokenBalance\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Exchanges a transaction.\n     */\n    exchangeTransaction(ownerAddress = false, exchangeID, tokenID, quant, expected, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getAccountResources, address);\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid address provided');\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if (!utils.isInteger(quant) || quant <= 0)\n            return callback('Invalid quantity provided');\n\n        if (!utils.isInteger(expected) || expected < 0)\n            return callback('Invalid expected provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangetransaction', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: exchangeID,\n            token_id: tokenID,\n            quant,\n            expected\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listExchangesPaginated(limit = 10, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n        if(!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchangespaginated', {\n            limit,\n            offset\n        }, 'post').then(({ exchanges = [] }) => {\n            callback(null, exchanges);\n        }).catch(err => callback(err));\n    }\n};\n","export default class Witness {\n    \n}","import utils from 'utils';\n\nconst getFunctionSelector = abi => {\n    return abi.name + '(' + getParamTypes(abi.inputs || []).join(',') + ')';\n}\n\nconst getParamTypes = params => {\n    return params.map(({ type }) => type);\n}\n\nconst decodeOutput = (abi, output) => {\n    const names = abi.map(({ name }) => name).filter(name => !!name);\n    const types = abi.map(({ type }) => type);\n\n    return utils.abi.decodeParams(names, types, output);\n};\n\nexport default class Method {\n    constructor(contract, abi) {\n        this.tronWeb = contract.tronWeb;\n        this.contract = contract;\n\n        this.abi = abi;        \n        this.name = abi.name || (abi.name = abi.type);\n\n        this.inputs = abi.inputs || [];\n        this.outputs = abi.outputs || [];\n\n        this.signature = this.tronWeb.sha3(abi.name, false).slice(0, 8);\n        this.functionSelector = getFunctionSelector(abi);\n        this.injectPromise = utils.promiseInjector(this);\n\n        this.defaultOptions = {\n            feeLimit: 1000000000,\n            callValue: 0,\n            from: this.tronWeb.defaultAddress.hex, // Only used for send()\n            shouldPollResponse: false // Only used for sign()\n        };\n    }\n\n    onMethod(...args) {\n        const types = getParamTypes(this.inputs);\n\n        args.forEach((arg, index) => {\n            if(types[index] == 'address')\n                args[index] = this.tronWeb.address.toHex(arg).replace(/^(41)/, '0x')\n        });\n\n        return {\n            call: (...methodArgs) => this._call(types, args, ...methodArgs),\n            send: (...methodArgs) => this._send(types, args, ...methodArgs),\n            watch: (...methodArgs) => this._watch(...methodArgs)\n        }\n    }\n\n    async _call(types, args, options = {}, callback = false) {                \n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n            \n        if(!callback)\n            return this.injectPromise(this._call, types, args, options);\n\n        if(types.length !== args.length)\n            return callback('Invalid argument count provided');\n\n        if(!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if(!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const { stateMutability } = this.abi;\n\n        if(![ 'pure', 'view' ].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use send()`);\n\n        options = { ...this.defaultOptions, ...options };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        this.tronWeb.transactionBuilder.triggerSmartContract(\n            this.contract.address,\n            this.functionSelector,\n            options.feeLimit,\n            options.callValue,\n            parameters,\n            this.tronWeb.address.toHex(options.from),\n        (err, transaction) => {\n            if(err) \n                return callback(err);\n\n            if(!utils.hasProperty(transaction, 'constant_result'))\n                return callback('Failed to execute');\n\n            try {\n                let output = decodeOutput(this.outputs, '0x' + transaction.constant_result[0]);\n                \n                if(output.length === 1)\n                    output = output[0];\n\n                return callback(null, output);\n            } catch(ex) {\n                return callback(ex);\n            }\n        });\n    }\n\n    async _send(types, args, options = {}, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n            \n        if(!callback)\n            return this.injectPromise(this._send, types, args, options, privateKey);\n\n        if(types.length !== args.length)\n            throw new Error('Invalid argument count provided');\n\n        if(!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if(!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const { stateMutability } = this.abi;\n\n        if([ 'pure', 'view' ].includes(stateMutability.toLowerCase()))\n                return callback(`Methods with state mutability \"${stateMutability}\" must use call()`);\n\n        // If a function isn't payable, dont provide a callValue.\n        if(![ 'payable' ].includes(stateMutability.toLowerCase()))\n                options.callValue = 0;\n   \n        options = { ...this.defaultOptions, ...options };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        try {\n            const address = privateKey ? this.tronWeb.address.fromPrivateKey(privateKey) : this.tronWeb.defaultAddress.base58;\n            const transaction = await this.tronWeb.transactionBuilder.triggerSmartContract(\n                this.contract.address,\n                this.functionSelector,\n                options.feeLimit,\n                options.callValue,\n                parameters,\n                this.tronWeb.address.toHex(address)\n            );\n\n            if(!transaction.result || !transaction.result.result)\n                return callback('Unknown error: ' + JSON.stringify(transaction, null, 2));\n\n            // If privateKey is false, this won't be signed here. We assume sign functionality will be replaced.\n            const signedTransaction = await this.tronWeb.trx.sign(transaction.transaction, privateKey);\n\n            if(!signedTransaction.signature) {\n                if (!privateKey) {\n                    return callback('Transaction was not signed properly');\n                } else {\n                    return callback('Invalid private key provided');\n                }\n            }\n\n            const broadcast = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if(!broadcast.result)\n                return callback('Unknown error: ' + JSON.stringify(broadcast, null, 2));\n\n            if(!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if(index == 20) {\n                    return callback({ \n                        error: 'Cannot find result in solidity node', \n                        transaction: signedTransaction\n                    });\n                }\n                \n                const output = await this.tronWeb.trx.getTransactionInfo(signedTransaction.txID);\n\n                if(!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if(output.result && output.result == 'FAILED') {\n                    return callback({\n                        error: this.tronWeb.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if(!utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                let decoded = decodeOutput(this.outputs, '0x' + output.contractResult[0]);\n\n                if(decoded.length === 1)\n                    decoded = decoded[0];\n\n                return callback(null, decoded);\n            }\n\n            checkResult();                    \n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    async _watch(callback = false) {\n        if(!utils.isFunction(callback))\n            throw new Error('Expected callback to be provided');\n        \n        if(!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if(this.abi.type.toLowerCase() !== 'event')\n            return callback('Invalid method type for event watching');\n\n        if(!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        let listener = false;\n        let lastBlock = false;\n        const sinceTimestamp = new Date().getTime();\n\n        const getEvents = async () => {\n            try {\n                const events = await this.tronWeb.getEventResult(this.contract.address, sinceTimestamp, this.name);\n                const [ latestEvent ] = events.sort((a, b) => b.block - a.block);\n                const newEvents = events.filter((event, index) => {\n                    const duplicate = events.slice(0, index).some(priorEvent => (\n                        JSON.stringify(priorEvent) == JSON.stringify(event)\n                    ));\n\n                    if(duplicate)\n                        return false;\n\n                    if(!lastBlock)\n                        return true;            \n\n                    return event.block > lastBlock;\n                });\n\n                if(latestEvent)\n                    lastBlock = latestEvent.block;\n\n                return newEvents;\n            } catch(ex) {\n                return Promise.reject(ex);\n            }\n        };\n\n        const bindListener = () => {\n            if(listener)\n                clearInterval(listener);\n\n            listener = setInterval(() => {\n                getEvents().then(events => events.forEach(event => {\n                    callback(null, utils.parseEvent(event, this.abi))\n                })).catch(err => callback(err));\n            }, 3000);\n        };\n\n        await getEvents();\n        bindListener();\n\n        return {\n            start: bindListener(),\n            stop: () => {\n                if(!listener)\n                    return;\n\n                clearInterval(listener);\n                listener = false;\n            }\n        }\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport Method from './method';\n\nexport default class Contract {\n    constructor(tronWeb = false, abi = [], address = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n\n        this.address = address;\n        this.abi = abi;\n\n        this.eventListener = false;\n        this.bytecode = false;        \n        this.deployed = false;\n        this.lastBlock = false;  \n\n        this.methods = {};\n        this.props = [];\n\n        if(this.tronWeb.isAddress(address))\n            this.deployed = true;\n        else this.address = false;\n\n        this.loadAbi(abi);\n    }\n\n    async _getEvents() {\n        const events = await this.tronWeb.getEventResult(this.address);\n        const [ latestEvent ] = events.sort((a, b) => b.block - a.block);\n        const newEvents = events.filter((event, index) => {\n            const duplicate = events.slice(0, index).some(priorEvent => (\n                JSON.stringify(priorEvent) == JSON.stringify(event)\n            ));\n\n            if(duplicate)\n                return false;\n            \n            if(!this.lastBlock)\n                return true;            \n\n            return event.block > this.lastBlock;\n        });\n\n        if(latestEvent)\n            this.lastBlock = latestEvent.block;\n\n        return newEvents;\n    }\n\n    async _startEventListener(callback) {\n        if(this.eventListener)\n            clearInterval(this.eventListener);\n\n        if(!this.tronWeb.eventServer)\n            throw new Error('Event server is not configured');\n\n        if(!this.address)\n            throw new Error('Contract is not configured with an address');\n\n        this.eventCallback = callback;\n        await this._getEvents();\n\n        this.eventListener = setInterval(() => {\n            this._getEvents().then(newEvents => newEvents.forEach(event => {\n                this.eventCallback && this.eventCallback(event)\n            })).catch(err => {\n                console.error('Failed to get event list', err);\n            });\n        }, 3000);\n    }\n\n    _stopEventListener() {\n        if(!this.eventListener)\n            return;\n\n        clearInterval(this.eventListener);\n        this.eventListener = false;\n        this.eventCallback = false;\n    }\n\n    hasProperty(property) {\n        return this.hasOwnProperty(property) || this.__proto__.hasOwnProperty(property);\n    }\n\n    loadAbi(abi) {\n        this.abi = abi;\n        this.methods = {};\n\n        this.props.forEach(prop => delete this[prop]);\n\n        abi.forEach(func => {\n            // Don't build a method for constructor function. That's handled through contract create.\n            if (func.type.toLowerCase() === 'constructor')\n                return;\n\n            const method = new Method(this, func);\n            const methodCall = method.onMethod.bind(method);\n\n            const {\n                name,\n                functionSelector,\n                signature\n            } = method;\n\n            this.methods[name] = methodCall;\n            this.methods[functionSelector] = methodCall;\n            this.methods[signature] = methodCall;\n\n            if(!this.hasProperty(name)) {\n                this[name] = methodCall;\n                this.props.push(name);\n            }\n\n            if(!this.hasProperty(functionSelector)) {\n                this[functionSelector] = methodCall;\n                this.props.push(functionSelector);\n            }\n\n            if(!this.hasProperty(signature)) {\n                this[signature] = methodCall;\n                this.props.push(signature);\n            }\n        });\n    }\n\n    async new(options, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.new, options, privateKey);\n\n        try {\n            const address = this.tronWeb.address.fromPrivateKey(privateKey);\n            const transaction = await this.tronWeb.transactionBuilder.createSmartContract(options, address);\n            const signedTransaction = await this.tronWeb.trx.sign(transaction, privateKey);\n            const contract = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if(!contract.result)\n                return callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            return this.at(signedTransaction.contract_address, callback);\n        } catch(ex) {\n            return callback(ex);\n        }        \n    }\n\n    async at(contractAddress, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.at, contractAddress);\n\n        try {\n            const contract = await this.tronWeb.trx.getContract(contractAddress);\n\n            if(!contract.contract_address)\n                callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            this.address = contract.contract_address;\n            this.bytecode = contract.bytecode;\n            this.deployed = true;\n\n            this.loadAbi(contract.abi.entrys);\n\n            callback(null, this);\n        } catch(ex) {\n            if(ex.toString().includes('does not exist'))\n                return callback('Contract has not been deployed on the network');\n\n            return callback(ex);\n        }        \n    }\n\n    events(callback = false) {\n        if(!utils.isFunction(callback))\n            throw new Error('Callback function expected');\n\n        const self = this;\n\n        return {\n            start(startCallback = false) {\n                if(!startCallback) {\n                    self._startEventListener(callback);\n                    return this;\n                }\n\n                self._startEventListener(callback).then(() => {\n                    startCallback();\n                }).catch(err => {\n                    startCallback(err)\n                });\n\n                return this;\n            },\n            stop() {\n                self._stopEventListener();\n            }\n        };\n    }\n}","import providers from 'lib/providers';\nimport utils from 'utils';\nimport axios from 'axios';\nimport BigNumber from 'bignumber.js';\nimport EventEmitter from 'eventemitter3';\n\nimport TransactionBuilder from 'lib/transactionBuilder';\nimport Trx from 'lib/trx';\nimport Witness from 'lib/witness';\nimport Contract from 'lib/contract';\n\nimport { keccak256 } from 'js-sha3';\n\nexport default class TronWeb extends EventEmitter {\n    static providers = providers;\n    static BigNumber = BigNumber;\n    \n    constructor(fullNode, solidityNode, eventServer = false, privateKey = false) {\n        super();\n\n        if(utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if(utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n        this.setEventServer(eventServer);\n        \n        this.providers = providers;\n        this.BigNumber = BigNumber;\n\n        this.defaultBlock = false;\n        this.defaultPrivateKey = false;\n        this.defaultAddress = {\n            hex: false,\n            base58: false\n        };\n        \n        [\n            'sha3', 'toHex', 'toUtf8', 'fromUtf8',\n            'toAscii', 'fromAscii', 'toDecimal', 'fromDecimal',\n            'toSun', 'fromSun', 'toBigNumber', 'isAddress',\n            'compile', 'createAccount', 'address'\n        ].forEach(key => {\n            this[key] = TronWeb[key];\n        });\n\n        if(privateKey)\n            this.setPrivateKey(privateKey);\n\n        this.transactionBuilder = new TransactionBuilder(this);\n        this.trx = new Trx(this);\n        this.witness = new Witness(this);\n        this.utils = utils;\n\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    setDefaultBlock(blockID = false) {\n        if(blockID === false || blockID == 'latest' || blockID == 'earliest' || blockID === 0)\n            return this.defaultBlock = blockID;\n\n        if(!utils.isInteger(blockID) || !blockID)\n            throw new Error('Invalid block ID provided');\n\n        this.defaultBlock = Math.abs(blockID);\n    }\n\n    setPrivateKey(privateKey) {\n        try {\n            this.setAddress(\n                this.address.fromPrivateKey(privateKey)\n            );\n        } catch {\n            throw new Error('Invalid private key provided');\n        }\n\n        this.defaultPrivateKey = privateKey;\n        this.emit('privateKeyChanged', privateKey);\n    }\n\n    setAddress(address) {\n        if(!this.isAddress(address))\n            throw new Error('Invalid address provided');\n\n        const hex = this.address.toHex(address);\n        const base58 = this.address.fromHex(address);\n\n        if(this.defaultPrivateKey && this.address.fromPrivateKey(this.defaultPrivateKey) !== base58)\n           this.defaultPrivateKey = false;\n\n        this.defaultAddress = {\n            hex,\n            base58\n        };\n\n        this.emit('addressChanged', { hex, base58 });\n    }\n\n    isValidProvider(provider) {\n        return Object.values(providers).some(knownProvider => provider instanceof knownProvider);\n    }\n\n    isEventServerConnected() {\n        if(!this.eventServer)\n            return false;\n\n        return axios.get(this.eventServer).then(({ data }) => {\n            return utils.hasProperty(data, '_links');\n        }).catch(() => false);\n    }\n\n    setFullNode(fullNode) {\n        if(utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if(!this.isValidProvider(fullNode))\n            throw new Error('Invalid full node provided');\n\n        this.fullNode = fullNode;\n        this.fullNode.setStatusPage('wallet/getnowblock');\n    }\n\n    setSolidityNode(solidityNode) {\n        if(utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if(!this.isValidProvider(solidityNode))\n            throw new Error('Invalid solidity node provided');\n\n        this.solidityNode = solidityNode;\n        this.solidityNode.setStatusPage('walletsolidity/getnowblock');\n    }\n\n    setEventServer(eventServer = false) {\n        if(eventServer !== false && !utils.isValidURL(eventServer))\n            throw new Error('Invalid URL provided for event server');\n\n        this.eventServer = eventServer;\n    }\n\n    currentProviders() {\n        return {\n            fullNode: this.fullNode,\n            solidityNode: this.solidityNode,\n            eventServer: this.eventServer\n        };\n    }\n\n    currentProvider() {\n        return this.currentProviders();\n    }\n\n    getEventResult(contractAddress = false, sinceTimestamp = 0, eventName = false, blockNumber = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getEventResult, contractAddress, sinceTimestamp, eventName, blockNumber);\n\n        if(!this.eventServer)\n            callback('No event server configured');\n\n        const routeParams = [];\n\n        if(!this.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if(eventName && !contractAddress)\n            return callback('Usage of event name filtering requires a contract address');\n        \n        if(blockNumber && !eventName)\n            return callback('Usage of block number filtering requires an event name');\n\n        if(contractAddress)\n            routeParams.push(this.address.fromHex(contractAddress));\n\n        if(eventName)\n            routeParams.push(eventName);\n\n        if(blockNumber)\n            routeParams.push(blockNumber);\n\n        return axios(`${this.eventServer}/event/contract/${routeParams.join('/')}?since=${sinceTimestamp}`).then(({ data = false }) => {\n            if(!data)\n                return callback('Unknown error occurred');\n\n            if(!utils.isArray(data))\n                return callback(data);\n\n            return callback(null, \n                data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err)); \n    }\n\n    getEventByTransacionID(transactionID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getEventByTransacionID, transactionID);\n\n        if(!this.eventServer)\n            callback('No event server configured');\n\n        return axios(`${this.eventServer}/event/transaction/${transactionID}`).then(({ data = false }) => {\n            if(!data)\n                return callback('Unknown error occurred');\n\n            if(!utils.isArray(data))\n                return callback(data);\n\n            return callback(null, \n                data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n    contract(abi = [], address = false) {\n        return new Contract(this, abi, address);\n    }\n\n    static get address() {\n        return {\n            fromHex(address) {\n                if(!utils.isHex(address))\n                    return address;\n\n                return utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address)\n                );\n            },\n            toHex(address) {\n                if(utils.isHex(address))\n                    return address.toLowerCase();\n\n                return utils.code.byteArray2hexStr(\n                    utils.crypto.decodeBase58Address(address)\n                ).toLowerCase();\n            },\n            fromPrivateKey(privateKey) {\n                try {\n                    return utils.crypto.pkToAddress(privateKey);\n                } catch { return false; }\n            }\n        }\n    }\n\n    static sha3(string, prefix = true) {\n        return (prefix ? '0x' : '') + keccak256(string);\n    }\n\n    static toHex(val) {\n        if(utils.isBoolean(val))\n            return TronWeb.fromDecimal(+val);\n\n        if(utils.isBigNumber(val))\n            return TronWeb.fromDecimal(val);\n\n        if(typeof val === 'object')\n            return TronWeb.fromUtf8(JSON.stringify(val));\n\n        if(utils.isString(val)) {\n            if (/^(-|)0x/.test(val))\n                return val;\n            // if(val.indexOf('-0x') === 0)\n            //     return TronWeb.fromDecimal(val); // << this returns val\n            //\n            // if(val.indexOf('0x') === 0)\n            //     return val;\n\n            if(!isFinite(val))\n                return TronWeb.fromUtf8(val);\n        }\n\n        return TronWeb.fromDecimal(val);\n    }\n\n    static toUtf8(hex) {\n        hex = hex.replace(/^0x/,'');\n        return Buffer.from(hex, 'hex').toString('utf8');\n    }\n\n    static fromUtf8(string) {\n        return '0x' + Buffer.from(string, 'utf8').toString('hex');\n    }\n\n    static toAscii(hex) {\n        hex = hex.replace(/^0x/,'');\n        return Buffer.from(hex, 'hex').toString('ascii');\n    }\n\n    static fromAscii(string, padding) {\n        return '0x' + Buffer.from(string, 'ascii').toString('hex').padEnd(padding, '0');\n    }\n\n    static toDecimal(value) {\n        return TronWeb.toBigNumber(value).toNumber();\n    }\n\n    static fromDecimal(value) {\n        const number = TronWeb.toBigNumber(value);\n        const result = number.toString(16);\n\n        return number.isLessThan(0) ? '-0x' + result.substr(1) : '0x' + result;\n    }\n\n    static fromSun(sun) {\n        const trx = TronWeb.toBigNumber(sun).div(1_000_000);        \n        return utils.isBigNumber(sun) ? trx : trx.toString(10);\n    }\n\n    static toSun(trx) {\n        const sun = TronWeb.toBigNumber(trx).times(1_000_000);        \n        return utils.isBigNumber(trx) ? sun : sun.toString(10);\n    }\n\n    static toBigNumber(amount = 0) {\n        if(utils.isBigNumber(amount))\n            return amount;\n\n        if(utils.isString(amount) && (amount.indexOf('0x') === 0 || amount.indexOf('-0x') === 0))\n            return new BigNumber(amount.replace('0x', ''), 16);\n\n        return new BigNumber(amount.toString(10), 10);\n    }\n\n    static isAddress(address = false) {\n        if(!utils.isString(address))\n            return false;\n\n        // Convert HEX to Base58\n        if(address.length === 42) {\n            return TronWeb.isAddress(\n                utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address)\n                )\n            );\n        }\n\n        return utils.crypto.isAddressValid(address);\n    }\n\n    // TODO\n    static compile(solditySource) {\n\n    }\n\n    static async createAccount(callback = false) {\n        const account = utils.accounts.generateAccount();\n\n        if(callback)\n            callback(null, account);\n\n        return account;\n    }\n\n    async isConnected(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.isConnected);\n\n        callback(null, {\n            fullNode: await this.fullNode.isConnected(),\n            solidityNode: await this.solidityNode.isConnected(),\n            eventServer: await this.isEventServerConnected()\n        });\n    }\n};\n"],"sourceRoot":""}