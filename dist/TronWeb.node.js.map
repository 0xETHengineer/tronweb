{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@babel/runtime/helpers/asyncToGenerator\"","webpack:///external \"source-map-support/register\"","webpack:///external \"ethers\"","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///external \"@babel/runtime/helpers/toConsumableArray\"","webpack:///external \"@babel/runtime/helpers/objectSpread\"","webpack:///external \"@babel/runtime/helpers/assertThisInitialized\"","webpack:///external \"axios\"","webpack:///external \"bignumber.js\"","webpack:///external \"@babel/runtime/helpers/slicedToArray\"","webpack:///external \"js-sha3\"","webpack:///external \"elliptic\"","webpack:///external \"@babel/runtime/helpers/defineProperty\"","webpack:///external \"@babel/runtime/helpers/typeof\"","webpack:///external \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack:///external \"@babel/runtime/helpers/getPrototypeOf\"","webpack:///external \"@babel/runtime/helpers/inherits\"","webpack:///external \"jssha\"","webpack:///external \"validator\"","webpack:///external \"eventemitter3\"","webpack:///./src/utils/base64.js","webpack:///./src/utils/bytes.js","webpack:///./src/utils/address.js","webpack:///./src/utils/code.js","webpack:///./src/utils/base58.js","webpack:///./src/utils/crypto.js","webpack:///./src/utils/accounts.js","webpack:///./src/utils/abi.js","webpack:///./src/utils/index.js","webpack:///./src/lib/providers/index.js","webpack:///./src/lib/providers/HttpProvider.js","webpack:///./src/lib/transactionBuilder.js","webpack:///./src/lib/trx.js","webpack:///./src/lib/witness.js","webpack:///./src/lib/contract/method.js","webpack:///./src/lib/contract/index.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","Base64","_this","this","_keyStr","encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","length","charCodeAt","isNaN","charAt","encodeIgnoreUtf8","inputBytes","decode","replace","indexOf","String","fromCharCode","_utf8_decode","decodeToByteArray","_out2ByteArray","utftext","byteArray","Array","c1","c2","_utf8_encode","string","c3","byte2hexStr","byte","str","bytesToString","arr","one","toString","v","match","bytesLength","store","slice","st","parseInt","hextoString","hex","split","out","tmp","concat","base64DecodeFromString","string64","byteArray2hexStr","ADDRESS_SIZE","ADDRESS_PREFIX","ADDRESS_PREFIX_BYTE","bin2String","array","apply","toConsumableArray_default","arrayEquals","array1","array2","stringToBytes","len","bytes","push","code_bytesToString","code_hextoString","hexChar2byte","isHexChar","hexStr2byteArray","j","k","code_byte2hexStr","code_byteArray2hexStr","reduce","code_base64DecodeFromString","base64EncodeToString","strToDate","tempStrs","dateStrs","year","month","day","timeStrs","hour","minute","second","Date","isNumber","getStringType","ALPHABET","ALPHABET_MAP","base58_i","BASE","encode58","buffer","digits","carry","reverse","map","digit","join","decode58","Error","getBase58CheckAddress","addressBytes","checkSum","SHA256","decodeBase58Address","base58Sting","address","offset","checkSum1","signTransaction","priKeyBytes","transaction","signature","ECKeySign","txID","arrayToBase64String","a","btoa","crypto_signBytes","privateKey","contents","getRowBytesFromTransactionBase64","base64Data","bytesDecode","proto","protocol","Transaction","deserializeBinary","getRawData","serializeBinary","genPriKey","priKeyHex","external_elliptic_","genKeyPair","getPrivate","computeAddress","pubBytes","hash","external_js_sha3_","substring","getAddressFromPriKey","getPubKeyFromPriKey","decode58Check","addressStr","decodeCheck","decodeData","hash1","isAddressValid","base58Str","getBase58CheckAddressFromPriKeyBase64String","priKeyBase64String","getHexStrAddressFromPriKeyBase64String","getAddressFromPriKeyBase64String","pubkey","keyFromPrivate","getPublic","x","y","xHex","yHex","hashBytes","sign","id","recoveryParam","rHex","sHex","msgBytes","shaObj","external_jssha_default","msgHex","update","getHash","passwordToAddress","password","pkToAddress","generateAccount","pubKeyBytes","publicKey","base58","abi_abiCoder","external_ethers_","AbiCoder","decodeParams","names","types","ignoreMethodHash","obj","arg","index","substr","toLowerCase","encodeParams","values","src_TronWeb","toHex","utils","isValidURL","url","external_validator_default","isURL","protocols","isObject","isArray","isJson","JSON","parse","ex","isBoolean","bool","isBigNumber","number","external_bignumber_js_default","constructor","isString","isFunction","isHex","isInteger","Number","hasProperty","hasProperties","_len","arguments","properties","_key","includes","injectPromise","func","_len2","args","_key2","Promise","resolve","reject","err","res","promiseInjector","scope","_this2","_len3","_key3","mapEvent","event","block","block_number","timestamp","block_timestamp","contract","contract_address","event_name","transaction_id","result","parseEvent","_ref","abi","inputs","type","_abi$index","padLeft","padding","amount","src_utils","objectSpread_default","code","code_namespaceObject","accounts","accounts_namespaceObject","base58_namespaceObject","bytes_namespaceObject","crypto","crypto_namespaceObject","abi_namespaceObject","providers","HttpProvider","host","timeout","undefined","user","headers","statusPage","classCallCheck_default","instance","external_axios_default","baseURL","auth","request","then","data","catch","payload","method","params","transactionBuilder_TransactionBuilder","TransactionBuilder","tronWeb","to","from","defaultAddress","callback","isAddress","fullNode","to_address","owner_address","sendTrx","tokenID","fromUtf8","asset_name","sendToken","issuerAddress","buyer","purchaseToken","duration","resource","frozen_balance","frozen_duration","freezeBalance","unfreezeBalance","withdrawBlockRewards","applyForSR","votes","voterAddress","vote","keys","invalid","entries","_ref2","slicedToArray_default","srAddress","voteCount","vote_address","vote_count","options","createSmartContract","_options$abi","_options$bytecode","bytecode","_options$feeLimit","feeLimit","_options$callValue","callValue","_options$userFeePerce","userFeePercentage","_options$parameters","parameters","_options$name","_unused","console","log","payable","some","constructorParams","find","it","abiCoder","fee_limit","call_value","consume_user_resource_percent","stringify","parameter","contractAddress","functionSelector","triggerSmartContract","_parameters$i","function_selector","message","toUtf8","_this3","createToken","_options$name2","_options$abbreviation","abbreviation","_options$description","description","_options$url","_options$totalSupply","totalSupply","_options$trxRatio","trxRatio","_options$tokenRatio","tokenRatio","_options$saleStart","saleStart","now","_options$saleEnd","saleEnd","_options$freeBandwidt","freeBandwidth","_options$freeBandwidt2","freeBandwidthLimit","_options$frozenAmount","frozenAmount","_options$frozenDurati","frozenDuration","abbr","total_supply","trx_num","num","start_time","end_time","free_asset_net_limit","public_free_asset_net_limit","frozen_supply","frozen_amount","frozen_days","_this4","updateToken","_options$description2","_options$url2","_options$freeBandwidt3","_options$freeBandwidt4","new_limit","new_public_limit","_this5","createProposal","_this6","proposalID","proposal_id","deleteProposal","_this7","hasApproval","is_add_approval","isApproval","voteProposal","_this8","exchangeID","tokenName","tokenAmount","ownerAddress","exchange_id","token_id","fromAscii","quant","injectExchangeTokens","_this9","withdrawExchangeTokens","_this10","tokenAmountSold","tokenAmountExpected","expected","tradeExchangeTokens","trx_Trx","Trx","token","getCurrentBlock","defaultBlock","getBlockByHash","getBlockByNumber","getBlock","blockHash","blockID","getBlockTransactionCount","_ref$transactions","transactions","_ref2$transactions","getTransactionFromBlock","transactionID","getTransaction","getTransactionInfo","solidityNode","limit","getTransactionsRelated","getTransactionsToAddress","getTransactionsFromAddress","direction","tx","sort","b","raw_data","_context","t0","account","_ref3","getAccount","getBalance","_ref4","_ref4$balance","balance","_ref5","_ref5$freeNetUsed","freeNetUsed","_ref5$freeNetLimit","freeNetLimit","_ref5$NetUsed","NetUsed","_ref5$NetLimit","NetLimit","getBandwidth","_ref6","_ref6$assetIssue","assetIssue","tokens","parseToken","getTokensIssuedByAddress","getTokenFromID","listNodes","_ref7","_ref7$nodes","nodes","_ref8","_ref8$address","port","start","end","startNum","endNum","_ref9","_ref9$block","getBlockRange","listSuperRepresentatives","_ref10","_ref10$witnesses","witnesses","_ref12","_ref12$assetIssue","_ref11","_ref11$assetIssue","listTokens","timeUntilNextVoteCycle","_ref13","_ref13$num","Math","floor","getContract","useTronHeader","verifyMessage","messageBytes","toUtf8Bytes","messageDigest","keccak256","recovered","recoverAddress","tronAddress","fromHex","defaultPrivateKey","signingKey","SigningKey","signDigest","signatureHex","_context3","t1","fromPrivateKey","t2","signedTransaction","sendRawTransaction","sendTransaction","transactionBuilder","_context4","_context5","proposal","getProposal","listProposals","_ref14","_ref14$proposals","proposals","getChainParameters","_ref15","_ref15$chainParameter","chainParameter","resources","getAccountResources","exchange","getExchangeByID","listExchanges","_ref16","_ref16$exchanges","exchanges","firstTokenID","firstTokenBalance","secondTokenID","secondTokenBalance","first_token_id","first_token_balance","second_token_id","second_token_balance","_ref17","_ref17$exchanges","witness_Witness","getFunctionSelector","getParamTypes","method_decodeOutput","filter","method_Method","Method","outputs","sha3","defaultOptions","shouldPollResponse","forEach","methodArgs","_call","send","_send","watch","_watch","deployed","stateMutability","constant_result","trx","broadcast","checkResult","_callee2","decoded","_args2","regenerator_default","wrap","_context2","prev","next","abrupt","error","sent","setTimeout","resMessage","contractResult","stop","eventServer","listener","lastBlock","sinceTimestamp","getTime","getEvents","_callee4","events","_events$sort","_events$sort2","latestEvent","newEvents","getEventResult","priorEvent","bindListener","clearInterval","setInterval","contract_Contract","Contract","eventListener","methods","props","loadAbi","eventCallback","_getEvents","__proto__","prop","methodCall","onMethod","new","at","entrys","self","startCallback","_startEventListener","_stopEventListener","TronWeb","possibleConstructorReturn_default","getPrototypeOf_default","setFullNode","setSolidityNode","setEventServer","BigNumber","setPrivateKey","assertThisInitialized_default","witness","abs","setAddress","emit","provider","knownProvider","isValidProvider","setStatusPage","currentProviders","eventName","blockNumber","routeParams","_ref2$data","response","_ref3$data","getEventByTransacionID","isConnected","isEventServerConnected","val","fromDecimal","typeof_default","test","isFinite","Buffer","padEnd","toBigNumber","toNumber","isLessThan","sun","div","times","solditySource","_unused2","external_eventemitter3_default"],"mappings":"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","file":"TronWeb.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 22);\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"source-map-support/register\");","module.exports = require(\"ethers\");","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","module.exports = require(\"@babel/runtime/helpers/toConsumableArray\");","module.exports = require(\"@babel/runtime/helpers/objectSpread\");","module.exports = require(\"@babel/runtime/helpers/assertThisInitialized\");","module.exports = require(\"axios\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"@babel/runtime/helpers/slicedToArray\");","module.exports = require(\"js-sha3\");","module.exports = require(\"elliptic\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"@babel/runtime/helpers/typeof\");","module.exports = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"@babel/runtime/helpers/getPrototypeOf\");","module.exports = require(\"@babel/runtime/helpers/inherits\");","module.exports = require(\"jssha\");","module.exports = require(\"validator\");","module.exports = require(\"eventemitter3\");","export function Base64() {\n    this._keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n    this.encode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n        \n        while (i < input.length) {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.encodeIgnoreUtf8 = inputBytes => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n        \n        while (i < inputBytes.length) {\n            chr1 = inputBytes[i++];\n            chr2 = inputBytes[i++];\n            chr3 = inputBytes[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.decode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = _keyStr.indexOf(input.charAt(i++));\n            enc2 = _keyStr.indexOf(input.charAt(i++));\n            enc3 = _keyStr.indexOf(input.charAt(i++));\n            enc4 = _keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n                \n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n        \n        return this._utf8_decode(output);\n    }\n\n    this.decodeToByteArray = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = _keyStr.indexOf(input.charAt(i++));\n            enc2 = _keyStr.indexOf(input.charAt(i++));\n            enc3 = _keyStr.indexOf(input.charAt(i++));\n            enc4 = _keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n        \n        return this._out2ByteArray(output);\n    }\n\n    this._out2ByteArray = utftext => {\n        const byteArray = new Array(utftext.length);\n\n        let i = 0;\n        let c = c1 = c2 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n            byteArray[i] = c;\n            i++;\n        }\n\n        return byteArray;\n    }\n\n    this._utf8_encode = string => {\n        string = string.replace(/\\r\\n/g, \"\\n\");\n        let utftext = \"\";\n\n        for (let n = 0; n < string.length; n++) {\n            const c = string.charCodeAt(n);\n\n            if (c < 128) {\n                utftext += String.fromCharCode(c);\n            } else if ((c > 127) && (c < 2048)) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            } else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n        }\n\n        return utftext;\n    }\n\n    this._utf8_decode = utftext => {\n        let string = \"\";\n        let i = 0;\n        let c = c1 = c2 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n\n            if (c < 128) {\n                string += String.fromCharCode(c);\n                i++;\n            } else if ((c > 191) && (c < 224)) {\n                c2 = utftext.charCodeAt(i + 1);\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                i += 2;\n            } else {\n                c2 = utftext.charCodeAt(i + 1);\n                c3 = utftext.charCodeAt(i + 2);\n\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\n                i += 3;\n            }\n        }\n\n        return string;\n    }\n}","import { Base64 } from './base64';\n\nexport function byte2hexStr(byte) {\n    const hexByteMap = '0123456789ABCDEF';\n\n    let str = '';\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n        \n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length === 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else {\n            str += String.fromCharCode(arr[i]);\n        }\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.split('');\n    let out = '';\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        let tmp = `0x${ arr[i * 2] }${ arr[i * 2 + 1] }`;\n        out += String.fromCharCode(tmp);\n    }\n\n    return out;\n}\n\nexport function base64DecodeFromString(string64) {\n    return new Base64().decodeToByteArray(string64);\n}\n\nexport function byteArray2hexStr(byteArray) {\n    let str = '';\n\n    for (let i = 0; i < (byteArray.length); i++)\n        str += byte2hexStr(byteArray[i]);\n        \n    return str;\n}","export const ADDRESS_SIZE = 34;\nexport const ADDRESS_PREFIX = \"41\";\nexport const ADDRESS_PREFIX_BYTE = 0x41;\n","import { Base64 } from './base64';\n\nexport function bin2String(array) {\n    return String.fromCharCode(...array);\n}\n\nexport function arrayEquals(array1, array2) {\n    if (array1.length != array2.length)\n        return false;\n        \n    let i;\n\n    for (i = 0; i < array1.length; i++) {\n        if (array1[i] != array2[i])\n            return false;\n    }\n\n    return true;\n}\n\nexport function stringToBytes(str) {\n    const bytes = new Array();\n    let len;\n    let c;\n\n    len = str.length;\n\n    for (let i = 0; i < len; i++) {\n        c = str.charCodeAt(i);\n\n        if (c >= 0x010000 && c <= 0x10FFFF) {\n            bytes.push(((c >> 18) & 0x07) | 0xF0);\n            bytes.push(((c >> 12) & 0x3F) | 0x80);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000800 && c <= 0x00FFFF) {\n            bytes.push(((c >> 12) & 0x0F) | 0xE0);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000080 && c <= 0x0007FF) {\n            bytes.push(((c >> 6) & 0x1F) | 0xC0);\n            bytes.push((c & 0x3F) | 0x80);\n        } else bytes.push(c & 0xFF);\n    }\n\n    return bytes;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n        \n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length == 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else str += String.fromCharCode(arr[i]);\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.split(\"\");\n    let out = \"\";\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        const tmp = `0x${arr[i * 2]}${arr[i * 2 + 1]}`;\n        const charValue = String.fromCharCode(tmp);\n\n        out += charValue;\n    }\n\n    return out\n}\n\nexport function hexChar2byte(c) {\n    let d = 0;\n\n    if (c >= 'A' && c <= 'F')\n        d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    else if (c >= 'a' && c <= 'f')\n        d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10;\n    else if (c >= '0' && c <= '9')\n        d = c.charCodeAt(0) - '0'.charCodeAt(0);\n        \n    return d;\n}\n\nexport function isHexChar(c) {\n    if ((c >= 'A' && c <= 'F') ||\n        (c >= 'a' && c <= 'f') ||\n        (c >= '0' && c <= '9')) {\n        return 1;\n    }\n\n    return 0;\n}\n\nexport function hexStr2byteArray(str) {\n    const byteArray = Array();\n    let d = 0;\n    let j = 0;\n    let k = 0;\n\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charAt(i);\n\n        if (isHexChar(c)) {\n            d <<= 4;\n            d += hexChar2byte(c);\n            j++;\n\n            if (0 === (j % 2)) {\n                byteArray[k++] = d;\n                d = 0;\n            }\n        }\n    }\n\n    return byteArray;\n}\n\nexport function byte2hexStr(byte) {\n    const hexByteMap = \"0123456789ABCDEF\";\n    let str = \"\";\n\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function byteArray2hexStr(byteArray) {\n    return byteArray.reduce((string, byte) => {\n        return string + byte2hexStr(byte);\n    }, '');\n}\n\nexport function base64DecodeFromString(string64) {\n    const b = new Base64();\n    const decodeBytes = b.decodeToByteArray(string64);\n\n    return decodeBytes;\n}\n\nexport function base64EncodeToString(bytes) {\n    const b = new Base64();\n    const string64 = b.encodeIgnoreUtf8(bytes);\n\n    return string64\n}\n\n//yyyy-MM-DD HH-mm-ss\nexport function strToDate(str) {\n    const tempStrs = str.split(\" \");\n    const dateStrs = tempStrs[0].split(\"-\");\n    const year = parseInt(dateStrs[0], 10);\n    const month = parseInt(dateStrs[1], 10) - 1;\n    const day = parseInt(dateStrs[2], 10);\n\n    if (tempStrs.length > 1) {\n        const timeStrs = tempStrs[1].split(\"-\");\n        const hour = parseInt(timeStrs[0], 10);\n        const minute = parseInt(timeStrs[1], 10) - 1;\n        const second = parseInt(timeStrs[2], 10);\n\n        return new Date(year, month, day, hour, minute, second);\n    }\n\n    return new Date(year, month, day);\n}\n\nexport function isNumber(c) {\n    if (c >= '0' && c <= '9')\n        return 1;\n        \n    return 0;\n}\n\n//return 1: address  --- 20Bytes HexString\n//return 2: blockNumber ------ Decimal number\n//return 3: assetName ------ String\n//return other: error\nexport function getStringType(str) {\n    if (null == str)\n        return -1;\n\n    if (typeof (str) != 'string')\n        return -1;\n\n    if (str.length == 0 || str == \"\")\n        return -1;\n\n    let i = 0;\n\n    if (str.length == 40) {\n        for (; i < 40; i++) {\n            var c = str.charAt(i);\n\n            if (!isHexChar(c))\n                break;\n        }\n    }\n\n    if (i == 40)\n        return 1; //40 Hex, Address\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (!isNumber(c))\n            break;\n    }\n\n    if (i == str.length)\n        return 2; //Alll Decimal number, BlockNumber\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (c > ' ')\n            return 3; //At least one visible character\n    }\n\n    return -1;\n}","const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nconst ALPHABET_MAP = {};\n\nfor (let i = 0; i < ALPHABET.length; i++)\n    ALPHABET_MAP[ALPHABET.charAt(i)] = i;\n\nconst BASE = 58;\n\nexport function encode58(buffer) {\n    if (buffer.length === 0) \n        return '';\n\n    let i;\n    let j;\n\n    const digits = [0];\n\n    for (i = 0; i < buffer.length; i++) {\n        for (j = 0; j < digits.length; j++) \n            digits[j] <<= 8;\n\n        digits[0] += buffer[i];\n        let carry = 0;\n\n        for (j = 0; j < digits.length; ++j) {\n            digits[j] += carry;\n            carry = (digits[j] / BASE) | 0;\n            digits[j] %= BASE\n        }\n\n        while (carry) {\n            digits.push(carry % BASE);\n            carry = (carry / BASE) | 0\n        }\n    }\n\n    for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++) \n        digits.push(0);\n\n    return digits.reverse().map(digit => ALPHABET[digit]).join('');\n}\n\nexport function decode58(string) {\n    if (string.length === 0) \n        return [];\n\n    let i;\n    let j;\n\n    const bytes = [0];\n\n    for (i = 0; i < string.length; i++) {\n        const c = string[i];\n\n        if (!(c in ALPHABET_MAP))\n            throw new Error('Non-base58 character');\n\n        for (j = 0; j < bytes.length; j++) \n            bytes[j] *= BASE;\n\n        bytes[0] += ALPHABET_MAP[c];\n        let carry = 0;\n\n        for (j = 0; j < bytes.length; ++j) {\n            bytes[j] += carry;\n            carry = bytes[j] >> 8;\n            bytes[j] &= 0xff;\n        }\n\n        while (carry) {\n            bytes.push(carry & 0xff);\n            carry >>= 8;\n        }\n    }\n\n    for (i = 0; string[i] === '1' && i < string.length - 1; i++)\n        bytes.push(0);\n\n    return bytes.reverse();\n}","import jsSHA from 'jssha';\n\nimport { ADDRESS_PREFIX, ADDRESS_PREFIX_BYTE } from './address';\nimport { base64EncodeToString } from './code';\nimport { base64DecodeFromString, hexStr2byteArray } from './code';\nimport { encode58, decode58 } from './base58';\nimport { keccak256 } from 'js-sha3';\nimport { ADDRESS_SIZE } from './address';\nimport { byte2hexStr, byteArray2hexStr } from './bytes';\nimport { ec as EC } from 'elliptic';\n\nexport function getBase58CheckAddress(addressBytes) {\n    const hash0 = SHA256(addressBytes);\n    const hash1 = SHA256(hash0);\n\n    let checkSum = hash1.slice(0, 4);\n    checkSum = addressBytes.concat(checkSum);\n\n    return encode58(checkSum);\n}\n\nexport function decodeBase58Address(base58Sting) {\n    if (typeof (base58Sting) != 'string')\n        return false;\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    let address = decode58(base58Sting);\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    const len = address.length;\n    const offset = len - 4;\n    const checkSum = address.slice(offset);\n\n    address = address.slice(0, offset);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return address;\n    }\n\n    return hexStr2byteArray('000000000000000000000000000000000000000000');\n}\n\nexport function signTransaction(priKeyBytes, transaction) {\n    if (typeof priKeyBytes === 'string')\n        priKeyBytes = hexStr2byteArray(priKeyBytes);\n\n    const txID = transaction.txID;\n    const signature = ECKeySign(hexStr2byteArray(txID), priKeyBytes);\n\n    transaction.signature = [ signature ];\n    return transaction;\n}\n\nexport function arrayToBase64String(a) {\n    return btoa(String.fromCharCode(...a));\n}\n\nexport function signBytes(privateKey, contents) {\n    if (typeof privateKey === 'string')\n        privateKey = hexStr2byteArray(privateKey);\n\n    const hashBytes = SHA256(contents);\n    const signBytes = ECKeySign(hashBytes, privateKey);\n\n    return signBytes;\n}\n\nexport function getRowBytesFromTransactionBase64(base64Data) {\n    const bytesDecode = base64DecodeFromString(base64Data);\n    const transaction = proto.protocol.Transaction.deserializeBinary(bytesDecode);\n    const raw = transaction.getRawData();\n\n    return raw.serializeBinary();\n}\n\nexport function genPriKey() {\n    const ec = new EC('secp256k1');\n    const key = ec.genKeyPair();\n    const priKey = key.getPrivate();\n\n    let priKeyHex = priKey.toString('hex');\n\n    while (priKeyHex.length < 64) {\n        priKeyHex = `0${priKeyHex}`;\n    }\n\n    return hexStr2byteArray(priKeyHex);\n}\n\nexport function computeAddress(pubBytes) {\n    if (pubBytes.length === 65)\n        pubBytes = pubBytes.slice(1);\n\n    const hash = keccak256(pubBytes).toString();\n    const addressHex = ADDRESS_PREFIX + hash.substring(24);\n\n    return hexStr2byteArray(addressHex);\n}\n\nexport function getAddressFromPriKey(priKeyBytes) {\n    let pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    return computeAddress(pubBytes);\n}\n\nexport function decode58Check(addressStr) {\n    const decodeCheck = decode58(addressStr);\n\n    if (decodeCheck.length <= 4)\n        return false;\n\n    const decodeData = decodeCheck.slice(0, decodeCheck.length - 4);\n    const hash0 = SHA256(decodeData);\n    const hash1 = SHA256(hash0);\n\n    if (hash1[0] === decodeCheck[decodeData.length] &&\n        hash1[1] === decodeCheck[decodeData.length + 1] &&\n        hash1[2] === decodeCheck[decodeData.length + 2] &&\n        hash1[3] === decodeCheck[decodeData.length + 3]) {\n        return decodeData;\n    }\n\n    return false;\n}\n\nexport function isAddressValid(base58Str) {\n    if (typeof (base58Str) !== 'string')\n        return false;\n        \n    if (base58Str.length !== ADDRESS_SIZE)\n        return false;\n\n    let address = decode58(base58Str);\n\n    if (address.length !== 25)\n        return false;\n        \n    if (address[0] !== ADDRESS_PREFIX_BYTE)\n        return false;\n        \n    const checkSum = address.slice(21);\n    address = address.slice(0, 21);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return true\n    }\n\n    return false;\n}\n\nexport function getBase58CheckAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n\n    return getBase58CheckAddress(addressBytes);\n}\n\nexport function getHexStrAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressHex = byteArray2hexStr(addressBytes);\n\n    return addressHex;\n}\n\nexport function getAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressBase64 = base64EncodeToString(addressBytes);\n\n    return addressBase64;\n}\n\nexport function getPubKeyFromPriKey(priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const pubkey = key.getPublic();\n    const x = pubkey.x;\n    const y = pubkey.y;\n\n    let xHex = x.toString('hex');\n\n    while (xHex.length < 64) {\n        xHex = `0${xHex}`;\n    }\n\n    let yHex = y.toString('hex');\n\n    while (yHex.length < 64) {\n        yHex = `0${yHex}`;\n    }\n\n    const pubkeyHex = `04${xHex}${yHex}`;\n    const pubkeyBytes = hexStr2byteArray(pubkeyHex);\n\n    return pubkeyBytes;\n}\n\nexport function ECKeySign(hashBytes, priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const signature = key.sign(hashBytes);\n    const r = signature.r;\n    const s = signature.s;\n    const id = signature.recoveryParam;\n\n    let rHex = r.toString('hex');\n\n    while (rHex.length < 64) {\n        rHex = `0${rHex}`;\n    }\n\n    let sHex = s.toString('hex');\n\n    while (sHex.length < 64) {\n        sHex = `0${sHex}`;\n    }\n\n    const idHex = byte2hexStr(id);\n    const signHex = rHex + sHex + idHex;\n\n    return signHex;\n}\n\nexport function SHA256(msgBytes) {\n    const shaObj = new jsSHA('SHA-256', 'HEX');\n    const msgHex = byteArray2hexStr(msgBytes);\n\n    shaObj.update(msgHex);\n    const hashHex = shaObj.getHash('HEX');\n\n    return hexStr2byteArray(hashHex);\n}\n\nexport function passwordToAddress(password) {\n    const com_priKeyBytes = base64DecodeFromString(password);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n\nexport function pkToAddress(privateKey) {\n    const com_priKeyBytes = hexStr2byteArray(privateKey);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}","import { byteArray2hexStr } from './bytes';\nimport { \n    getBase58CheckAddress,\n    genPriKey,\n    getAddressFromPriKey,\n    getPubKeyFromPriKey\n} from './crypto';\n\nexport function generateAccount() {\n    const priKeyBytes = genPriKey();\n    const pubKeyBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = getAddressFromPriKey(priKeyBytes);\n    \n    const privateKey = byteArray2hexStr(priKeyBytes);\n    const publicKey = byteArray2hexStr(pubKeyBytes);\n\n    return {\n        privateKey,\n        publicKey,\n        address: {\n            base58: getBase58CheckAddress(addressBytes),\n            hex: byteArray2hexStr(addressBytes)\n        }\n    }\n}","import * as Ethers from 'ethers';\nimport TronWeb from 'index';\n\nconst abiCoder = new Ethers.utils.AbiCoder();\n\nexport function decodeParams(names, types, output, ignoreMethodHash) {\n\n    if (!output || typeof output === 'boolean') {\n        ignoreMethodHash = output;\n        output = types;\n        types = names;\n        names = [];\n    }\n\n    if (ignoreMethodHash && output.replace(/^0x/,'').length % 64 === 8)\n        output = '0x' + output.replace(/^0x/,'').substring(8);\n\n    if (output.replace(/^0x/,'').length % 64)\n        throw new Error('The encoded string is not valid. Its length must be a multiple of 64.');\n\n    return abiCoder.decode(types, output).reduce((obj, arg, index) => {\n        if(types[index] == 'address')\n            arg = '41' + arg.substr(2).toLowerCase();\n\n        if(names.length)\n            obj[names[index]] = arg;\n        else obj.push(arg);\n\n        return obj;\n    }, names.length ? {} : []);\n}\n\nexport function encodeParams(types, values) {\n\n    for (let i =0;i<types.length;i++) {\n        if (types[i] === 'address') {\n            values[i] =  TronWeb.address.toHex(values[i]).replace(/^41/, '0x');\n        }\n    }\n\n    return abiCoder.encode(types, values);\n}\n","import * as accounts from './accounts';\nimport * as base58 from './base58';\nimport * as bytes from './bytes';\nimport * as crypto from './crypto';\nimport * as code from './code';\nimport * as abi from './abi';\n\nimport validator from 'validator';\nimport BigNumber from 'bignumber.js';\n\nconst utils = {\n    isValidURL(url) {\n        return validator.isURL(url.toString(), {\n            protocols: [ 'http', 'https' ]\n        });\n    },\n\n    isObject(obj) {\n        return obj === Object(obj) && Object.prototype.toString.call(obj) !== '[object Array]';\n    },\n\n    isArray(array) {\n        return Array.isArray(array);\n    },\n\n    isJson(string) {\n        try {\n            return !!JSON.parse(string);\n        } catch (ex) {\n            return false;\n        }\n    },\n\n    isBoolean(bool) {\n        return typeof bool === 'boolean';\n    },\n\n    isBigNumber(number) {\n        return number && (number instanceof BigNumber || (number.constructor && number.constructor.name === 'BigNumber'));\n    },\n\n    isString(string) {\n        return typeof string === 'string' || (string && string.constructor && string.constructor.name === 'String');\n    },\n\n    isFunction(obj) {\n        return typeof obj === 'function';\n    },\n\n    isHex(string) {\n        return typeof string === 'string' && !isNaN(parseInt(string, 16));\n    },\n\n    isInteger(number) {\n        return Number.isInteger(\n            Number(number)\n        );\n    },\n\n    hasProperty(obj, property) {\n        return Object.prototype.hasOwnProperty.call(obj, property);\n    },\n\n    hasProperties(obj, ...properties) {\n        return properties.length && !properties.map(property => {\n            return this.hasProperty(obj, property)\n        }).includes(false);\n    },\n\n    injectPromise(func, ...args) {\n        return new Promise((resolve, reject) => {\n            func(...args, (err, res) => {\n                if(err)\n                    reject(err);\n                else resolve(res);\n            });\n        });\n    },\n\n    promiseInjector(scope) {\n        return (func, ...args) => {\n            return this.injectPromise(func.bind(scope), ...args);\n        }\n    },\n\n    mapEvent(event) {\n        return {\n            block: event.block_number,\n            timestamp: event.block_timestamp,\n            contract: event.contract_address,\n            name: event.event_name,\n            transaction: event.transaction_id,\n            result: event.result\n        };\n    },\n\n    parseEvent(event, { inputs: abi }) {\n        if(!event.result)\n            return event;\n\n        if (this.isObject(event.result)) {\n            for (var i = 0; i < abi.length; i++) {\n                let obj = abi[i];\n                if (obj.type == 'address' && obj.name in event.result)\n                    event.result[obj.name] = '41' + event.result[obj.name].substr(2).toLowerCase();\n            }\n        } else if (this.isArray(event.result)) {\n            event.result = event.result.reduce((obj, result, index) => {\n                const {\n                    name,\n                    type\n                } = abi[index];\n\n                if(type == 'address')\n                    result = '41' + result.substr(2).toLowerCase();\n\n                obj[name] = result;\n\n                return obj;\n            }, {});\n        }\n\n        return event;\n    },\n\n    padLeft(input, padding, amount) {\n        let res = input.toString();\n\n        while(res.length < amount)\n            res = padding + res;\n\n        return res;\n    }\n}\n\nexport default {\n    ...utils,\n    code,\n    accounts,\n    base58,\n    bytes,\n    crypto,\n    abi\n};\n","import HttpProvider from './HttpProvider';\n\nexport default {\n    HttpProvider\n};","import axios from 'axios';\nimport utils from 'utils';\n\nexport default class HttpProvider {\n    constructor(host, timeout = 30000, user = false, password = false, headers = {}, statusPage = '/') {\n        if(!utils.isValidURL(host))\n            throw new Error('Invalid URL provided to HttpProvider');\n\n        if(isNaN(timeout) || timeout < 0)\n            throw new Error('Invalid timeout duration provided');\n\n        if(!utils.isObject(headers))\n            throw new Error('Invalid headers object provided');\n\n        host = host.replace(/\\/+$/,'');\n\n        this.host = host;\n        this.timeout = timeout;\n        this.user = user;\n        this.password = password;\n        this.headers = headers;\n        this.statusPage = statusPage;\n\n        this.instance = axios.create({            \n            baseURL: host,\n            timeout: timeout,\n            headers: headers,\n            auth: user && {\n                user,\n                password\n            },\n        });\n    }\n\n    setStatusPage(statusPage = '/') {\n        this.statusPage = statusPage;\n    }\n\n    async isConnected(statusPage = this.statusPage) {\n        return this.request(statusPage).then(data => {\n            return utils.hasProperties(data, 'blockID', 'block_header');\n        }).catch(() => false);\n    }\n\n    request(url, payload = {}, method = 'get') {\n        method = method.toLowerCase();\n\n        return this.instance.request({\n            data: method == 'post' && payload,\n            params: method =='get' && payload,\n            url,\n            method\n        }).then(({ data }) => data);\n    }\n};\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport * as Ethers from 'ethers';\n\nexport default class TransactionBuilder {\n    constructor(tronWeb = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    sendTrx(to = false, amount = 0, from = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.sendTrx, to, amount, from);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!this.tronWeb.isAddress(from))\n            return callback('Invalid origin address provided');\n\n        to = this.tronWeb.address.toHex(to);\n        from = this.tronWeb.address.toHex(from);\n\n        if(to === from)\n            return callback('Cannot transfer TRX to the same account');\n\n        this.tronWeb.fullNode.request('wallet/createtransaction', {\n            to_address: to,\n            owner_address: from,\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    sendToken(to = false, amount = 0, tokenID = false, from = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, from);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if(!this.tronWeb.isAddress(from))\n            return callback('Invalid origin address provided');\n\n        to = this.tronWeb.address.toHex(to);\n        tokenID = this.tronWeb.fromUtf8(tokenID);\n        from = this.tronWeb.address.toHex(from);\n\n        if(to === from)\n            return callback('Cannot transfer tokens to the same account');\n\n        this.tronWeb.fullNode.request('wallet/transferasset', {\n            to_address: to,\n            owner_address: from,\n            asset_name: tokenID,\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    purchaseToken(issuerAddress = false, tokenID = false, amount = 0, buyer = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(buyer)) {\n            callback = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.purchaseToken, issuerAddress, tokenID, amount, buyer);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!this.tronWeb.isAddress(buyer))\n            return callback('Invalid buyer address provided');\n\n        this.tronWeb.fullNode.request('wallet/participateassetissue', {\n            to_address: this.tronWeb.address.toHex(issuerAddress),\n            owner_address: this.tronWeb.address.toHex(buyer),\n            asset_name: this.tronWeb.fromUtf8(tokenID),\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    freezeBalance(address = this.tronWeb.defaultAddress.hex, amount = 0, duration = 3, resource = \"BANDWIDTH\", callback = false) {\n        if(utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n            \n        if(!callback)\n            return this.injectPromise(this.freezeBalance, address, amount, duration, resource);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isInteger(duration) || duration < 3)\n            return callback('Invalid duration provided, minimum of 3 days');\n\n        this.tronWeb.fullNode.request('wallet/freezebalance', {\n            owner_address: this.tronWeb.address.toHex(address),\n            frozen_balance: parseInt(amount),\n            frozen_duration: parseInt(duration),\n            resource: resource\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    unfreezeBalance(address = this.tronWeb.defaultAddress.hex, resource = \"BANDWIDTH\", callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if(!callback)\n            return this.injectPromise(this.unfreezeBalance, address, resource);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n        \n        this.tronWeb.fullNode.request('wallet/unfreezebalance', {\n            owner_address: this.tronWeb.address.toHex(address),\n            resource: resource\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    withdrawBlockRewards(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.withdrawBlockRewards, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n        \n        this.tronWeb.fullNode.request('wallet/withdrawbalance', {\n            owner_address: this.tronWeb.address.toHex(address)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    applyForSR(address = this.tronWeb.defaultAddress.hex, url = false, callback = false) {\n        if(utils.isValidURL(address)) {\n            callback = url || false;\n            url = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.applyForSR, address, url);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isValidURL(url))\n            return callback('Invalid url provided');\n        \n        this.tronWeb.fullNode.request('wallet/createwitness', {\n            owner_address: this.tronWeb.address.toHex(address),\n            url: this.tronWeb.fromUtf8(url)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    vote(votes = {}, voterAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.vote, votes, voterAddress);\n\n        if(!utils.isObject(votes) || !Object.keys(votes).length)\n            return callback('Invalid votes object provided');\n\n        if(!this.tronWeb.isAddress(voterAddress))\n            return callback('Invalid voter address provided');\n\n        let invalid = false;\n\n        votes = Object.entries(votes).map(([ srAddress, voteCount ]) => {\n            if(invalid)\n                return;\n\n            if(!this.tronWeb.isAddress(srAddress)) {\n                callback('Invalid SR address provided: ' + srAddress);\n                return invalid = true;\n            }\n\n            if(!utils.isInteger(voteCount) || voteCount <= 0) {\n                callback('Invalid vote count provided for SR: ' + srAddress);\n                return invalid = true;\n            }\n\n            return {\n                vote_address: this.tronWeb.address.toHex(srAddress),\n                vote_count: parseInt(voteCount)\n            };\n        });\n\n        if(invalid)\n            return;\n\n        this.tronWeb.fullNode.request('wallet/votewitnessaccount', {\n            owner_address: this.tronWeb.address.toHex(voterAddress),\n            votes\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    createSmartContract(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.createSmartContract, options, issuerAddress);\n\n        let {\n            abi = false,\n            bytecode = false,\n            feeLimit = 1_000_000_000,\n            callValue = 0,\n            userFeePercentage = 0,\n            parameters = [],\n            name = \"\",\n        } = options;\n        \n\n        if(abi && utils.isString(abi)) {\n            try {\n                abi = JSON.parse(abi);\n            } catch{\n                return callback('Invalid options.abi provided');\n            }\n        }\n        console.log(name);\n        if(!utils.isArray(abi))\n            return callback('Invalid options.abi provided');\n\n\n        const payable = abi.some(func => {\n            return func.type == 'constructor' && func.payable;\n        });\n\n        if(!utils.isHex(name))\n            name = this.tronWeb.toHex(name);\n\n        if(!utils.isHex(bytecode))\n            return callback('Invalid options.bytecode provided');\n\n        if(!utils.isInteger(feeLimit) || feeLimit <= 0 || feeLimit > 1_000_000_000)\n            return callback('Invalid options.feeLimit provided');\n\n        if(!utils.isInteger(callValue) || callValue < 0)\n            return callback('Invalid options.callValue provided');\n\n        if(payable && callValue == 0)\n            return callback('When contract is payable, options.callValue must be a positive integer');\n\n        if(!payable && callValue > 0)\n            return callback('When contract is not payable, options.callValue must be 0');\n\n        if(!utils.isInteger(userFeePercentage) || userFeePercentage < 0 || userFeePercentage > 100)\n            return callback('Invalid options.userFeePercentage provided');\n\n        if(!utils.isArray(parameters))\n            return callback('Invalid parameters provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        var constructorParams = abi.find(\n            (it) => {\n                return it.type === 'constructor';\n            }\n        );\n\n        if(typeof constructorParams !== 'undefined' && constructorParams) {\n            const abiCoder = new Ethers.utils.AbiCoder();\n            const types = [];\n            const values = [];\n            constructorParams = constructorParams.inputs;\n\n            if(parameters.length != constructorParams.length)\n                return callback(`constructor needs ${constructorParams.length} but ${parameters.length} provided`);\n\n            for(let i = 0; i < parameters.length; i++) {\n                let type = constructorParams[i].type;\n                let value = parameters[i];\n\n                if(!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if(type == 'address')\n                    value = this.tronWeb.address.toHex(value).replace(/^(41)/, '0x');\n                    \n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        this.tronWeb.fullNode.request('wallet/deploycontract', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            consume_user_resource_percent: userFeePercentage,\n            abi: JSON.stringify(abi),\n            bytecode,\n            parameter: parameters,\n            name\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    triggerSmartContract(\n        contractAddress, \n        functionSelector,\n        feeLimit = 1_000_000_000,\n        callValue = 0,\n        parameters = [], \n        issuerAddress = this.tronWeb.defaultAddress.hex, \n        callback = false\n    ) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(parameters)) {\n            callback = parameters;\n            parameters = [];\n        }\n\n        if(utils.isFunction(callValue)) {\n            callback = callValue;\n            callValue = 0;\n        }\n\n        if(utils.isFunction(feeLimit)) {\n            callback = feeLimit;\n            feeLimit = 1_000_000_000;\n        }\n\n        if(!callback) {\n            return this.injectPromise(\n                this.triggerSmartContract, \n                contractAddress, \n                functionSelector, \n                feeLimit,\n                callValue, \n                parameters,\n                issuerAddress\n            );\n        }\n\n        if(!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if(!utils.isString(functionSelector) || !functionSelector.length)\n            return callback('Invalid function selector provided');\n\n        if(!utils.isInteger(callValue) || callValue < 0)\n            return callback('Invalid call value provided');\n\n        if(!utils.isInteger(feeLimit) || feeLimit <= 0 || feeLimit > 1_000_000_000)\n            return callback('Invalid fee limit provided');\n\n        if(!utils.isArray(parameters))\n            return callback('Invalid parameters provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        functionSelector = functionSelector.replace('/\\s*/g', '');\n\n        if(parameters.length) {\n            const abiCoder = new Ethers.utils.AbiCoder();\n            const types = [];\n            const values = [];\n\n            for(let i = 0; i < parameters.length; i++) {\n                let { type, value } = parameters[i];\n\n                if(!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if(type == 'address')\n                    value = this.tronWeb.address.toHex(value).replace(/^(41)/, '0x');\n                    \n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        this.tronWeb.fullNode.request('wallet/triggersmartcontract', {\n            contract_address: this.tronWeb.address.toHex(contractAddress),\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            function_selector: functionSelector,\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            parameter: parameters\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            if(!transaction.result.result)\n                return callback(transaction);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    createToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.createToken, options, issuerAddress);\n\n        const {\n            name = false,\n            abbreviation = false,\n            description = false,\n            url = false,\n            totalSupply = 0,\n            trxRatio = 1, // How much TRX will `tokenRatio` cost?\n            tokenRatio = 1, // How many tokens will `trxRatio` afford?\n            saleStart = Date.now(),\n            saleEnd = false,            \n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0, // Out of `totalFreeBandwidth`, the amount each token holder get\n            frozenAmount = 0,\n            frozenDuration = 0\n        } = options;\n\n        if(!utils.isString(name) || !name.length)\n            return callback('Invalid token name provided');\n\n        if(!utils.isString(abbreviation) || !abbreviation.length)\n            return callback('Invalid token abbreviation provided');\n\n        if(!utils.isInteger(totalSupply) || totalSupply <= 0)\n            return callback('Invalid supply amount provided');\n\n        if(!utils.isInteger(trxRatio) || trxRatio <= 0)\n            return callback('TRX ratio must be a positive integer');\n\n        if(!utils.isInteger(tokenRatio) || tokenRatio <= 0)\n            return callback('Token ratio must be a positive integer');\n\n        if(!utils.isInteger(saleStart) || saleStart < Date.now())\n            return callback('Invalid sale start timestamp provided');\n\n        if(!utils.isInteger(saleEnd) || saleEnd <= saleStart)\n            return callback('Invalid sale end timestamp provided');\n\n        if(!utils.isString(description) || !description.length)\n            return callback('Invalid token description provided');\n\n        if(!utils.isString(url) || !url.length || !utils.isValidURL(url))\n            return callback('Invalid token url provided');\n\n        if(!utils.isInteger(freeBandwidth) || freeBandwidth < 0)\n            return callback('Invalid free bandwidth amount provided');\n\n        if(!utils.isInteger(freeBandwidthLimit) || freeBandwidthLimit < 0 || (freeBandwidth && !freeBandwidthLimit))\n            return callback('Invalid free bandwidth limit provided');\n\n        if(!utils.isInteger(frozenAmount) || frozenAmount < 0 || (!frozenDuration && frozenAmount))\n            return callback('Invalid frozen supply provided');\n\n        if(!utils.isInteger(frozenDuration) || frozenDuration < 0 || (frozenDuration && !frozenAmount))\n            return callback('Invalid frozen duration provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        this.tronWeb.fullNode.request('wallet/createassetissue', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            name: this.tronWeb.fromUtf8(name),\n            abbr: this.tronWeb.fromUtf8(abbreviation),\n            description: this.tronWeb.fromUtf8(description),\n            url: this.tronWeb.fromUtf8(url),\n            total_supply: parseInt(totalSupply),\n            trx_num: parseInt(trxRatio),\n            num: parseInt(tokenRatio),\n            start_time: parseInt(saleStart),\n            end_time: parseInt(saleEnd),\n            free_asset_net_limit: parseInt(freeBandwidth),\n            public_free_asset_net_limit: parseInt(freeBandwidthLimit),\n            frozen_supply: {\n                frozen_amount: parseInt(frozenAmount),\n                frozen_days: parseInt(frozenDuration)\n            }\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    updateToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.updateToken, options, issuerAddress);\n\n        const {\n            description = false,\n            url = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0 // Out of `totalFreeBandwidth`, the amount each token holder get\n        } = options;\n\n        if(!utils.isInteger(freeBandwidth) || freeBandwidth < 0)\n            return callback('Invalid free bandwidth amount provided');\n\n        if(!utils.isInteger(freeBandwidthLimit) || freeBandwidthLimit < 0 || (freeBandwidth && !freeBandwidthLimit))\n            return callback('Invalid free bandwidth limit provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        this.tronWeb.fullNode.request('wallet/updateasset', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            description: this.tronWeb.fromUtf8(description),\n            url: this.tronWeb.fromUtf8(url),\n            new_limit: parseInt(freeBandwidth),\n            new_public_limit: parseInt(freeBandwidthLimit)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    purchaseAsset(...args) {\n        return this.purchaseToken(...args);\n    }\n\n    createAsset(...args) {\n        return this.createToken(...args);\n    }\n\n    updateAsset(...args) {\n        return this.updateToken(...args);\n    }\n\n    /**\n     * Creates a proposal to modify the network.\n     * Can only be created by a current Super Representative.\n     */\n    createProposal(parameters = false, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!parameters)\n            return callback('Invalid proposal parameters provided');\n\n        if(!callback)\n            return this.injectPromise(this.createProposal, parameters, issuerAddress);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuerAddress provided');\n\n        if(!utils.isObject(parameters))\n            return callback('Invalid parameters provided');\n\n        this.tronWeb.fullNode.request('wallet/proposalcreate', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            parameters: parameters\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Deletes a network modification proposal that the owner issued.\n     * Only current Super Representative can vote on a proposal.\n     */\n    deleteProposal(proposalID = false, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.deleteProposal, proposalID, issuerAddress);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuerAddress provided');\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/proposaldelete', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            proposal_id: parseInt(proposalID)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds a vote to an issued network modification proposal.\n     * Only current Super Representative can vote on a proposal.\n     */\n    voteProposal(proposalID = false, hasApproval = false, voterAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.voteProposal, proposalID, hasApproval, voterAddress);\n\n        if(!this.tronWeb.isAddress(voterAddress))\n            return callback('Invalid voterAddress address provided');\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        if(!utils.isBoolean(hasApproval))\n            return callback('Invalid hasApproval provided');\n\n        this.tronWeb.fullNode.request('wallet/proposalapprove', {\n            owner_address: this.tronWeb.address.toHex(voterAddress),\n            proposal_id: parseInt(proposalID),\n            is_add_approval: isApproval.toString()\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds tokens into a bancor style exchange.\n     */\n    injectExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.injectExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmount) || tokenAmount < 1)\n            return callback('Invalid tokenAmount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangeinject', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant:parseInt(tokenAmount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Withdraws tokens from a bancor style exchange.\n     */\n    withdrawExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.withdrawExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmount) || tokenAmount < 1)\n            return callback('Invalid tokenAmount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangewithdraw', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant:parseInt(tokenAmount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Trade tokens on a bancor style exchange.\n     */\n    tradeExchangeTokens(exchangeID = false, \n        tokenName = false, \n        tokenAmountSold = 0, \n        tokenAmountExpected = 0, \n        ownerAddress = this.tronWeb.defaultAddress.hex, \n        callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.tradeExchangeTokens, exchangeID, tokenName, tokenAmountSold, tokenAmountExpected, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmountSold) || tokenAmountSold < 1)\n            return callback('Invalid tokenAmountSold provided');\n\n        if(!utils.isInteger(tokenAmountExpected) || tokenAmountExpected < 1)\n            return callback('Invalid tokenAmountExpected provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangewithdraw', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant:parseInt(tokenAmountSold),\n            expected:parseInt(tokenAmountExpected)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n}","import TronWeb from 'index';\nimport utils from 'utils';\nimport * as Ethers from 'ethers';\n\nconst TRX_MESSAGE_HEADER = '\\x19TRON Signed Message:\\n32';\nconst ETH_MESSAGE_HEADER = '\\x19Ethereum Signed Message:\\n32';\n\nexport default class Trx {\n    constructor(tronWeb = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    parseToken(token) {\n        return {\n            ...token,\n            name: this.tronWeb.toUtf8(token.name),\n            abbr: token.abbr && this.tronWeb.toUtf8(token.abbr),\n            description: token.description && this.tronWeb.toUtf8(token.description),\n            url: token.url && this.tronWeb.toUtf8(token.url)\n        };\n    }\n\n    getCurrentBlock(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getCurrentBlock);\n\n        this.tronWeb.fullNode.request('wallet/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlock(block = this.tronWeb.defaultBlock, callback = false) {\n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlock, block);\n\n        if(block === false)\n            return callback('No block identifier provided');\n\n        if(block == 'earliest')\n            block = 0;\n\n        if(block == 'latest')\n            return this.getCurrentBlock(callback);\n\n        if(isNaN(block) && utils.isHex(block))\n            return this.getBlockByHash(block, callback);\n\n        this.getBlockByNumber(block, callback);\n    }\n\n    getBlockByHash(blockHash, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getBlockByHash, blockHash);\n\n        this.tronWeb.fullNode.request('wallet/getblockbyid', { \n            value: blockHash \n        }, 'post').then(block => {\n            if(!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockByNumber(blockID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getBlockByNumber, blockID);\n\n        if(!utils.isInteger(blockID) || blockID < 0)\n            return callback('Invalid block number provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbynum', { \n            num: parseInt(blockID) \n        }, 'post').then(block => {\n            if(!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockTransactionCount(block = this.tronWeb.defaultBlock, callback = false) {\n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlockTransactionCount, block);\n\n        this.getBlock(block).then(({ transactions = [] }) => {\n            callback(null, transactions.length);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionFromBlock(block = this.tronWeb.defaultBlock, index = 0, callback = false) {\n        if(utils.isFunction(index)) {\n            callback = index;\n            index = 0;\n        }\n        \n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionFromBlock, block, index);\n\n        if(!utils.isInteger(index) || index < 0)\n            return callback('Invalid transaction index provided');\n\n        this.getBlock(block).then(({ transactions = false }) => {\n            if(!transactions || transactions.length < index)\n                return callback('Transaction not found in block');\n\n            callback(null, transactions[index]);\n        }).catch(err => callback(err));\n    }\n\n    getTransaction(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTransaction, transactionID);\n\n        this.tronWeb.fullNode.request('wallet/gettransactionbyid', { \n            value: transactionID \n        }, 'post').then(transaction => {\n            if(!Object.keys(transaction).length)\n                return callback('Transaction not found');\n                \n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionInfo(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTransactionInfo, transactionID);\n\n        this.tronWeb.solidityNode.request('walletsolidity/gettransactioninfobyid', { \n            value: transactionID \n        }, 'post').then(transaction => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionsToAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;          \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsToAddress, address, limit, offset);\n\n        return this.getTransactionsRelated(address, 'to', limit, offset, callback);\n    }\n\n    getTransactionsFromAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;           \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsFromAddress, address, limit, offset);\n\n        return this.getTransactionsRelated(address, 'from', limit, offset, callback);\n    }\n\n    async getTransactionsRelated(address = this.tronWeb.defaultAddress.hex, direction = 'all', limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;         \n        }\n\n        if(utils.isFunction(direction)) {\n            callback = direction;\n            direction = 'all';\n        }\n\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsRelated, address, direction, limit, offset);\n\n        if(![ 'to', 'from', 'all' ].includes(direction))\n            return callback('Invalid direction provided: Expected \"to\", \"from\" or \"all\"');\n        \n        if(direction == 'all') {\n            try {\n                const from = await this.getTransactionsRelated(address, 'from', limit, offset);\n                const to = await this.getTransactionsRelated(address, 'to', limit, offset);\n\n                return callback(null, [\n                    ...from.map(tx => (tx.direction = 'from', tx)),\n                    ...to.map(tx => (tx.direction = 'to', tx))\n                ].sort((a, b) => b.raw_data.timestamp - a.raw_data.timestamp));\n            } catch(ex) {\n                return callback(ex);\n            }\n        }\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if(!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request(`walletextension/gettransactions${direction}this`, {\n            account: {\n                address\n            },\n            offset,\n            limit\n        }, 'post').then(({ transaction }) => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getAccount, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBalance, address);\n\n        this.getAccount(address).then(({ balance = 0 }) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getBandwidth(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBandwidth, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccountnet', {\n            address\n        }, 'post').then(({ freeNetUsed = 0, freeNetLimit = 0, NetUsed = 0, NetLimit = 0 }) => {\n            callback(null, (freeNetLimit - freeNetUsed) + (NetLimit - NetUsed));\n        }).catch(err => callback(err));\n    }\n\n    getTokensIssuedByAddress(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTokensIssuedByAddress, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyaccount', {\n            address\n        }, 'post').then(({ assetIssue = false }) => {\n            if(!assetIssue)\n                return callback(null, {});\n\n            const tokens = assetIssue.map(token => {\n                return this.parseToken(token);\n            }).reduce((tokens, token) => {\n                return tokens[token.name] = token, tokens;\n            }, {});\n\n            callback(null, tokens);\n        }).catch(err => callback(err));\n    }\n\n    getTokenFromID(tokenID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTokenFromID, tokenID);\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if(!token.name)\n                return callback('Token does not exist');\n                \n            callback(null, this.parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    listNodes(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listNodes);\n\n        this.tronWeb.fullNode.request('wallet/listnodes').then(({ nodes = [] }) => {\n            callback(null, nodes.map(({ address: { host, port } }) => (\n                `${this.tronWeb.toUtf8(host)}:${port}`\n            )));\n        }).catch(err => callback(err));\n    }\n\n    getBlockRange(start = 0, end = 30, callback = false) {\n        if(utils.isFunction(end)) {\n            callback = end;\n            end = 30;            \n        }\n\n        if(utils.isFunction(start)) {\n            callback = start;\n            start = 0;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlockRange, start, end);\n\n        if(!utils.isInteger(start) || start < 0)\n            return callback('Invalid start of range provided');\n\n        if(!utils.isInteger(end) || end <= start)\n            return callback('Invalid end of range provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbylimitnext', { \n            startNum: parseInt(start),\n            endNum: parseInt(end) + 1\n        }, 'post').then(({ block = [] }) => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    listSuperRepresentatives(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listSuperRepresentatives);\n\n        this.tronWeb.fullNode.request('wallet/listwitnesses').then(({ witnesses = [] }) => {\n            callback(null, witnesses);\n        }).catch(err => callback(err));\n    }\n\n    listTokens(limit = 0, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 0;  \n        }\n        \n        if(!callback)\n            return this.injectPromise(this.listTokens, limit, offset);\n\n        if(!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if(!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        if(!limit) {\n            return this.tronWeb.fullNode.request('wallet/getassetissuelist').then(({ assetIssue = [] }) => {\n                callback(null, assetIssue.map(token => this.parseToken(token)));\n            }).catch(err => callback(err));\n        }\n\n        this.tronWeb.fullNode.request('wallet/getpaginatedassetissuelist', {\n            offset: parseInt(offset),\n            limit: parseInt(limit)\n        }, 'post').then(({ assetIssue = [] }) => {\n            callback(null, assetIssue.map(token => this.parseToken(token)));\n        }).catch(err => callback(err));\n    }\n\n    timeUntilNextVoteCycle(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.timeUntilNextVoteCycle);\n\n        this.tronWeb.fullNode.request('wallet/getnextmaintenancetime').then(({ num = -1 }) => {\n            if(num == -1)\n                return callback('Failed to get time until next vote cycle');\n\n            callback(null, Math.floor(num / 1000));\n        }).catch(err => callback(err));\n    }\n\n    getContract(contractAddress, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getContract, contractAddress);\n\n        if(!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        contractAddress = this.tronWeb.address.toHex(contractAddress);\n\n        this.tronWeb.fullNode.request('wallet/getcontract', {\n            value: contractAddress\n        }).then(contract => {\n            if(contract.Error)\n                return callback('Contract does not exist');\n\n            callback(null, contract);\n        }).catch(err => callback(err));\n    }\n\n    async verifyMessage(message = false, signature = false, address = this.tronWeb.defaultAddress.base58, useTronHeader = true, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.base58;\n            useTronHeader = true;\n        }\n\n        if(utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.verifyMessage, message, signature, address, useTronHeader);\n\n        if(!utils.isHex(message))\n            return callback('Expected hex message input');\n\n        if(message.substr(0, 2) == '0x')\n            message = message.substring(2);\n\n        if(signature.substr(0, 2) == '0x')\n            signature = signature.substr(2);\n\n        const messageBytes = [\n            ...Ethers.utils.toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n            ...utils.code.hexStr2byteArray(message)\n        ];\n\n        const messageDigest = Ethers.utils.keccak256(messageBytes);\n        const recovered = Ethers.utils.recoverAddress(messageDigest, {\n            recoveryParam: signature.substring(128, 130) == '1c' ? 1 : 0,\n            r: '0x' + signature.substring(0, 64),\n            s: '0x' + signature.substring(64, 128)\n        });\n\n        const tronAddress = '41' + recovered.substr(2);\n        const base58Address = this.tronWeb.address.fromHex(tronAddress);\n\n        if(base58Address == this.tronWeb.address.fromHex(address))\n            return callback(null, true);\n\n        callback('Signature does not match');\n    }\n\n    async sign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, useTronHeader = true, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n            useTronHeader = true;\n        }\n\n        if(utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sign, transaction, privateKey, useTronHeader);\n\n        // Message signing\n        if(utils.isString(transaction)) {\n            if(transaction.substring(0, 2) == '0x')\n                transaction = transaction.substring(2);\n\n            if(!utils.isHex(transaction))\n                return callback('Expected hex message input');\n\n            try {\n                const signingKey = new Ethers.utils.SigningKey(privateKey);\n                const messageBytes = [\n                    ...Ethers.utils.toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n                    ...utils.code.hexStr2byteArray(transaction)\n                ];\n\n                const messageDigest = Ethers.utils.keccak256(messageBytes);\n                const signature = signingKey.signDigest(messageDigest);\n\n                const signatureHex = [\n                    '0x',\n                    signature.r.substring(2),\n                    signature.s.substring(2),\n                    Number(signature.v).toString(16)\n                ].join('');\n\n                return callback(null, signatureHex);\n            } catch(ex) {\n                callback(ex);\n            }\n        }\n\n        // Message signing\n        if(utils.isString(transaction)) {\n            if(transaction.substr(0, 2) !== '0x')\n                transaction = '0x' + transaction;\n\n            try {\n                const message = `\\x19TRON Signed Message:\\n32${ transaction }`;\n                const signingKey = new Ethers.utils.SigningKey(privateKey);\n\n                const messageBytes = Ethers.utils.toUtf8Bytes(message);\n                const messageDigest = Ethers.utils.keccak256(messageBytes);\n                const signature = signingKey.signDigest(messageDigest);\n\n                const signatureHex = [\n                    '0x' + signature.v,\n                    signature.r.substr(2),\n                    signature.s.substr(2)\n                ].join('');\n\n                return callback(null, signatureHex);\n            } catch(ex) {\n                callback(ex);\n            }\n        }\n\n        if(!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if(transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            const address = this.tronWeb.address.toHex(\n                this.tronWeb.address.fromPrivateKey(privateKey)\n            ).toLowerCase();\n\n            if(address !== transaction.raw_data.contract[0].parameter.value.owner_address.toLowerCase())\n                return callback('Private key does not match address in transaction');\n\n            return callback(null,\n                utils.crypto.signTransaction(privateKey, transaction)\n            );\n        } catch(ex) {\n            callback(ex);\n        }\n    }\n\n    sendRawTransaction(signedTransaction = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.sendRawTransaction, signedTransaction);\n\n        if(!utils.isObject(signedTransaction))\n            return callback('Invalid transaction provided');\n\n        if(!signedTransaction.signature || !utils.isArray(signedTransaction.signature))\n            return callback('Transaction is not signed');\n\n        this.tronWeb.fullNode.request(\n            'wallet/broadcasttransaction', \n            signedTransaction,\n            'post'\n        ).then(result => {\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    async sendTransaction(to = false, amount = false, options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sendTransaction, to, amount, options);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendTrx(to, amount, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    async sendToken(to = false, amount = false, tokenID = false, options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, options);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isString(tokenID))\n            return callback('Invalid token ID provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendToken(to, amount, tokenID, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    signMessage(...args) {\n        return this.sign(...args);\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    send(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    sendTrx(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    broadcast(...args) {\n        return this.sendRawTransaction(...args);\n    }\n\n    signTransaction(...args) {\n        return this.sign(...args);\n    }\n\n    /**\n     * Gets a network modification proposal by ID.\n     */\n    getProposal(proposalID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getProposal, proposalID);\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/getproposalbyid', { \n            id: parseInt(proposalID),\n        }, 'post').then(proposal => {\n            callback(null, proposal);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listProposals(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listProposals);\n\n        this.tronWeb.fullNode.request('wallet/listproposals', {}, 'post').then(({ proposals = [] }) => {\n            callback(null, proposals);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all parameters available for network modification proposals.\n     */\n    getChainParameters(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getChainParameters);\n\n        this.tronWeb.fullNode.request('wallet/getchainparameters', {}, 'post').then(({ chainParameter = [] }) => {\n            callback(null, chainParameter);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the account resources\n     */\n    getAccountResources(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getAccountResources, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/getaccountresource', { \n            address: this.tronWeb.address.toHex(address),\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the exchange ID.\n     */\n    getExchangeByID(exchangeID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getExchangeByID, exchangeID);\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        this.tronWeb.fullNode.request('wallet/getexchangebyid', {\n            address: this.tronWeb.defaultAddress.hex,\n        }, 'post').then(exchange => {\n            callback(null, exchange);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists the exchanges\n     */\n    listExchanges(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchanges', {}, 'post').then(({ exchanges = [] }) => {\n            callback(null, exchanges);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between tokens.\n     */\n    exchangeCreate(ownerAddress = false,\n                   firstTokenID, firstTokenBalance,\n                   secondTokenID, secondTokenBalance, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getAccountResources, address);\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid address provided');\n\n        if (!utils.isString(firstTokenID) || !firstTokenID.length\n            || !utils.isString(secondTokenID) || !secondTokenID.length)\n            return callback('Invalid token ID provided');\n\n        if (!utils.isInteger(firstTokenBalance) || firstTokenBalance <= 0\n            || !utils.isInteger(secondTokenBalance) || secondTokenBalance <= 0)\n            return callback('Invalid amount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            first_token_id: firstTokenID,\n            first_token_balance: firstTokenBalance,\n            second_token_id: secondTokenID,\n            second_token_balance: secondTokenBalance\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Exchanges a transaction.\n     */\n    exchangeTransaction(ownerAddress = false, exchangeID, tokenID, quant, expected, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getAccountResources, address);\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid address provided');\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if (!utils.isInteger(quant) || quant <= 0)\n            return callback('Invalid quantity provided');\n\n        if (!utils.isInteger(expected) || expected < 0)\n            return callback('Invalid expected provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangetransaction', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: exchangeID,\n            token_id: tokenID,\n            quant,\n            expected\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listExchangesPaginated(limit = 10, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n        if(!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchangespaginated', {\n            limit,\n            offset\n        }, 'post').then(({ exchanges = [] }) => {\n            callback(null, exchanges);\n        }).catch(err => callback(err));\n    }\n};\n","export default class Witness {\n    \n}","import utils from 'utils';\n\nconst getFunctionSelector = abi => {\n    return abi.name + '(' + getParamTypes(abi.inputs || []).join(',') + ')';\n}\n\nconst getParamTypes = params => {\n    return params.map(({ type }) => type);\n}\n\nconst decodeOutput = (abi, output) => {\n    const names = abi.map(({ name }) => name).filter(name => !!name);\n    const types = abi.map(({ type }) => type);\n\n    return utils.abi.decodeParams(names, types, output);\n};\n\nexport default class Method {\n    constructor(contract, abi) {\n        this.tronWeb = contract.tronWeb;\n        this.contract = contract;\n\n        this.abi = abi;        \n        this.name = abi.name || (abi.name = abi.type);\n\n        this.inputs = abi.inputs || [];\n        this.outputs = abi.outputs || [];\n\n        this.signature = this.tronWeb.sha3(abi.name, false).slice(0, 8);\n        this.functionSelector = getFunctionSelector(abi);\n        this.injectPromise = utils.promiseInjector(this);\n\n        this.defaultOptions = {\n            feeLimit: 1000000000,\n            callValue: 0,\n            from: this.tronWeb.defaultAddress.hex, // Only used for send()\n            shouldPollResponse: false // Only used for sign()\n        };\n    }\n\n    onMethod(...args) {\n        const types = getParamTypes(this.inputs);\n\n        args.forEach((arg, index) => {\n            if(types[index] == 'address')\n                args[index] = this.tronWeb.address.toHex(arg).replace(/^(41)/, '0x')\n        });\n\n        return {\n            call: (...methodArgs) => this._call(types, args, ...methodArgs),\n            send: (...methodArgs) => this._send(types, args, ...methodArgs),\n            watch: (...methodArgs) => this._watch(...methodArgs)\n        }\n    }\n\n    async _call(types, args, options = {}, callback = false) {                \n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n            \n        if(!callback)\n            return this.injectPromise(this._call, types, args, options);\n\n        if(types.length !== args.length)\n            return callback('Invalid argument count provided');\n\n        if(!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if(!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const { stateMutability } = this.abi;\n\n        if(![ 'pure', 'view' ].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use send()`);\n\n        options = { ...this.defaultOptions, ...options };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        this.tronWeb.transactionBuilder.triggerSmartContract(\n            this.contract.address,\n            this.functionSelector,\n            options.feeLimit,\n            options.callValue,\n            parameters,\n            this.tronWeb.address.toHex(options.from),\n        (err, transaction) => {\n            if(err) \n                return callback(err);\n\n            if(!utils.hasProperty(transaction, 'constant_result'))\n                return callback('Failed to execute');\n\n            try {\n                let output = decodeOutput(this.outputs, '0x' + transaction.constant_result[0]);\n                \n                if(output.length === 1)\n                    output = output[0];\n\n                return callback(null, output);\n            } catch(ex) {\n                return callback(ex);\n            }\n        });\n    }\n\n    async _send(types, args, options = {}, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n            \n        if(!callback)\n            return this.injectPromise(this._send, types, args, options, privateKey);\n\n        if(types.length !== args.length)\n            throw new Error('Invalid argument count provided');\n\n        if(!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if(!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const { stateMutability } = this.abi;\n\n        if([ 'pure', 'view' ].includes(stateMutability.toLowerCase()))\n                return callback(`Methods with state mutability \"${stateMutability}\" must use call()`);\n\n        // If a function isn't payable, dont provide a callValue.\n        if(![ 'payable' ].includes(stateMutability.toLowerCase()))\n                options.callValue = 0;\n   \n        options = { ...this.defaultOptions, ...options };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        try {\n            const address = privateKey ? this.tronWeb.address.fromPrivateKey(privateKey) : this.tronWeb.defaultAddress.base58;\n            const transaction = await this.tronWeb.transactionBuilder.triggerSmartContract(\n                this.contract.address,\n                this.functionSelector,\n                options.feeLimit,\n                options.callValue,\n                parameters,\n                this.tronWeb.address.toHex(address)\n            );\n\n            if(!transaction.result || !transaction.result.result)\n                return callback('Unknown error: ' + JSON.stringify(transaction, null, 2));\n\n            // If privateKey is false, this won't be signed here. We assume sign functionality will be replaced.\n            const signedTransaction = await this.tronWeb.trx.sign(transaction.transaction, privateKey);\n\n            if(!signedTransaction.signature) {\n                if (!privateKey) {\n                    return callback('Transaction was not signed properly');\n                } else {\n                    return callback('Invalid private key provided');\n                }\n            }\n\n            const broadcast = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if(!broadcast.result)\n                return callback('Unknown error: ' + JSON.stringify(broadcast, null, 2));\n\n            if(!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if(index == 20) {\n                    return callback({ \n                        error: 'Cannot find result in solidity node', \n                        transaction: signedTransaction\n                    });\n                }\n                \n                const output = await this.tronWeb.trx.getTransactionInfo(signedTransaction.txID);\n\n                if(!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if(output.result && output.result == 'FAILED') {\n                    return callback({\n                        error: this.tronWeb.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if(!utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                let decoded = decodeOutput(this.outputs, '0x' + output.contractResult[0]);\n\n                if(decoded.length === 1)\n                    decoded = decoded[0];\n\n                return callback(null, decoded);\n            }\n\n            checkResult();                    \n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    async _watch(callback = false) {\n        if(!utils.isFunction(callback))\n            throw new Error('Expected callback to be provided');\n        \n        if(!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if(this.abi.type.toLowerCase() !== 'event')\n            return callback('Invalid method type for event watching');\n\n        if(!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        let listener = false;\n        let lastBlock = false;\n        const sinceTimestamp = new Date().getTime();\n\n        const getEvents = async () => {\n            try {\n                const events = await this.tronWeb.getEventResult(this.contract.address, sinceTimestamp, this.name);\n                const [ latestEvent ] = events.sort((a, b) => b.block - a.block);\n                const newEvents = events.filter((event, index) => {\n                    const duplicate = events.slice(0, index).some(priorEvent => (\n                        JSON.stringify(priorEvent) == JSON.stringify(event)\n                    ));\n\n                    if(duplicate)\n                        return false;\n\n                    if(!lastBlock)\n                        return true;            \n\n                    return event.block > lastBlock;\n                });\n\n                if(latestEvent)\n                    lastBlock = latestEvent.block;\n\n                return newEvents;\n            } catch(ex) {\n                return Promise.reject(ex);\n            }\n        };\n\n        const bindListener = () => {\n            if(listener)\n                clearInterval(listener);\n\n            listener = setInterval(() => {\n                getEvents().then(events => events.forEach(event => {\n                    callback(null, utils.parseEvent(event, this.abi))\n                })).catch(err => callback(err));\n            }, 3000);\n        };\n\n        await getEvents();\n        bindListener();\n\n        return {\n            start: bindListener(),\n            stop: () => {\n                if(!listener)\n                    return;\n\n                clearInterval(listener);\n                listener = false;\n            }\n        }\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport Method from './method';\n\nexport default class Contract {\n    constructor(tronWeb = false, abi = [], address = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n\n        this.address = address;\n        this.abi = abi;\n\n        this.eventListener = false;\n        this.bytecode = false;        \n        this.deployed = false;\n        this.lastBlock = false;  \n\n        this.methods = {};\n        this.props = [];\n\n        if(this.tronWeb.isAddress(address))\n            this.deployed = true;\n        else this.address = false;\n\n        this.loadAbi(abi);\n    }\n\n    async _getEvents() {\n        const events = await this.tronWeb.getEventResult(this.address);\n        const [ latestEvent ] = events.sort((a, b) => b.block - a.block);\n        const newEvents = events.filter((event, index) => {\n            const duplicate = events.slice(0, index).some(priorEvent => (\n                JSON.stringify(priorEvent) == JSON.stringify(event)\n            ));\n\n            if(duplicate)\n                return false;\n            \n            if(!this.lastBlock)\n                return true;            \n\n            return event.block > this.lastBlock;\n        });\n\n        if(latestEvent)\n            this.lastBlock = latestEvent.block;\n\n        return newEvents;\n    }\n\n    async _startEventListener(callback) {\n        if(this.eventListener)\n            clearInterval(this.eventListener);\n\n        if(!this.tronWeb.eventServer)\n            throw new Error('Event server is not configured');\n\n        if(!this.address)\n            throw new Error('Contract is not configured with an address');\n\n        this.eventCallback = callback;\n        await this._getEvents();\n\n        this.eventListener = setInterval(() => {\n            this._getEvents().then(newEvents => newEvents.forEach(event => {\n                this.eventCallback && this.eventCallback(event)\n            })).catch(err => {\n                console.error('Failed to get event list', err);\n            });\n        }, 3000);\n    }\n\n    _stopEventListener() {\n        if(!this.eventListener)\n            return;\n\n        clearInterval(this.eventListener);\n        this.eventListener = false;\n        this.eventCallback = false;\n    }\n\n    hasProperty(property) {\n        return this.hasOwnProperty(property) || this.__proto__.hasOwnProperty(property);\n    }\n\n    loadAbi(abi) {\n        this.abi = abi;\n        this.methods = {};\n\n        this.props.forEach(prop => delete this[prop]);\n\n        abi.forEach(func => {\n            // Don't build a method for constructor function. That's handled through contract create.\n            if (func.type.toLowerCase() === 'constructor')\n                return;\n\n            const method = new Method(this, func);\n            const methodCall = method.onMethod.bind(method);\n\n            const {\n                name,\n                functionSelector,\n                signature\n            } = method;\n\n            this.methods[name] = methodCall;\n            this.methods[functionSelector] = methodCall;\n            this.methods[signature] = methodCall;\n\n            if(!this.hasProperty(name)) {\n                this[name] = methodCall;\n                this.props.push(name);\n            }\n\n            if(!this.hasProperty(functionSelector)) {\n                this[functionSelector] = methodCall;\n                this.props.push(functionSelector);\n            }\n\n            if(!this.hasProperty(signature)) {\n                this[signature] = methodCall;\n                this.props.push(signature);\n            }\n        });\n    }\n\n    async new(options, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.new, options, privateKey);\n\n        try {\n            const address = this.tronWeb.address.fromPrivateKey(privateKey);\n            const transaction = await this.tronWeb.transactionBuilder.createSmartContract(options, address);\n            const signedTransaction = await this.tronWeb.trx.sign(transaction, privateKey);\n            const contract = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if(!contract.result)\n                return callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            return this.at(signedTransaction.contract_address, callback);\n        } catch(ex) {\n            return callback(ex);\n        }        \n    }\n\n    async at(contractAddress, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.at, contractAddress);\n\n        try {\n            const contract = await this.tronWeb.trx.getContract(contractAddress);\n\n            if(!contract.contract_address)\n                callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            this.address = contract.contract_address;\n            this.bytecode = contract.bytecode;\n            this.deployed = true;\n\n            this.loadAbi(contract.abi.entrys);\n\n            callback(null, this);\n        } catch(ex) {\n            if(ex.toString().includes('does not exist'))\n                return callback('Contract has not been deployed on the network');\n\n            return callback(ex);\n        }        \n    }\n\n    events(callback = false) {\n        if(!utils.isFunction(callback))\n            throw new Error('Callback function expected');\n\n        const self = this;\n\n        return {\n            start(startCallback = false) {\n                if(!startCallback) {\n                    self._startEventListener(callback);\n                    return this;\n                }\n\n                self._startEventListener(callback).then(() => {\n                    startCallback();\n                }).catch(err => {\n                    startCallback(err)\n                });\n\n                return this;\n            },\n            stop() {\n                self._stopEventListener();\n            }\n        };\n    }\n}","import providers from 'lib/providers';\nimport utils from 'utils';\nimport axios from 'axios';\nimport BigNumber from 'bignumber.js';\nimport EventEmitter from 'eventemitter3';\n\nimport TransactionBuilder from 'lib/transactionBuilder';\nimport Trx from 'lib/trx';\nimport Witness from 'lib/witness';\nimport Contract from 'lib/contract';\n\nimport { keccak256 } from 'js-sha3';\n\nexport default class TronWeb extends EventEmitter {\n    static providers = providers;\n    static BigNumber = BigNumber;\n    \n    constructor(fullNode, solidityNode, eventServer = false, privateKey = false) {\n        super();\n\n        if(utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if(utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n        this.setEventServer(eventServer);\n        \n        this.providers = providers;\n        this.BigNumber = BigNumber;\n\n        this.defaultBlock = false;\n        this.defaultPrivateKey = false;\n        this.defaultAddress = {\n            hex: false,\n            base58: false\n        };\n        \n        [\n            'sha3', 'toHex', 'toUtf8', 'fromUtf8',\n            'toAscii', 'fromAscii', 'toDecimal', 'fromDecimal',\n            'toSun', 'fromSun', 'toBigNumber', 'isAddress',\n            'compile', 'createAccount', 'address'\n        ].forEach(key => {\n            this[key] = TronWeb[key];\n        });\n\n        if(privateKey)\n            this.setPrivateKey(privateKey);\n\n        this.transactionBuilder = new TransactionBuilder(this);\n        this.trx = new Trx(this);\n        this.witness = new Witness(this);\n        this.utils = utils;\n\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    setDefaultBlock(blockID = false) {\n        if(blockID === false || blockID == 'latest' || blockID == 'earliest' || blockID === 0)\n            return this.defaultBlock = blockID;\n\n        if(!utils.isInteger(blockID) || !blockID)\n            throw new Error('Invalid block ID provided');\n\n        this.defaultBlock = Math.abs(blockID);\n    }\n\n    setPrivateKey(privateKey) {\n        try {\n            this.setAddress(\n                this.address.fromPrivateKey(privateKey)\n            );\n        } catch {\n            throw new Error('Invalid private key provided');\n        }\n\n        this.defaultPrivateKey = privateKey;\n        this.emit('privateKeyChanged', privateKey);\n    }\n\n    setAddress(address) {\n        if(!this.isAddress(address))\n            throw new Error('Invalid address provided');\n\n        const hex = this.address.toHex(address);\n        const base58 = this.address.fromHex(address);\n\n        if(this.defaultPrivateKey && this.address.fromPrivateKey(this.defaultPrivateKey) !== base58)\n           this.defaultPrivateKey = false;\n\n        this.defaultAddress = {\n            hex,\n            base58\n        };\n\n        this.emit('addressChanged', { hex, base58 });\n    }\n\n    isValidProvider(provider) {\n        return Object.values(providers).some(knownProvider => provider instanceof knownProvider);\n    }\n\n    isEventServerConnected() {\n        if (!this.eventServer)\n            return false;\n\n        return axios.get(this.eventServer.replace(/\\/+$/,'') + '/healthcheck').then(() => {\n            return true;\n        }).catch(() => {\n            return axios.get(this.eventServer.replace(/\\/+$/,'') + '/events?size=1').then(({data}) => {\n                return Array.isArray(data);\n            }).catch(() => false);\n        });\n    }\n\n    setFullNode(fullNode) {\n        if(utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if(!this.isValidProvider(fullNode))\n            throw new Error('Invalid full node provided');\n\n        this.fullNode = fullNode;\n        this.fullNode.setStatusPage('wallet/getnowblock');\n    }\n\n    setSolidityNode(solidityNode) {\n        if(utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if(!this.isValidProvider(solidityNode))\n            throw new Error('Invalid solidity node provided');\n\n        this.solidityNode = solidityNode;\n        this.solidityNode.setStatusPage('walletsolidity/getnowblock');\n    }\n\n    setEventServer(eventServer = false) {\n        if(eventServer !== false && !utils.isValidURL(eventServer))\n            throw new Error('Invalid URL provided for event server');\n\n        this.eventServer = eventServer;\n    }\n\n    currentProviders() {\n        return {\n            fullNode: this.fullNode,\n            solidityNode: this.solidityNode,\n            eventServer: this.eventServer\n        };\n    }\n\n    currentProvider() {\n        return this.currentProviders();\n    }\n\n    getEventResult(contractAddress = false, sinceTimestamp = 0, eventName = false, blockNumber = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getEventResult, contractAddress, sinceTimestamp, eventName, blockNumber);\n\n        if(!this.eventServer)\n            callback('No event server configured');\n\n        const routeParams = [];\n\n        if(!this.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if(eventName && !contractAddress)\n            return callback('Usage of event name filtering requires a contract address');\n        \n        if(blockNumber && !eventName)\n            return callback('Usage of block number filtering requires an event name');\n\n        if(contractAddress)\n            routeParams.push(this.address.fromHex(contractAddress));\n\n        if(eventName)\n            routeParams.push(eventName);\n\n        if(blockNumber)\n            routeParams.push(blockNumber);\n\n        return axios(`${this.eventServer}/event/contract/${routeParams.join('/')}?since=${sinceTimestamp}`).then(({ data = false }) => {\n            if(!data)\n                return callback('Unknown error occurred');\n\n            if(!utils.isArray(data))\n                return callback(data);\n\n            return callback(null, \n                data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err)); \n    }\n\n    getEventByTransacionID(transactionID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getEventByTransacionID, transactionID);\n\n        if(!this.eventServer)\n            callback('No event server configured');\n\n        return axios(`${this.eventServer}/event/transaction/${transactionID}`).then(({ data = false }) => {\n            if(!data)\n                return callback('Unknown error occurred');\n\n            if(!utils.isArray(data))\n                return callback(data);\n\n            return callback(null, \n                data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n    contract(abi = [], address = false) {\n        return new Contract(this, abi, address);\n    }\n\n    static get address() {\n        return {\n            fromHex(address) {\n                if(!utils.isHex(address))\n                    return address;\n\n                return utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address)\n                );\n            },\n            toHex(address) {\n                if(utils.isHex(address))\n                    return address.toLowerCase();\n\n                return utils.code.byteArray2hexStr(\n                    utils.crypto.decodeBase58Address(address)\n                ).toLowerCase();\n            },\n            fromPrivateKey(privateKey) {\n                try {\n                    return utils.crypto.pkToAddress(privateKey);\n                } catch { return false; }\n            }\n        }\n    }\n\n    static sha3(string, prefix = true) {\n        return (prefix ? '0x' : '') + keccak256(string);\n    }\n\n    static toHex(val) {\n        if(utils.isBoolean(val))\n            return TronWeb.fromDecimal(+val);\n\n        if(utils.isBigNumber(val))\n            return TronWeb.fromDecimal(val);\n\n        if(typeof val === 'object')\n            return TronWeb.fromUtf8(JSON.stringify(val));\n\n        if(utils.isString(val)) {\n            if (/^(-|)0x/.test(val))\n                return val;\n            // if(val.indexOf('-0x') === 0)\n            //     return TronWeb.fromDecimal(val); // << this returns val\n            //\n            // if(val.indexOf('0x') === 0)\n            //     return val;\n\n            if(!isFinite(val))\n                return TronWeb.fromUtf8(val);\n        }\n\n        return TronWeb.fromDecimal(val);\n    }\n\n    static toUtf8(hex) {\n        hex = hex.replace(/^0x/,'');\n        return Buffer.from(hex, 'hex').toString('utf8');\n    }\n\n    static fromUtf8(string) {\n        return '0x' + Buffer.from(string, 'utf8').toString('hex');\n    }\n\n    static toAscii(hex) {\n        hex = hex.replace(/^0x/,'');\n        return Buffer.from(hex, 'hex').toString('ascii');\n    }\n\n    static fromAscii(string, padding) {\n        return '0x' + Buffer.from(string, 'ascii').toString('hex').padEnd(padding, '0');\n    }\n\n    static toDecimal(value) {\n        return TronWeb.toBigNumber(value).toNumber();\n    }\n\n    static fromDecimal(value) {\n        const number = TronWeb.toBigNumber(value);\n        const result = number.toString(16);\n\n        return number.isLessThan(0) ? '-0x' + result.substr(1) : '0x' + result;\n    }\n\n    static fromSun(sun) {\n        const trx = TronWeb.toBigNumber(sun).div(1_000_000);        \n        return utils.isBigNumber(sun) ? trx : trx.toString(10);\n    }\n\n    static toSun(trx) {\n        const sun = TronWeb.toBigNumber(trx).times(1_000_000);        \n        return utils.isBigNumber(trx) ? sun : sun.toString(10);\n    }\n\n    static toBigNumber(amount = 0) {\n        if(utils.isBigNumber(amount))\n            return amount;\n\n        if(utils.isString(amount) && (amount.indexOf('0x') === 0 || amount.indexOf('-0x') === 0))\n            return new BigNumber(amount.replace('0x', ''), 16);\n\n        return new BigNumber(amount.toString(10), 10);\n    }\n\n    static isAddress(address = false) {\n        if(!utils.isString(address))\n            return false;\n\n        // Convert HEX to Base58\n        if(address.length === 42) {\n            return TronWeb.isAddress(\n                utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address)\n                )\n            );\n        }\n\n        return utils.crypto.isAddressValid(address);\n    }\n\n    // TODO\n    static compile(solditySource) {\n\n    }\n\n    static async createAccount(callback = false) {\n        const account = utils.accounts.generateAccount();\n\n        if(callback)\n            callback(null, account);\n\n        return account;\n    }\n\n    async isConnected(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.isConnected);\n\n        callback(null, {\n            fullNode: await this.fullNode.isConnected(),\n            solidityNode: await this.solidityNode.isConnected(),\n            eventServer: await this.isEventServerConnected()\n        });\n    }\n};\n"],"sourceRoot":""}