{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"source-map-support/register\"","webpack:///external \"bignumber.js\"","webpack:///external \"axios\"","webpack:///external \"ethers\"","webpack:///external \"js-sha3\"","webpack:///external \"elliptic\"","webpack:///external \"@babel/runtime/helpers/defineProperty\"","webpack:///external \"jssha\"","webpack:///external \"validator\"","webpack:///./src/utils/base64.js","webpack:///./src/utils/bytes.js","webpack:///./src/utils/address.js","webpack:///./src/utils/code.js","webpack:///./src/utils/base58.js","webpack:///./src/utils/crypto.js","webpack:///./src/utils/accounts.js","webpack:///./src/utils/index.js","webpack:///./src/lib/providers/index.js","webpack:///./src/lib/providers/HttpProvider.js","webpack:///./src/lib/transactionBuilder.js","webpack:///./src/lib/trx.js","webpack:///./src/lib/witness.js","webpack:///./src/lib/contract/method.js","webpack:///./src/lib/contract/index.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","Base64","this","_keyStr","encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","length","charCodeAt","isNaN","charAt","encodeIgnoreUtf8","inputBytes","decode","replace","indexOf","String","fromCharCode","_utf8_decode","decodeToByteArray","_out2ByteArray","utftext","byteArray","Array","c1","c2","_utf8_encode","string","c3","byte2hexStr","byte","str","bytesToString","arr","one","toString","v","match","bytesLength","store","slice","st","parseInt","hextoString","hex","split","out","tmp","base64DecodeFromString","string64","byteArray2hexStr","isTestNet","process","env","NET","ADDRESS_SIZE","ADDRESS_PREFIX","ADDRESS_PREFIX_BYTE","bin2String","array","arrayEquals","array1","array2","stringToBytes","bytes","len","push","code_bytesToString","code_hextoString","hexChar2byte","isHexChar","hexStr2byteArray","j","k","code_byte2hexStr","code_byteArray2hexStr","reduce","code_base64DecodeFromString","base64EncodeToString","strToDate","tempStrs","dateStrs","year","month","day","timeStrs","hour","minute","second","Date","isNumber","getStringType","ALPHABET","ALPHABET_MAP","BASE","encode58","buffer","digits","carry","reverse","map","digit","join","decode58","Error","getBase58CheckAddress","addressBytes","checkSum","SHA256","concat","decodeBase58Address","base58Sting","address","offset","checkSum1","signTransaction","priKeyBytes","transaction","signature","ECKeySign","txID","arrayToBase64String","a","btoa","crypto_signBytes","privateKey","contents","getRowBytesFromTransactionBase64","base64Data","bytesDecode","proto","protocol","Transaction","deserializeBinary","getRawData","serializeBinary","genPriKey","priKeyHex","external_elliptic_","genKeyPair","getPrivate","computeAddress","pubBytes","hash","external_js_sha3_","substring","getAddressFromPriKey","getPubKeyFromPriKey","decode58Check","addressStr","decodeCheck","decodeData","hash1","isAddressValid","base58Str","getBase58CheckAddressFromPriKeyBase64String","priKeyBase64String","getHexStrAddressFromPriKeyBase64String","getAddressFromPriKeyBase64String","pubkey","keyFromPrivate","getPublic","x","y","xHex","yHex","hashBytes","sign","id","recoveryParam","rHex","sHex","msgBytes","shaObj","external_jssha_default","msgHex","update","getHash","passwordToAddress","password","pkToAddress","generateAccount","pubKeyBytes","publicKey","base58","src_utils","isValidURL","url","external_validator_default","isURL","protocols","isObject","obj","isArray","isJson","JSON","parse","ex","isBoolean","bool","isBigNumber","number","external_bignumber_js_default","constructor","isString","isFunction","isHex","isInteger","Number","hasProperty","hasProperties","properties","includes","injectPromise","func","args","Promise","resolve","reject","err","res","promiseInjector","scope","mapEvent","event","block","block_number","timestamp","block_timestamp","contract","contract_address","event_name","transaction_id","result","parseEvent","inputs","abi","index","type","substr","toLowerCase","code","code_namespaceObject","accounts","accounts_namespaceObject","base58_namespaceObject","bytes_namespaceObject","crypto","crypto_namespaceObject","providers","HttpProvider","host","timeout","user","headers","statusPage","instance","external_axios_default","baseURL","auth","setStatusPage","[object Object]","request","then","data","catch","payload","method","params","transactionBuilder_TransactionBuilder","tronWeb","src_TronWeb","sendTrx","to","amount","from","defaultAddress","callback","isAddress","toHex","fullNode","to_address","owner_address","sendToken","tokenID","fromUtf8","asset_name","purchaseToken","issuerAddress","buyer","freezeBalance","duration","frozen_balance","frozen_duration","unfreezeBalance","withdrawBlockRewards","applyForSR","vote","votes","voterAddress","keys","invalid","entries","srAddress","voteCount","vote_address","vote_count","createSmartContract","options","bytecode","feeLimit","callValue","bandwidthLimit","parameters","_unused","payable","some","abiCoder","external_ethers_default","utils","AbiCoder","types","values","fee_limit","call_value","consume_user_resource_percent","stringify","parameter","triggerSmartContract","contractAddress","functionSelector","function_selector","message","toUtf8","createToken","abbreviation","description","totalSupply","trxRatio","tokenRatio","saleStart","now","saleEnd","freeBandwidth","freeBandwidthLimit","frozenAmount","frozenDuration","abbr","total_supply","trx_num","num","start_time","end_time","free_asset_net_limit","public_free_asset_net_limit","frozen_supply","frozen_amount","frozen_days","updateToken","new_limit","new_public_limit","sendAsset","purchaseAsset","createAsset","updateAsset","trx_Trx","parseToken","token","getCurrentBlock","getBlock","defaultBlock","getBlockByHash","getBlockByNumber","blockHash","blockID","getBlockTransactionCount","transactions","getTransactionFromBlock","getTransaction","transactionID","getTransactionInfo","solidityNode","getTransactionsToAddress","limit","getTransactionsRelated","getTransactionsFromAddress","direction","tx","sort","b","raw_data","account","getAccount","getBalance","balance","getBandwidth","freeNetUsed","freeNetLimit","NetUsed","NetLimit","getTokensIssuedByAddress","assetIssue","tokens","getTokenFromID","listNodes","nodes","port","getBlockRange","start","end","startNum","endNum","listSuperRepresentatives","witnesses","listTokens","timeUntilNextVoteCycle","Math","floor","getContract","defaultPrivateKey","fromPrivateKey","sendRawTransaction","signedTransaction","sendTransaction","transactionBuilder","send","broadcast","Witness","method_abiCoder","getFunctionSelector","getParamTypes","decodeOutput","names","filter","arg","method_Method","outputs","sha3","defaultOptions","shouldPollResponse","onMethod","forEach","methodArgs","_call","_send","watch","_watch","deployed","stateMutability","constant_result","trx","checkResult","async","error","setTimeout","resMessage","decoded","contractResult","eventServer","listener","lastBlock","getEvents","events","getEventResult","latestEvent","newEvents","priorEvent","bindListener","clearInterval","setInterval","stop","contract_Contract","eventListener","methods","props","loadAbi","eventCallback","_getEvents","console","_stopEventListener","__proto__","prop","methodCall","new","at","entrys","self","startCallback","_startEventListener","setFullNode","setSolidityNode","setEventServer","BigNumber","setPrivateKey","witness","setDefaultBlock","setAddress","fromHex","isValidProvider","provider","knownProvider","isEventServerConnected","currentProviders","currentProvider","eventName","blockNumber","routeParams","response","getEventByTransacionID","val","fromDecimal","isFinite","Buffer","padding","padEnd","toBigNumber","toNumber","lessThan","sun","div","times","solditySource","isConnected"],"mappings":"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","file":"TronWeb.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","module.exports = require(\"source-map-support/register\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"axios\");","module.exports = require(\"ethers\");","module.exports = require(\"js-sha3\");","module.exports = require(\"elliptic\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"jssha\");","module.exports = require(\"validator\");","export function Base64() {\n    this._keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n    this.encode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n        \n        while (i < input.length) {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.encodeIgnoreUtf8 = inputBytes => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n        \n        while (i < inputBytes.length) {\n            chr1 = inputBytes[i++];\n            chr2 = inputBytes[i++];\n            chr3 = inputBytes[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.decode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = _keyStr.indexOf(input.charAt(i++));\n            enc2 = _keyStr.indexOf(input.charAt(i++));\n            enc3 = _keyStr.indexOf(input.charAt(i++));\n            enc4 = _keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n                \n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n        \n        return this._utf8_decode(output);\n    }\n\n    this.decodeToByteArray = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = _keyStr.indexOf(input.charAt(i++));\n            enc2 = _keyStr.indexOf(input.charAt(i++));\n            enc3 = _keyStr.indexOf(input.charAt(i++));\n            enc4 = _keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n        \n        return this._out2ByteArray(output);\n    }\n\n    this._out2ByteArray = utftext => {\n        const byteArray = new Array(utftext.length);\n\n        let i = 0;\n        let c = c1 = c2 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n            byteArray[i] = c;\n            i++;\n        }\n\n        return byteArray;\n    }\n\n    this._utf8_encode = string => {\n        string = string.replace(/\\r\\n/g, \"\\n\");\n        let utftext = \"\";\n\n        for (let n = 0; n < string.length; n++) {\n            const c = string.charCodeAt(n);\n\n            if (c < 128) {\n                utftext += String.fromCharCode(c);\n            } else if ((c > 127) && (c < 2048)) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            } else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n        }\n\n        return utftext;\n    }\n\n    this._utf8_decode = utftext => {\n        let string = \"\";\n        let i = 0;\n        let c = c1 = c2 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n\n            if (c < 128) {\n                string += String.fromCharCode(c);\n                i++;\n            } else if ((c > 191) && (c < 224)) {\n                c2 = utftext.charCodeAt(i + 1);\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                i += 2;\n            } else {\n                c2 = utftext.charCodeAt(i + 1);\n                c3 = utftext.charCodeAt(i + 2);\n\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\n                i += 3;\n            }\n        }\n\n        return string;\n    }\n}","import { Base64 } from './base64';\n\nexport function byte2hexStr(byte) {\n    const hexByteMap = '0123456789ABCDEF';\n\n    let str = '';\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n        \n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length === 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else {\n            str += String.fromCharCode(arr[i]);\n        }\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.split('');\n    let out = '';\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        let tmp = `0x${ arr[i * 2] }${ arr[i * 2 + 1] }`;\n        out += String.fromCharCode(tmp);\n    }\n\n    return out;\n}\n\nexport function base64DecodeFromString(string64) {\n    return new Base64().decodeToByteArray(string64);\n}\n\nexport function byteArray2hexStr(byteArray) {\n    let str = '';\n\n    for (let i = 0; i < (byteArray.length); i++)\n        str += byte2hexStr(byteArray[i]);\n        \n    return str;\n}","const isTestNet = process.env.NET === 'testnet';\n\nexport const ADDRESS_SIZE = isTestNet ? 35 : 34;\nexport const ADDRESS_PREFIX = isTestNet ? \"a0\" : \"41\";\nexport const ADDRESS_PREFIX_BYTE = isTestNet ? 0xa0 : 0x41;\n","import { Base64 } from './base64';\n\nexport function bin2String(array) {\n    return String.fromCharCode(...array);\n}\n\nexport function arrayEquals(array1, array2) {\n    if (array1.length != array2.length)\n        return false;\n        \n    let i;\n\n    for (i = 0; i < array1.length; i++) {\n        if (array1[i] != array2[i])\n            return false;\n    }\n\n    return true;\n}\n\nexport function stringToBytes(str) {\n    const bytes = new Array();\n    let len;\n    let c;\n\n    len = str.length;\n\n    for (let i = 0; i < len; i++) {\n        c = str.charCodeAt(i);\n\n        if (c >= 0x010000 && c <= 0x10FFFF) {\n            bytes.push(((c >> 18) & 0x07) | 0xF0);\n            bytes.push(((c >> 12) & 0x3F) | 0x80);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000800 && c <= 0x00FFFF) {\n            bytes.push(((c >> 12) & 0x0F) | 0xE0);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000080 && c <= 0x0007FF) {\n            bytes.push(((c >> 6) & 0x1F) | 0xC0);\n            bytes.push((c & 0x3F) | 0x80);\n        } else bytes.push(c & 0xFF);\n    }\n\n    return bytes;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n        \n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length == 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else str += String.fromCharCode(arr[i]);\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.split(\"\");\n    let out = \"\";\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        const tmp = `0x${arr[i * 2]}${arr[i * 2 + 1]}`;\n        const charValue = String.fromCharCode(tmp);\n\n        out += charValue;\n    }\n\n    return out\n}\n\nexport function hexChar2byte(c) {\n    let d = 0;\n\n    if (c >= 'A' && c <= 'F')\n        d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    else if (c >= 'a' && c <= 'f')\n        d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10;\n    else if (c >= '0' && c <= '9')\n        d = c.charCodeAt(0) - '0'.charCodeAt(0);\n        \n    return d;\n}\n\nexport function isHexChar(c) {\n    if ((c >= 'A' && c <= 'F') ||\n        (c >= 'a' && c <= 'f') ||\n        (c >= '0' && c <= '9')) {\n        return 1;\n    }\n\n    return 0;\n}\n\nexport function hexStr2byteArray(str) {\n    const byteArray = Array();\n    let d = 0;\n    let j = 0;\n    let k = 0;\n\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charAt(i);\n\n        if (isHexChar(c)) {\n            d <<= 4;\n            d += hexChar2byte(c);\n            j++;\n\n            if (0 === (j % 2)) {\n                byteArray[k++] = d;\n                d = 0;\n            }\n        }\n    }\n\n    return byteArray;\n}\n\nexport function byte2hexStr(byte) {\n    const hexByteMap = \"0123456789ABCDEF\";\n    let str = \"\";\n\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function byteArray2hexStr(byteArray) {\n    return byteArray.reduce((string, byte) => {\n        return string + byte2hexStr(byte);\n    }, '');\n}\n\nexport function base64DecodeFromString(string64) {\n    const b = new Base64();\n    const decodeBytes = b.decodeToByteArray(string64);\n\n    return decodeBytes;\n}\n\nexport function base64EncodeToString(bytes) {\n    const b = new Base64();\n    const string64 = b.encodeIgnoreUtf8(bytes);\n\n    return string64\n}\n\n//yyyy-MM-DD HH-mm-ss\nexport function strToDate(str) {\n    const tempStrs = str.split(\" \");\n    const dateStrs = tempStrs[0].split(\"-\");\n    const year = parseInt(dateStrs[0], 10);\n    const month = parseInt(dateStrs[1], 10) - 1;\n    const day = parseInt(dateStrs[2], 10);\n\n    if (tempStrs.length > 1) {\n        const timeStrs = tempStrs[1].split(\"-\");\n        const hour = parseInt(timeStrs[0], 10);\n        const minute = parseInt(timeStrs[1], 10) - 1;\n        const second = parseInt(timeStrs[2], 10);\n\n        return new Date(year, month, day, hour, minute, second);\n    }\n\n    return new Date(year, month, day);\n}\n\nexport function isNumber(c) {\n    if (c >= '0' && c <= '9')\n        return 1;\n        \n    return 0;\n}\n\n//return 1: address  --- 20Bytes HexString\n//return 2: blockNumber ------ Decimal number\n//return 3: assetName ------ String\n//return other: error\nexport function getStringType(str) {\n    if (null == str)\n        return -1;\n\n    if (typeof (str) != 'string')\n        return -1;\n\n    if (str.length == 0 || str == \"\")\n        return -1;\n\n    let i = 0;\n\n    if (str.length == 40) {\n        for (; i < 40; i++) {\n            var c = str.charAt(i);\n\n            if (!isHexChar(c))\n                break;\n        }\n    }\n\n    if (i == 40)\n        return 1; //40 Hex, Address\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (!isNumber(c))\n            break;\n    }\n\n    if (i == str.length)\n        return 2; //Alll Decimal number, BlockNumber\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (c > ' ')\n            return 3; //At least one visible character\n    }\n\n    return -1;\n}","const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nconst ALPHABET_MAP = {};\n\nfor (let i = 0; i < ALPHABET.length; i++)\n    ALPHABET_MAP[ALPHABET.charAt(i)] = i;\n\nconst BASE = 58;\n\nexport function encode58(buffer) {\n    if (buffer.length === 0) \n        return '';\n\n    let i;\n    let j;\n\n    const digits = [0];\n\n    for (i = 0; i < buffer.length; i++) {\n        for (j = 0; j < digits.length; j++) \n            digits[j] <<= 8;\n\n        digits[0] += buffer[i];\n        let carry = 0;\n\n        for (j = 0; j < digits.length; ++j) {\n            digits[j] += carry;\n            carry = (digits[j] / BASE) | 0;\n            digits[j] %= BASE\n        }\n\n        while (carry) {\n            digits.push(carry % BASE);\n            carry = (carry / BASE) | 0\n        }\n    }\n\n    for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++) \n        digits.push(0);\n\n    return digits.reverse().map(digit => ALPHABET[digit]).join('');\n}\n\nexport function decode58(string) {\n    if (string.length === 0) \n        return [];\n\n    let i;\n    let j;\n\n    const bytes = [0];\n\n    for (i = 0; i < string.length; i++) {\n        const c = string[i];\n\n        if (!(c in ALPHABET_MAP))\n            throw new Error('Non-base58 character');\n\n        for (j = 0; j < bytes.length; j++) \n            bytes[j] *= BASE;\n\n        bytes[0] += ALPHABET_MAP[c];\n        let carry = 0;\n\n        for (j = 0; j < bytes.length; ++j) {\n            bytes[j] += carry;\n            carry = bytes[j] >> 8;\n            bytes[j] &= 0xff;\n        }\n\n        while (carry) {\n            bytes.push(carry & 0xff);\n            carry >>= 8;\n        }\n    }\n\n    for (i = 0; string[i] === '1' && i < string.length - 1; i++)\n        bytes.push(0);\n\n    return bytes.reverse();\n}","import jsSHA from 'jssha';\n\nimport { ADDRESS_PREFIX, ADDRESS_PREFIX_BYTE } from './address';\nimport { base64EncodeToString } from './code';\nimport { base64DecodeFromString, hexStr2byteArray } from './code';\nimport { encode58, decode58 } from './base58';\nimport { keccak256 } from 'js-sha3';\nimport { ADDRESS_SIZE } from './address';\nimport { byte2hexStr, byteArray2hexStr } from './bytes';\nimport { ec as EC } from 'elliptic';\n\nexport function getBase58CheckAddress(addressBytes) {\n    const hash0 = SHA256(addressBytes);\n    const hash1 = SHA256(hash0);\n\n    let checkSum = hash1.slice(0, 4);\n    checkSum = addressBytes.concat(checkSum);\n\n    return encode58(checkSum);\n}\n\nexport function decodeBase58Address(base58Sting) {\n    if (typeof (base58Sting) != 'string')\n        return false;\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    let address = decode58(base58Sting);\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    const len = address.length;\n    const offset = len - 4;\n    const checkSum = address.slice(offset);\n\n    address = address.slice(0, offset);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return address;\n    }\n\n    return hexStr2byteArray('000000000000000000000000000000000000000000');\n}\n\nexport function signTransaction(priKeyBytes, transaction) {\n    if (typeof priKeyBytes === 'string')\n        priKeyBytes = hexStr2byteArray(priKeyBytes);\n\n    const txID = transaction.txID;\n    const signature = ECKeySign(hexStr2byteArray(txID), priKeyBytes);\n\n    transaction.signature = [ signature ];\n    return transaction;\n}\n\nexport function arrayToBase64String(a) {\n    return btoa(String.fromCharCode(...a));\n}\n\nexport function signBytes(privateKey, contents) {\n    if (typeof privateKey === 'string')\n        privateKey = hexStr2byteArray(privateKey);\n\n    const hashBytes = SHA256(contents);\n    const signBytes = ECKeySign(hashBytes, privateKey);\n\n    return signBytes;\n}\n\nexport function getRowBytesFromTransactionBase64(base64Data) {\n    const bytesDecode = base64DecodeFromString(base64Data);\n    const transaction = proto.protocol.Transaction.deserializeBinary(bytesDecode);\n    const raw = transaction.getRawData();\n\n    return raw.serializeBinary();\n}\n\nexport function genPriKey() {\n    const ec = new EC('secp256k1');\n    const key = ec.genKeyPair();\n    const priKey = key.getPrivate();\n\n    let priKeyHex = priKey.toString('hex');\n\n    while (priKeyHex.length < 64) {\n        priKeyHex = `0${priKeyHex}`;\n    }\n\n    return hexStr2byteArray(priKeyHex);\n}\n\nexport function computeAddress(pubBytes) {\n    if (pubBytes.length === 65)\n        pubBytes = pubBytes.slice(1);\n\n    const hash = keccak256(pubBytes).toString();\n    const addressHex = ADDRESS_PREFIX + hash.substring(24);\n\n    return hexStr2byteArray(addressHex);\n}\n\nexport function getAddressFromPriKey(priKeyBytes) {\n    let pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    return computeAddress(pubBytes);\n}\n\nexport function decode58Check(addressStr) {\n    const decodeCheck = decode58(addressStr);\n\n    if (decodeCheck.length <= 4)\n        return false;\n\n    const decodeData = decodeCheck.slice(0, decodeCheck.length - 4);\n    const hash0 = SHA256(decodeData);\n    const hash1 = SHA256(hash0);\n\n    if (hash1[0] === decodeCheck[decodeData.length] &&\n        hash1[1] === decodeCheck[decodeData.length + 1] &&\n        hash1[2] === decodeCheck[decodeData.length + 2] &&\n        hash1[3] === decodeCheck[decodeData.length + 3]) {\n        return decodeData;\n    }\n\n    return false;\n}\n\nexport function isAddressValid(base58Str) {\n    if (typeof (base58Str) !== 'string')\n        return false;\n        \n    if (base58Str.length !== ADDRESS_SIZE)\n        return false;\n\n    let address = decode58(base58Str);\n\n    if (address.length !== 25)\n        return false;\n        \n    if (address[0] !== ADDRESS_PREFIX_BYTE)\n        return false;\n        \n    const checkSum = address.slice(21);\n    address = address.slice(0, 21);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return true\n    }\n\n    return false;\n}\n\nexport function getBase58CheckAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n\n    return getBase58CheckAddress(addressBytes);\n}\n\nexport function getHexStrAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressHex = byteArray2hexStr(addressBytes);\n\n    return addressHex;\n}\n\nexport function getAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressBase64 = base64EncodeToString(addressBytes);\n\n    return addressBase64;\n}\n\nexport function getPubKeyFromPriKey(priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const pubkey = key.getPublic();\n    const x = pubkey.x;\n    const y = pubkey.y;\n\n    let xHex = x.toString('hex');\n\n    while (xHex.length < 64) {\n        xHex = `0${xHex}`;\n    }\n\n    let yHex = y.toString('hex');\n\n    while (yHex.length < 64) {\n        yHex = `0${yHex}`;\n    }\n\n    const pubkeyHex = `04${xHex}${yHex}`;\n    const pubkeyBytes = hexStr2byteArray(pubkeyHex);\n\n    return pubkeyBytes;\n}\n\nexport function ECKeySign(hashBytes, priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const signature = key.sign(hashBytes);\n    const r = signature.r;\n    const s = signature.s;\n    const id = signature.recoveryParam;\n\n    let rHex = r.toString('hex');\n\n    while (rHex.length < 64) {\n        rHex = `0${rHex}`;\n    }\n\n    let sHex = s.toString('hex');\n\n    while (sHex.length < 64) {\n        sHex = `0${sHex}`;\n    }\n\n    const idHex = byte2hexStr(id);\n    const signHex = rHex + sHex + idHex;\n\n    return signHex;\n}\n\nexport function SHA256(msgBytes) {\n    const shaObj = new jsSHA('SHA-256', 'HEX');\n    const msgHex = byteArray2hexStr(msgBytes);\n\n    shaObj.update(msgHex);\n    const hashHex = shaObj.getHash('HEX');\n\n    return hexStr2byteArray(hashHex);\n}\n\nexport function passwordToAddress(password) {\n    const com_priKeyBytes = base64DecodeFromString(password);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n\nexport function pkToAddress(privateKey) {\n    const com_priKeyBytes = hexStr2byteArray(privateKey);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}","import { byteArray2hexStr } from './bytes';\nimport { \n    getBase58CheckAddress,\n    genPriKey,\n    getAddressFromPriKey,\n    getPubKeyFromPriKey\n} from './crypto';\n\nexport function generateAccount() {\n    const priKeyBytes = genPriKey();\n    const pubKeyBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = getAddressFromPriKey(priKeyBytes);\n    \n    const privateKey = byteArray2hexStr(priKeyBytes);\n    const publicKey = byteArray2hexStr(pubKeyBytes);\n\n    return {\n        privateKey,\n        publicKey,\n        address: {\n            base58: getBase58CheckAddress(addressBytes),\n            hex: byteArray2hexStr(addressBytes)\n        }\n    }\n}","import * as accounts from './accounts';\nimport * as base58 from './base58';\nimport * as bytes from './bytes';\nimport * as crypto from './crypto';\nimport * as code from './code';\n\nimport validator from 'validator';\nimport BigNumber from 'bignumber.js';\n\nconst utils = {\n    isValidURL(url) {\n        return validator.isURL(url, {\n            protocols: [ 'http', 'https' ]\n        });\n    },\n\n    isObject(obj) {\n        return obj === Object(obj) && Object.prototype.toString.call(obj) !== '[object Array]';\n    },\n\n    isArray(array) {\n        return Array.isArray(array);\n    },\n\n    isJson(string) {\n        try {\n            return !!JSON.parse(string);\n        } catch (ex) {\n            return false;\n        }\n    },\n\n    isBoolean(bool) {\n        return typeof bool === 'boolean';\n    },\n\n    isBigNumber(number) {\n        return number && (number instanceof BigNumber || (number.constructor && number.constructor.name === 'BigNumber'));\n    },\n\n    isString(string) {\n        return typeof string === 'string' || (string && string.constructor && string.constructor.name === 'String');\n    },\n\n    isFunction(obj) {\n        return typeof obj === 'function';\n    },\n\n    isHex(string) {\n        return typeof string === 'string' && !isNaN(parseInt(string, 16));\n    },\n\n    isInteger(number) {\n        return Number.isInteger(\n            Number(number)\n        );\n    },\n\n    hasProperty(obj, property) {\n        return Object.prototype.hasOwnProperty.call(obj, property);\n    },\n\n    hasProperties(obj, ...properties) {\n        return properties.length && !properties.map(property => {\n            return this.hasProperty(obj, property)\n        }).includes(false);\n    },\n\n    injectPromise(func, ...args) {\n        return new Promise((resolve, reject) => {\n            func(...args, (err, res) => {\n                if(err)\n                    reject(err);\n                else resolve(res);\n            });\n        });\n    },\n\n    promiseInjector(scope) {\n        return (func, ...args) => {\n            return this.injectPromise(func.bind(scope), ...args);\n        }\n    },\n\n    mapEvent(event) {\n        return {\n            block: event.block_number,\n            timestamp: event.block_timestamp,\n            contract: event.contract_address,\n            name: event.event_name,\n            transaction: event.transaction_id,\n            result: event.result\n        };\n    },\n\n    parseEvent(event, { inputs: abi }) {\n        if(!event.result)\n            return event;\n\n        event.result = event.result.reduce((obj, result, index) => {\n            const {\n                name,\n                type\n            } = abi[index];\n\n            if(type == 'address')\n                result = '41' + result.substr(2).toLowerCase();\n\n            obj[name] = result;\n\n            return obj;\n        }, {});\n\n        return event;\n    }\n}\n\nexport default {\n    ...utils,\n    code,\n    accounts,\n    base58,\n    bytes,\n    crypto\n};","import HttpProvider from './HttpProvider';\n\nexport default {\n    HttpProvider\n};","import axios from 'axios';\nimport utils from 'utils';\n\nexport default class HttpProvider {\n    constructor(host, timeout = 30000, user = false, password = false, headers = {}, statusPage = '/') {\n        if(!utils.isValidURL(host))\n            throw new Error('Invalid URL provided to HttpProvider');\n\n        if(isNaN(timeout) || timeout < 0)\n            throw new Error('Invalid timeout duration provided');\n\n        if(!utils.isObject(headers))\n            throw new Error('Invalid headers object provided');\n\n        if(host.charAt(host.length - 1) === '/')\n            host = host.substr(0, host.length - 2);\n\n        this.host = host;\n        this.timeout = timeout;\n        this.user = user;\n        this.password = password;\n        this.headers = headers;\n        this.statusPage = statusPage;\n\n        this.instance = axios.create({            \n            baseURL: host,\n            timeout: timeout,\n            headers: headers,\n            auth: user && {\n                user,\n                password\n            },\n        });\n    }\n\n    setStatusPage(statusPage = '/') {\n        this.statusPage = statusPage;\n    }\n\n    async isConnected(statusPage = this.statusPage) {\n        return this.request(statusPage).then(data => {\n            return utils.hasProperties(data, 'blockID', 'block_header');\n        }).catch(() => false);\n    }\n\n    request(url, payload = {}, method = 'get') {\n        method = method.toLowerCase();\n\n        return this.instance.request({\n            data: method == 'post' && payload,\n            params: method =='get' && payload,\n            url,\n            method\n        }).then(({ data }) => data);\n    }\n};","import TronWeb from 'index';\nimport utils from 'utils';\nimport Ethers from 'ethers';\n\nexport default class TransactionBuilder {\n    constructor(tronWeb = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    sendTrx(to = false, amount = 0, from = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.sendTrx, to, amount, from);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!this.tronWeb.isAddress(from))\n            return callback('Invalid origin address provided');\n\n        to = this.tronWeb.address.toHex(to);\n        from = this.tronWeb.address.toHex(from);\n\n        if(to === from)\n            return callback('Cannot transfer TRX to the same account');\n\n        this.tronWeb.fullNode.request('wallet/createtransaction', {\n            to_address: to,\n            owner_address: from,\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    sendToken(to = false, amount = 0, tokenID = false, from = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, from);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if(!this.tronWeb.isAddress(from))\n            return callback('Invalid origin address provided');\n\n        to = this.tronWeb.address.toHex(to);\n        tokenID = this.tronWeb.fromUtf8(tokenID);\n        from = this.tronWeb.address.toHex(from);\n\n        if(to === from)\n            return callback('Cannot transfer tokens to the same account');\n\n        this.tronWeb.fullNode.request('wallet/transferasset', {\n            to_address: to,\n            owner_address: from,\n            asset_name: tokenID,\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    purchaseToken(issuerAddress = false, tokenID = false, amount = 0, buyer = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(buyer)) {\n            callback = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.purchaseToken, issuerAddress, tokenID, amount, buyer);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!this.tronWeb.isAddress(buyer))\n            return callback('Invalid buyer address provided');\n\n        this.tronWeb.fullNode.request('wallet/participateassetissue', {\n            to_address: this.tronWeb.address.toHex(issuerAddress),\n            owner_address: this.tronWeb.address.toHex(buyer),\n            asset_name: this.tronWeb.fromUtf8(tokenID),\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    freezeBalance(address = this.tronWeb.defaultAddress.hex, amount = 0, duration = 3, callback = false) {\n        if(utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.freezeBalance, address, amount, duration);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isInteger(duration) || duration < 3)\n            return callback('Invalid duration provided, minimum of 3 days');\n\n        this.tronWeb.fullNode.request('wallet/freezebalance', {\n            owner_address: this.tronWeb.address.toHex(address),\n            frozen_balance: parseInt(amount),\n            frozen_duration: parseInt(duration)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    unfreezeBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.unfreezeBalance, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n        \n        this.tronWeb.fullNode.request('wallet/unfreezebalance', {\n            owner_address: this.tronWeb.address.toHex(address)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    withdrawBlockRewards(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.withdrawBlockRewards, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n        \n        this.tronWeb.fullNode.request('wallet/withdrawbalance', {\n            owner_address: this.tronWeb.address.toHex(address)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    applyForSR(address = this.tronWeb.defaultAddress.hex, url = false, callback = false) {\n        if(utils.isValidURL(address)) {\n            callback = url || false;\n            url = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.applyForSR, address, url);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isValidURL(url))\n            return callback('Invalid url provided');\n        \n        this.tronWeb.fullNode.request('wallet/createwitness', {\n            owner_address: this.tronWeb.address.toHex(address),\n            url: this.tronWeb.fromUtf8(url)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    vote(votes = {}, voterAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.vote, votes, voterAddress);\n\n        if(!utils.isObject(votes) || !Object.keys(votes).length)\n            return callback('Invalid votes object provided');\n\n        if(!this.tronWeb.isAddress(voterAddress))\n            return callback('Invalid voter address provided');\n\n        let invalid = false;\n\n        votes = Object.entries(votes).map(([ srAddress, voteCount ]) => {\n            if(invalid)\n                return;\n\n            if(!this.tronWeb.isAddress(srAddress)) {\n                callback('Invalid SR address provided: ' + srAddress);\n                return invalid = true;\n            }\n\n            if(!utils.isInteger(voteCount) || voteCount <= 0) {\n                callback('Invalid vote count provided for SR: ' + srAddress);\n                return invalid = true;\n            }\n\n            return {\n                vote_address: this.tronWeb.address.toHex(srAddress),\n                vote_count: parseInt(voteCount)\n            };\n        });\n\n        if(invalid)\n            return;\n\n        this.tronWeb.fullNode.request('wallet/votewitnessaccount', {\n            owner_address: this.tronWeb.address.toHex(voterAddress),\n            votes\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    createSmartContract(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.createSmartContract, options, issuerAddress);\n\n        let {\n            abi = false,\n            bytecode = false,\n            feeLimit = 1_000_000_000,\n            callValue = 0,\n            bandwidthLimit = 0,\n            parameters = []\n        } = options;\n\n        if(abi && utils.isString(abi)) {\n            try {\n                abi = JSON.parse(abi);\n            } catch{\n                return callback('Invalid options.abi provided');\n            }\n        }\n\n        if(!utils.isArray(abi))\n            return callback('Invalid options.abi provided');\n\n        const payable = abi.some(func => {\n            return func.type == 'constructor' && func.payable;\n        });\n\n        if(!utils.isHex(bytecode))\n            return callback('Invalid options.bytecode provided');\n\n        if(!utils.isInteger(feeLimit) || feeLimit <= 0 || feeLimit > 1_000_000_000)\n            return callback('Invalid options.feeLimit provided');\n\n        if(!utils.isInteger(callValue) || callValue < 0)\n            return callback('Invalid options.callValue provided');\n\n        if(payable && callValue == 0)\n            return callback('When contract is payable, options.callValue must be a positive integer');\n\n        if(!payable && callValue > 0)\n            return callback('When contract is not payable, options.callValue must be 0');\n\n        if(!utils.isInteger(bandwidthLimit) || bandwidthLimit < 0 || bandwidthLimit > 100)\n            return callback('Invalid options.bandwidthLimit provided');\n\n        if(!utils.isArray(parameters))\n            return callback('Invalid parameters provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        if(parameters.length) {\n            const abiCoder = new Ethers.utils.AbiCoder();\n            const types = [];\n            const values = [];\n\n            for(let i = 0; i < parameters.length; i++) {\n                let { type, value } = parameters[i];\n\n                if(!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if(type == 'address')\n                    value = this.tronWeb.address.toHex(value).replace(/^(41)/, '0x');\n                    \n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        this.tronWeb.fullNode.request('wallet/deploycontract', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            consume_user_resource_percent: bandwidthLimit,\n            abi: JSON.stringify(abi),\n            bytecode,\n            parameter: parameters\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    triggerSmartContract(\n        contractAddress, \n        functionSelector,\n        feeLimit = 1_000_000_000,\n        callValue = 0,\n        parameters = [], \n        issuerAddress = this.tronWeb.defaultAddress.hex, \n        callback = false\n    ) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(parameters)) {\n            callback = parameters;\n            parameters = [];\n        }\n\n        if(utils.isFunction(callValue)) {\n            callback = callValue;\n            callValue = 0;\n        }\n\n        if(utils.isFunction(feeLimit)) {\n            callback = feeLimit;\n            feeLimit = 1_000_000_000;\n        }\n\n        if(!callback) {\n            return this.injectPromise(\n                this.triggerSmartContract, \n                contractAddress, \n                functionSelector, \n                feeLimit,\n                callValue, \n                parameters,\n                issuerAddress\n            );\n        }\n\n        if(!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if(!utils.isString(functionSelector) || !functionSelector.length)\n            return callback('Invalid function selector provided');\n\n        if(!utils.isInteger(callValue) || callValue < 0)\n            return callback('Invalid call value provided');\n\n        if(!utils.isInteger(feeLimit) || feeLimit <= 0 || feeLimit > 1_000_000_000)\n            return callback('Invalid fee limit provided');\n\n        if(!utils.isArray(parameters))\n            return callback('Invalid parameters provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        functionSelector = functionSelector.replace('/\\s*/g', '');\n\n        if(parameters.length) {\n            const abiCoder = new Ethers.utils.AbiCoder();\n            const types = [];\n            const values = [];\n\n            for(let i = 0; i < parameters.length; i++) {\n                let { type, value } = parameters[i];\n\n                if(!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if(type == 'address')\n                    value = this.tronWeb.address.toHex(value).replace(/^(41)/, '0x');\n                    \n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        this.tronWeb.fullNode.request('wallet/triggersmartcontract', {\n            contract_address: this.tronWeb.address.toHex(contractAddress),\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            function_selector: functionSelector,\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            parameter: parameters\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            if(!transaction.result.result)\n                return callback(transaction);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    createToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.createToken, options, issuerAddress);\n\n        const {\n            name = false,\n            abbreviation = false,\n            description = false,\n            url = false,\n            totalSupply = 0,\n            trxRatio = 1, // How much TRX will `tokenRatio` cost?\n            tokenRatio = 1, // How many tokens will `trxRatio` afford?\n            saleStart = Date.now(),\n            saleEnd = false,            \n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0, // Out of `totalFreeBandwidth`, the amount each token holder get\n            frozenAmount = 0,\n            frozenDuration = 0\n        } = options;\n\n        if(!utils.isString(name) || !name.length)\n            return callback('Invalid token name provided');\n\n        if(!utils.isString(abbreviation) || !abbreviation.length)\n            return callback('Invalid token abbreviation provided');\n\n        if(!utils.isInteger(totalSupply) || totalSupply <= 0)\n            return callback('Invalid supply amount provided');\n\n        if(!utils.isInteger(trxRatio) || trxRatio <= 0)\n            return callback('TRX ratio must be a positive integer');\n\n        if(!utils.isInteger(tokenRatio) || tokenRatio <= 0)\n            return callback('Token ratio must be a positive integer');\n\n        if(!utils.isInteger(saleStart) || saleStart < Date.now())\n            return callback('Invalid sale start timestamp provided');\n\n        if(!utils.isInteger(saleEnd) || saleEnd <= saleStart)\n            return callback('Invalid sale end timestamp provided');\n\n        if(!utils.isString(description) || !description.length)\n            return callback('Invalid token description provided');\n\n        if(!utils.isString(url) || !url.length || !utils.isValidURL(url))\n            return callback('Invalid token url provided');\n\n        if(!utils.isInteger(freeBandwidth) || freeBandwidth < 0)\n            return callback('Invalid free bandwidth amount provided');\n\n        if(!utils.isInteger(freeBandwidthLimit) || freeBandwidthLimit < 0 || (freeBandwidth && !freeBandwidthLimit))\n            return callback('Invalid free bandwidth limit provided');\n\n        if(!utils.isInteger(frozenAmount) || frozenAmount < 0 || (!frozenDuration && frozenAmount))\n            return callback('Invalid frozen supply provided');\n\n        if(!utils.isInteger(frozenDuration) || frozenDuration < 0 || (frozenDuration && !frozenAmount))\n            return callback('Invalid frozen duration provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        this.tronWeb.fullNode.request('wallet/createassetissue', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            name: this.tronWeb.fromUtf8(name),\n            abbr: this.tronWeb.fromUtf8(abbreviation),\n            description: this.tronWeb.fromUtf8(description),\n            url: this.tronWeb.fromUtf8(url),\n            total_supply: parseInt(totalSupply),\n            trx_num: parseInt(trxRatio),\n            num: parseInt(tokenRatio),\n            start_time: parseInt(saleStart),\n            end_time: parseInt(saleEnd),\n            free_asset_net_limit: parseInt(freeBandwidth),\n            public_free_asset_net_limit: parseInt(freeBandwidthLimit),\n            frozen_supply: {\n                frozen_amount: parseInt(frozenAmount),\n                frozen_days: parseInt(frozenDuration)\n            }\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    updateToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.updateToken, options, issuerAddress);\n\n        const {\n            description = false,\n            url = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0 // Out of `totalFreeBandwidth`, the amount each token holder get\n        } = options;\n\n        if(!utils.isInteger(freeBandwidth) || freeBandwidth < 0)\n            return callback('Invalid free bandwidth amount provided');\n\n        if(!utils.isInteger(freeBandwidthLimit) || freeBandwidthLimit < 0 || (freeBandwidth && !freeBandwidthLimit))\n            return callback('Invalid free bandwidth limit provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        this.tronWeb.fullNode.request('wallet/updateasset', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            description: this.tronWeb.fromUtf8(description),\n            url: this.tronWeb.fromUtf8(url),\n            new_limit: parseInt(freeBandwidth),\n            new_public_limit: parseInt(freeBandwidthLimit)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    purchaseAsset(...args) {\n        return this.purchaseToken(...args);\n    }\n\n    createAsset(...args) {\n        return this.createToken(...args);\n    }\n\n    updateAsset(...args) {\n        return this.updateToken(...args);\n    }\n}","import TronWeb from 'index';\nimport utils from 'utils';\n\nexport default class Trx {\n    constructor(tronWeb = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    parseToken(token) {\n        return {\n            ...token,\n            name: this.tronWeb.toUtf8(token.name),\n            abbr: token.abbr && this.tronWeb.toUtf8(token.abbr),\n            description: token.description && this.tronWeb.toUtf8(token.description),\n            url: token.url && this.tronWeb.toUtf8(token.url)\n        };\n    }\n\n    getCurrentBlock(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getCurrentBlock);\n\n        this.tronWeb.fullNode.request('wallet/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlock(block = this.tronWeb.defaultBlock, callback = false) {\n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlock, block);\n\n        if(block === false)\n            return callback('No block identifier provided');\n\n        if(block == 'earliest')\n            block = 0;\n\n        if(block == 'latest')\n            return this.getCurrentBlock(callback);\n\n        if(isNaN(block) && utils.isHex(block))\n            return this.getBlockByHash(block, callback);\n\n        this.getBlockByNumber(block, callback);\n    }\n\n    getBlockByHash(blockHash, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getBlockByHash, blockHash);\n\n        this.tronWeb.fullNode.request('wallet/getblockbyid', { \n            value: blockHash \n        }, 'post').then(block => {\n            if(!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockByNumber(blockID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getBlockByNumber, blockID);\n\n        if(!utils.isInteger(blockID) || blockID < 0)\n            return callback('Invalid block number provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbynum', { \n            num: parseInt(blockID) \n        }, 'post').then(block => {\n            if(!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockTransactionCount(block = this.tronWeb.defaultBlock, callback = false) {\n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlockTransactionCount, block);\n\n        this.getBlock(block).then(({ transactions = [] }) => {\n            callback(null, transactions.length);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionFromBlock(block = this.tronWeb.defaultBlock, index = 0, callback = false) {\n        if(utils.isFunction(index)) {\n            callback = index;\n            index = 0;\n        }\n        \n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionFromBlock, block, index);\n\n        if(!utils.isInteger(index) || index < 0)\n            return callback('Invalid transaction index provided');\n\n        this.getBlock(block).then(({ transactions = false }) => {\n            if(!transactions || transactions.length < index)\n                return callback('Transaction not found in block');\n\n            callback(null, transactions[index]);\n        }).catch(err => callback(err));\n    }\n\n    getTransaction(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTransaction, transactionID);\n\n        this.tronWeb.fullNode.request('wallet/gettransactionbyid', { \n            value: transactionID \n        }, 'post').then(transaction => {\n            if(!Object.keys(transaction).length)\n                return callback('Transaction not found');\n                \n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionInfo(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTransactionInfo, transactionID);\n\n        this.tronWeb.solidityNode.request('walletsolidity/gettransactioninfobyid', { \n            value: transactionID \n        }, 'post').then(transaction => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionsToAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;          \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsToAddress, address, limit, offset);\n\n        return this.getTransactionsRelated(address, 'to', limit, offset, callback);\n    }\n\n    getTransactionsFromAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;           \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsFromAddress, address, limit, offset);\n\n        return this.getTransactionsRelated(address, 'from', limit, offset, callback);\n    }\n\n    async getTransactionsRelated(address = this.tronWeb.defaultAddress.hex, direction = 'all', limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;         \n        }\n\n        if(utils.isFunction(direction)) {\n            callback = direction;\n            direction = 'all';\n        }\n\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsRelated, address, direction, limit, offset);\n\n        if(![ 'to', 'from', 'all' ].includes(direction))\n            return callback('Invalid direction provided: Expected \"to\", \"from\" or \"all\"');\n        \n        if(direction == 'all') {\n            try {\n                const from = await this.getTransactionsRelated(address, 'from', limit, offset);\n                const to = await this.getTransactionsRelated(address, 'to', limit, offset);\n\n                return callback(null, [\n                    ...from.map(tx => (tx.direction = 'from', tx)),\n                    ...to.map(tx => (tx.direction = 'to', tx))\n                ].sort((a, b) => b.raw_data.timestamp - a.raw_data.timestamp));\n            } catch(ex) {\n                return callback(ex);\n            }\n        }\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if(!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request(`walletextension/gettransactions${direction}this`, {\n            account: {\n                address\n            },\n            offset,\n            limit\n        }, 'post').then(({ transaction }) => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getAccount, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBalance, address);\n\n        this.getAccount(address).then(({ balance = 0 }) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getBandwidth(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBandwidth, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccountnet', {\n            address\n        }, 'post').then(({ freeNetUsed = 0, freeNetLimit = 0, NetUsed = 0, NetLimit = 0 }) => {\n            callback(null, (freeNetLimit - freeNetUsed) + (NetLimit - NetUsed));\n        }).catch(err => callback(err));\n    }\n\n    getTokensIssuedByAddress(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTokensIssuedByAddress, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyaccount', {\n            address\n        }, 'post').then(({ assetIssue = false }) => {\n            if(!assetIssue)\n                return callback(null, {});\n\n            const tokens = assetIssue.map(token => {\n                return this.parseToken(token);\n            }).reduce((tokens, token) => {\n                return tokens[token.name] = token, tokens;\n            }, {});\n\n            callback(null, tokens);\n        }).catch(err => callback(err));\n    }\n\n    getTokenFromID(tokenID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTokenFromID, tokenID);\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if(!token.name)\n                return callback('Token does not exist');\n                \n            callback(null, this.parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    listNodes(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listNodes);\n\n        this.tronWeb.fullNode.request('wallet/listnodes').then(({ nodes = [] }) => {\n            callback(null, nodes.map(({ address: { host, port } }) => (\n                `${this.tronWeb.toUtf8(host)}:${port}`\n            )));\n        }).catch(err => callback(err));\n    }\n\n    getBlockRange(start = 0, end = 30, callback = false) {\n        if(utils.isFunction(end)) {\n            callback = end;\n            end = 30;            \n        }\n\n        if(utils.isFunction(start)) {\n            callback = start;\n            start = 0;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlockRange, start, end);\n\n        if(!utils.isInteger(start) || start < 0)\n            return callback('Invalid start of range provided');\n\n        if(!utils.isInteger(end) || end <= start)\n            return callback('Invalid end of range provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbylimitnext', { \n            startNum: parseInt(start),\n            endNum: parseInt(end) + 1\n        }, 'post').then(({ block = [] }) => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    listSuperRepresentatives(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listSuperRepresentatives);\n\n        this.tronWeb.fullNode.request('wallet/listwitnesses').then(({ witnesses = [] }) => {\n            callback(null, witnesses);\n        }).catch(err => callback(err));\n    }\n\n    listTokens(limit = 0, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 0;  \n        }\n        \n        if(!callback)\n            return this.injectPromise(this.listTokens, limit, offset);\n\n        if(!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if(!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        if(!limit) {\n            return this.tronWeb.fullNode.request('wallet/getassetissuelist').then(({ assetIssue = [] }) => {\n                callback(null, assetIssue.map(token => this.parseToken(token)));\n            }).catch(err => callback(err));\n        }\n\n        this.tronWeb.fullNode.request('wallet/getpaginatedassetissuelist', {\n            offset: parseInt(offset),\n            limit: parseInt(limit)\n        }, 'post').then(({ assetIssue = [] }) => {\n            callback(null, assetIssue.map(token => this.parseToken(token)));\n        }).catch(err => callback(err));\n    }\n\n    timeUntilNextVoteCycle(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.timeUntilNextVoteCycle);\n\n        this.tronWeb.fullNode.request('wallet/getnextmaintenancetime').then(({ num = -1 }) => {\n            if(num == -1)\n                return callback('Failed to get time until next vote cycle');\n\n            callback(null, Math.floor(num / 1000));\n        }).catch(err => callback(err));\n    }\n\n    getContract(contractAddress, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getContract, contractAddress);\n\n        if(!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        contractAddress = this.tronWeb.address.toHex(contractAddress);\n\n        this.tronWeb.fullNode.request('wallet/getcontract', {\n            value: contractAddress\n        }).then(contract => {\n            if(contract.Error)\n                return callback('Contract does not exist');\n\n            callback(null, contract);\n        }).catch(err => callback(err));\n    }\n\n    sign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sign, transaction, privateKey);\n\n        if(!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if(transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            const address = this.tronWeb.address.toHex(\n                this.tronWeb.address.fromPrivateKey(privateKey)\n            ).toLowerCase();\n\n            if(address !== transaction.raw_data.contract[0].parameter.value.owner_address.toLowerCase())\n                return callback('Private key does not match address in transaction');\n\n            return callback(null,\n                utils.crypto.signTransaction(privateKey, transaction)\n            );\n        } catch(ex) {\n            callback(ex);\n        }\n    }\n\n    sendRawTransaction(signedTransaction = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.sendRawTransaction, signedTransaction);\n\n        if(!utils.isObject(signedTransaction))\n            return callback('Invalid transaction provided');\n\n        if(!signedTransaction.signature || !utils.isArray(signedTransaction.signature))\n            return callback('Transaction is not signed');\n\n        this.tronWeb.fullNode.request(\n            'wallet/broadcasttransaction', \n            signedTransaction,\n            'post'\n        ).then(result => {\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    async sendTransaction(to = false, amount = false, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sendTransaction, to, amount, privateKey);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        try {\n            const address = this.tronWeb.address.fromPrivateKey(privateKey);\n            const transaction = await this.tronWeb.transactionBuilder.sendTrx(to, amount, address);\n            const signedTransaction = await this.sign(transaction, privateKey);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    async sendToken(to = false, amount = false, tokenID = false, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, privateKey);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isString(tokenID))\n            return callback('Invalid token ID provided');\n\n        try {\n            const address = this.tronWeb.address.fromPrivateKey(privateKey);\n            const transaction = await this.tronWeb.transactionBuilder.sendToken(to, amount, tokenID, address);\n            const signedTransaction = await this.sign(transaction, privateKey);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    send(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    sendTrx(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    broadcast(...args) {\n        return this.sendRawTransaction(...args);\n    }\n\n    signTransaction(...args) {\n        return this.sign(...args);\n    }\n};","export default class Witness {\n    \n}","import Ethers from 'ethers';\nimport utils from 'utils';\n\nconst abiCoder = new Ethers.utils.AbiCoder();\n\nconst getFunctionSelector = abi => {\n    return abi.name + '(' + getParamTypes(abi.inputs || []).join(',') + ')';\n}\n\nconst getParamTypes = params => {\n    return params.map(({ type }) => type);\n}\n\nconst decodeOutput = (abi, output) => {\n    const names = abi.map(({ name }) => name).filter(name => !!name);\n    const types = abi.map(({ type }) => type);\n\n    return abiCoder.decode(types, output).reduce((obj, arg, index) => {\n        if(types[index] == 'address')\n            arg = '41' + arg.substr(2).toLowerCase();\n\n        if(names.length)\n            obj[names[index]] = arg;\n        else obj.push(arg);\n\n        return obj;\n    }, names.length ? {} : []);\n};\n\nexport default class Method {\n    constructor(contract, abi) {\n        this.tronWeb = contract.tronWeb;\n        this.contract = contract;\n\n        this.abi = abi;        \n        this.name = abi.name;\n\n        this.inputs = abi.inputs || [];\n        this.outputs = abi.outputs || [];\n\n        this.signature = this.tronWeb.sha3(abi.name).slice(0, 8);\n        this.functionSelector = getFunctionSelector(abi);\n        this.injectPromise = utils.promiseInjector(this);\n\n        this.defaultOptions = {\n            feeLimit: 1000000000,\n            callValue: 0,\n            from: this.tronWeb.defaultAddress.hex, // Only used for send()\n            shouldPollResponse: true // Only used for sign()\n        };\n    }\n\n    onMethod(...args) {\n        const types = getParamTypes(this.inputs);\n\n        args.forEach((arg, index) => {\n            if(types[index] == 'address')\n                args[index] = this.tronWeb.address.toHex(arg).replace(/^(41)/, '0x')\n        });\n\n        return {\n            call: (...methodArgs) => this._call(types, args, ...methodArgs),\n            send: (...methodArgs) => this._send(types, args, ...methodArgs),\n            watch: (...methodArgs) => this._watch(...methodArgs)\n        }\n    }\n\n    async _call(types, args, options = {}, callback = false) {                \n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n            \n        if(!callback)\n            return this.injectPromise(this._call, types, args, options);\n\n        if(types.length !== args.length)\n            return callback('Invalid argument count provided');\n\n        if(!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if(!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const { stateMutability } = this.abi;\n\n        if(![ 'pure', 'view' ].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use send()`);\n\n        options = { ...this.defaultOptions, ...options };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        this.tronWeb.transactionBuilder.triggerSmartContract(\n            this.contract.address,\n            this.functionSelector,\n            options.feeLimit,\n            options.callValue,\n            parameters,\n            this.tronWeb.address.toHex(options.from),\n        (err, transaction) => {\n            if(err) \n                return callback(err);\n\n            if(!utils.hasProperty(transaction, 'constant_result'))\n                return callback('Failed to execute');\n\n            try {\n                let output = decodeOutput(this.outputs, '0x' + transaction.constant_result[0]);\n                \n                if(output.length === 1)\n                    output = output[0];\n\n                return callback(null, output);\n            } catch(ex) {\n                return callback(ex);\n            }\n        });\n    }\n\n    async _send(types, args, options = {}, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n            \n        if(!callback)\n            return this.injectPromise(this._send, types, args, options, privateKey);\n\n        if(types.length !== args.length)\n            throw new Error('Invalid argument count provided');\n\n        if(!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if(!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        if(!privateKey || !utils.isString(privateKey))\n            return callback('Invalid private key provided');\n\n        const { stateMutability } = this.abi;\n\n        if([ 'pure', 'view' ].includes(stateMutability.toLowerCase()))\n                return callback(`Methods with state mutability \"${stateMutability}\" must use call()`);\n\n        options = { ...this.defaultOptions, ...options };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        try {\n            const address = this.tronWeb.address.fromPrivateKey(privateKey);\n            const transaction = await this.tronWeb.transactionBuilder.triggerSmartContract(\n                this.contract.address,\n                this.functionSelector,\n                options.feeLimit,\n                options.callValue,\n                parameters,\n                this.tronWeb.address.toHex(address)\n            );\n\n            if(!transaction.result || !transaction.result.result)\n                return callback('Unknown error: ' + JSON.stringify(transaction, null, 2));\n\n            const signedTransaction = await this.tronWeb.trx.sign(transaction.transaction, privateKey);\n            const broadcast = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if(!broadcast.result)\n                return callback('Unknown error: ' + JSON.stringify(broadcast, null, 2));\n\n            if(!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if(index == 20) {\n                    return callback({ \n                        error: 'Cannot find result in solidity node', \n                        transaction: signedTransaction\n                    });\n                }\n                \n                const output = await this.tronWeb.trx.getTransactionInfo(signedTransaction.txID);\n\n                if(!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if(output.result && output.result == 'FAILED') {\n                    return callback({\n                        error: this.tronWeb.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if(!utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                let decoded = decodeOutput(this.outputs, '0x' + output.contractResult[0]);\n\n                if(decoded.length === 1)\n                    decoded = decoded[0];\n\n                return callback(null, decoded);\n            }\n\n            checkResult();                    \n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    async _watch(callback = false) {\n        if(!utils.isFunction(callback))\n            throw new Error('Expected callback to be provided');\n        \n        if(!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if(this.abi.type.toLowerCase() !== 'event')\n            return callback('Invalid method type for event watching');\n\n        if(!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        let listener = false;\n        let lastBlock = false;\n\n        const getEvents = async () => {\n            try {\n                const events = await this.tronWeb.getEventResult(this.contract.address, this.name);\n                const [ latestEvent ] = events.sort((a, b) => b.block - a.block);\n                const newEvents = events.filter((event, index) => {\n                    const duplicate = events.slice(0, index).some(priorEvent => (\n                        JSON.stringify(priorEvent) == JSON.stringify(event)\n                    ));\n\n                    if(duplicate)\n                        return false;\n\n                    if(!lastBlock)\n                        return true;            \n\n                    return event.block > lastBlock;\n                });\n\n                if(latestEvent)\n                    lastBlock = latestEvent.block;\n\n                return newEvents;\n            } catch(ex) {\n                return Promise.reject(ex);\n            }\n        };\n\n        const bindListener = () => {\n            if(listener)\n                clearInterval(listener);\n\n            listener = setInterval(() => {\n                getEvents().then(events => events.forEach(event => {\n                    callback(null, utils.parseEvent(event, this.abi))\n                })).catch(err => callback(err));\n            }, 3000);\n        };\n\n        await getEvents();\n        bindListener();\n\n        return {\n            start: bindListener(),\n            stop: () => {\n                if(!listener)\n                    return;\n\n                clearInterval(listener);\n                listener = false;\n            }\n        }\n    }\n}","import TronWeb from 'index';\nimport utils from 'utils';\nimport Method from './method';\n\nexport default class Contract {\n    constructor(tronWeb = false, abi = [], address = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n\n        this.address = address;\n        this.abi = abi;\n\n        this.eventListener = false;\n        this.bytecode = false;        \n        this.deployed = false;\n        this.lastBlock = false;  \n\n        this.methods = {};\n        this.props = [];\n\n        if(this.tronWeb.isAddress(address))\n            this.deployed = true;\n        else this.address = false;\n\n        this.loadAbi(abi);\n    }\n\n    async _getEvents() {\n        const events = await this.tronWeb.getEventResult(this.address);\n        const [ latestEvent ] = events.sort((a, b) => b.block - a.block);\n        const newEvents = events.filter((event, index) => {\n            const duplicate = events.slice(0, index).some(priorEvent => (\n                JSON.stringify(priorEvent) == JSON.stringify(event)\n            ));\n\n            if(duplicate)\n                return false;\n            \n            if(!this.lastBlock)\n                return true;            \n\n            return event.block > this.lastBlock;\n        });\n\n        if(latestEvent)\n            this.lastBlock = latestEvent.block;\n\n        return newEvents;\n    }\n\n    async _startEventListener(callback) {\n        if(this.eventListener)\n            clearInterval(this.eventListener);\n\n        if(!this.tronWeb.eventServer)\n            throw new Error('Event server is not configured');\n\n        if(!this.address)\n            throw new Error('Contract is not configured with an address');\n\n        this.eventCallback = callback;\n        await this._getEvents();\n\n        this.eventListener = setInterval(() => {\n            this._getEvents().then(newEvents => newEvents.forEach(event => {\n                this.eventCallback && this.eventCallback(event)\n            })).catch(err => {\n                console.error('Failed to get event list', err);\n            });\n        }, 3000);\n    }\n\n    _stopEventListener() {\n        if(!this.eventListener)\n            return;\n\n        clearInterval(this.eventListener);\n        this.eventListener = false;\n        this.eventCallback = false;\n    }\n\n    hasProperty(property) {\n        return this.hasOwnProperty(property) || this.__proto__.hasOwnProperty(property);\n    }\n\n    loadAbi(abi) {\n        this.abi = abi;\n        this.methods = {};\n\n        this.props.forEach(prop => delete this[prop]);\n\n        abi.forEach(func => {\n            const method = new Method(this, func);\n            const methodCall = method.onMethod.bind(method);\n\n            const {\n                name,\n                functionSelector,\n                signature\n            } = method;\n\n            this.methods[name] = methodCall;\n            this.methods[functionSelector] = methodCall;\n            this.methods[signature] = methodCall;\n\n            if(!this.hasProperty(name)) {\n                this[name] = methodCall;\n                this.props.push(name);\n            }\n\n            if(!this.hasProperty(functionSelector)) {\n                this[functionSelector] = methodCall;\n                this.props.push(functionSelector);\n            }\n\n            if(!this.hasProperty(signature)) {\n                this[signature] = methodCall;\n                this.props.push(signature);\n            }\n        });\n    }\n\n    async new(options, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.new, options, privateKey);\n\n        try {\n            const address = this.tronWeb.address.fromPrivateKey(privateKey);\n            const transaction = await this.tronWeb.transactionBuilder.createSmartContract(options, address);\n            const signedTransaction = await this.tronWeb.trx.sign(transaction, privateKey);\n            const contract = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if(!contract.result)\n                return callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            return this.at(signedTransaction.contract_address, callback);\n        } catch(ex) {\n            return callback(ex);\n        }        \n    }\n\n    async at(contractAddress, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.at, contractAddress);\n\n        try {\n            const contract = await this.tronWeb.trx.getContract(contractAddress);\n\n            if(!contract.contract_address)\n                callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            this.address = contract.contract_address;\n            this.bytecode = contract.bytecode;\n            this.deployed = true;\n\n            this.loadAbi(contract.abi.entrys);\n\n            callback(null, this);\n        } catch(ex) {\n            if(ex.toString().includes('does not exist'))\n                return callback('Contract has not been deployed on the network');\n\n            return callback(ex);\n        }        \n    }\n\n    events(callback = false) {\n        if(!utils.isFunction(callback))\n            throw new Error('Callback function expected');\n\n        const self = this;\n\n        return {\n            start(startCallback = false) {\n                if(!startCallback) {\n                    self._startEventListener(callback);\n                    return this;\n                }\n\n                self._startEventListener(callback).then(() => {\n                    startCallback();\n                }).catch(err => {\n                    startCallback(err)\n                });\n\n                return this;\n            },\n            stop() {\n                self._stopEventListener();\n            }\n        };\n    }\n}","import providers from 'lib/providers';\nimport utils from 'utils';\nimport axios from 'axios';\nimport BigNumber from 'bignumber.js';\nimport { sha3_256 } from 'js-sha3';\n\nimport TransactionBuilder from 'lib/transactionBuilder';\nimport Trx from 'lib/trx';\nimport Witness from 'lib/witness';\nimport Contract from 'lib/contract';\n\nexport default class TronWeb {\n    static providers = providers;\n    static BigNumber = BigNumber;\n    \n    constructor(fullNode, solidityNode, eventServer = false, privateKey = false) {\n        if(utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if(utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n        this.setEventServer(eventServer);\n        \n        this.providers = providers;\n        this.BigNumber = BigNumber;\n\n        this.defaultBlock = false;\n        this.defaultPrivateKey = false;\n        this.defaultAddress = {\n            hex: false,\n            base58: false\n        };\n        \n        [\n            'sha3', 'toHex', 'toUtf8', 'fromUtf8',\n            'toAscii', 'fromAscii', 'toDecimal', 'fromDecimal',\n            'toSun', 'fromSun', 'toBigNumber', 'isAddress',\n            'compile', 'createAccount', 'address'\n        ].forEach(key => {\n            this[key] = TronWeb[key];\n        });\n\n        if(privateKey)\n            this.setPrivateKey(privateKey);\n\n        this.transactionBuilder = new TransactionBuilder(this);\n        this.trx = new Trx(this);\n        this.witness = new Witness(this);\n\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    setDefaultBlock(blockID = false) {\n        if(blockID === false || blockID == 'latest' || blockID == 'earliest')\n            return this.defaultBlock = blockID;\n\n        if(!utils.isInteger(blockID) || !blockID)\n            throw new Error('Invalid block ID provided');\n\n        this.defaultBlock = +blockID;\n    }\n\n    setPrivateKey(privateKey) {\n        // Set address first as it clears the private key\n        this.setAddress(\n            this.address.fromPrivateKey(privateKey)\n        );\n\n        // TODO: Validate private key\n        this.defaultPrivateKey = privateKey;        \n    }\n\n    setAddress(address) {\n        if(!this.isAddress(address))\n            throw new Error('Invalid address provided');\n\n        const hex = this.address.toHex(address);\n        const base58 = this.address.fromHex(address);\n\n        if(this.defaultPrivateKey && this.address.fromPrivateKey !== hex)\n           this.defaultPrivateKey = false;\n\n        this.defaultAddress = {\n            hex,\n            base58\n        };\n    }\n\n    isValidProvider(provider) {\n        return Object.values(providers).some(knownProvider => provider instanceof knownProvider);\n    }\n\n    isEventServerConnected() {\n        if(!this.eventServer)\n            return false;\n\n        return axios.get(this.eventServer).then(({ data }) => {\n            return utils.hasProperty(data, '_links');\n        }).catch(() => false);\n    }\n\n    setFullNode(fullNode) {\n        if(!this.isValidProvider(fullNode))\n            throw new Error('Invalid full node provided');\n\n        this.fullNode = fullNode;\n        this.fullNode.setStatusPage('wallet/getnowblock');\n    }\n\n    setSolidityNode(solidityNode) {\n        if(!this.isValidProvider(solidityNode))\n            throw new Error('Invalid solidity node provided');\n\n        this.solidityNode = solidityNode;\n        this.solidityNode.setStatusPage('walletsolidity/getnowblock');\n    }\n\n    setEventServer(eventServer = false) {\n        if(eventServer !== false && !utils.isValidURL(eventServer))\n            throw new Error('Invalid URL provided for event server');\n\n        this.eventServer = eventServer;\n    }\n\n    currentProviders() {\n        return {\n            fullNode: this.fullNode,\n            solidityNode: this.solidityNode,\n            eventServer: this.eventServer\n        };\n    }\n\n    currentProvider() {\n        return this.currentProviders();\n    }\n\n    getEventResult(contractAddress = false, eventName = false, blockNumber = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getEventResult, contractAddress, eventName, blockNumber);\n\n        if(!this.eventServer)\n            callback('No event server configured');\n\n        const routeParams = [];\n\n        if(!this.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if(eventName && !contractAddress)\n            return callback('Usage of event name filtering requires a contract address');\n        \n        if(blockNumber && !eventName)\n            return callback('Usage of block number filtering requires an event name');\n\n        if(contractAddress)\n            routeParams.push(this.address.fromHex(contractAddress));\n\n        if(eventName)\n            routeParams.push(eventName);\n\n        if(blockNumber)\n            routeParams.push(blockNumber);\n\n        return axios(`${this.eventServer}/event/contract/${routeParams.join('/')}`).then(({ data = false }) => {\n            if(!data)\n                return callback('Unknown error occurred');\n\n            if(!utils.isArray(data))\n                return callback(data);\n\n            return callback(null, \n                data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback(err.response.data || err)); \n    }\n\n    getEventByTransacionID(transactionID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getEventByTransacionID, transactionID);\n\n        if(!this.eventServer)\n            callback('No event server configured');\n\n        return axios(`${this.eventServer}/event/transaction/${transactionID}`).then(({ data = false }) => {\n            if(!data)\n                return callback('Unknown error occurred');\n\n            if(!utils.isArray(data))\n                return callback(data);\n\n            return callback(null, \n                data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback(err.response.data || err));\n    }\n\n    contract(abi = [], address = false) {\n        return new Contract(this, abi, address);\n    }\n\n    static get address() {\n        return {\n            fromHex(address) {\n                if(!utils.isHex(address))\n                    return address;\n\n                return utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address)\n                );\n            },\n            toHex(address) {\n                if(utils.isHex(address))\n                    return address.toLowerCase();\n\n                return utils.code.byteArray2hexStr(\n                    utils.crypto.decodeBase58Address(address)\n                ).toLowerCase();\n            },\n            fromPrivateKey(privateKey) {\n                try {\n                    return utils.crypto.pkToAddress(privateKey);\n                } catch { return false; }\n            }\n        }\n    }\n\n    static sha3(string) {\n        return sha3_256(string);\n    }\n\n    static toHex(val) {\n        if(utils.isBoolean(val))\n            return TronWeb.fromDecimal(+val);\n\n        if(utils.isBigNumber(val))\n            return TronWeb.fromDecimal(val);\n\n        if(typeof val === 'object')\n            return TronWeb.fromUtf8(JSON.stringify(val));\n\n        if(utils.isString(val)) {\n            if(val.indexOf('-0x') === 0)\n                return TronWeb.fromDecimal(val);\n\n            if(val.indexOf('0x') === 0)\n                return val;\n\n            if(!isFinite(val))\n                return TronWeb.fromUtf8(val);\n        }\n\n        return TronWeb.fromDecimal(val);\n    }\n\n    static toUtf8(hex) {\n        return Buffer.from(hex, 'hex').toString('utf8');\n    }\n\n    static fromUtf8(string) {\n        return Buffer.from(string, 'utf8').toString('hex');\n    }\n\n    static toAscii(hex) {\n        return Buffer.from(hex, 'hex').toString('ascii');\n    }\n\n    static fromAscii(string, padding) {\n        return Buffer.from(string, 'ascii').toString('hex').padEnd(padding, '0');\n    }\n\n    static toDecimal(value) {\n        return TronWeb.toBigNumber(value).toNumber();\n    }\n\n    static fromDecimal(value) {\n        const number = TronWeb.toBigNumber(value);\n        const result = number.toString(16);\n\n        return number.lessThan(0) ? '-0x' + result.substr(1) : '0x' + result;\n    }\n\n    static fromSun(sun) {\n        const trx = TronWeb.toBigNumber(trx).div(1_000_000);        \n        return utils.isBigNumber(sun) ? trx : trx.toString(10);\n    }\n\n    static toSun(trx) {\n        const sun = TronWeb.toBigNumber(trx).times(1_000_000);        \n        return utils.isBigNumber(trx) ? sun : sun.toString(10);\n    }\n\n    static toBigNumber(amount = 0) {\n        if(utils.isBigNumber(amount))\n            return amount;\n\n        if(utils.isString(amount) && (amount.indexOf('0x') === 0 || amount.indexOf('-0x') === 0))\n            return new BigNumber(amount.replace('0x', ''), 16);\n\n        return new BigNumber(amount.toString(10), 10);\n    }\n\n    static isAddress(address = false) {\n        if(!utils.isString(address))\n            return false;\n\n        // Convert HEX to Base58\n        if(address.length === 42) {\n            return TronWeb.isAddress(\n                utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address)\n                )\n            );\n        }\n\n        return utils.crypto.isAddressValid(address);\n    }\n\n    // TODO\n    static compile(solditySource) {\n\n    }\n\n    static async createAccount(callback = false) {\n        const account = utils.accounts.generateAccount();\n\n        if(callback)\n            callback(null, account);\n\n        return account;\n    }\n\n    async isConnected(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.isConnected);\n\n        callback(null, {\n            fullNode: await this.fullNode.isConnected(),\n            solidityNode: await this.solidityNode.isConnected(),\n            eventServer: await this.isEventServerConnected()\n        });\n    }\n};"],"sourceRoot":""}