{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@babel/runtime/helpers/asyncToGenerator\"","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///external \"@babel/runtime/helpers/objectSpread\"","webpack:///external \"@babel/runtime/helpers/assertThisInitialized\"","webpack:///external \"@babel/runtime/helpers/toConsumableArray\"","webpack:///external \"axios\"","webpack:///external \"bignumber.js\"","webpack:///external \"@babel/runtime/helpers/slicedToArray\"","webpack:///external \"ethers\"","webpack:///external \"js-sha3\"","webpack:///external \"elliptic\"","webpack:///external \"@babel/runtime/helpers/defineProperty\"","webpack:///external \"@babel/runtime/helpers/typeof\"","webpack:///external \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack:///external \"@babel/runtime/helpers/getPrototypeOf\"","webpack:///external \"@babel/runtime/helpers/inherits\"","webpack:///external \"jssha\"","webpack:///external \"validator\"","webpack:///external \"eventemitter3\"","webpack:///./src/utils/base64.js","webpack:///./src/utils/bytes.js","webpack:///./src/utils/address.js","webpack:///./src/utils/code.js","webpack:///./src/utils/base58.js","webpack:///./src/utils/crypto.js","webpack:///./src/utils/accounts.js","webpack:///./src/utils/abi.js","webpack:///./src/utils/index.js","webpack:///./src/lib/providers/index.js","webpack:///./src/lib/providers/HttpProvider.js","webpack:///./src/lib/transactionBuilder.js","webpack:///./src/lib/trx.js","webpack:///./src/lib/witness.js","webpack:///./src/lib/contract/method.js","webpack:///./src/lib/contract/index.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","Base64","_this","this","_keyStr","encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","length","charCodeAt","isNaN","charAt","encodeIgnoreUtf8","inputBytes","decode","replace","indexOf","String","fromCharCode","_utf8_decode","decodeToByteArray","_out2ByteArray","utftext","byteArray","Array","c1","c2","_utf8_encode","string","c3","byte2hexStr","byte","str","bytesToString","arr","one","toString","v","match","bytesLength","store","slice","st","parseInt","hextoString","hex","split","out","tmp","concat","base64DecodeFromString","string64","byteArray2hexStr","ADDRESS_SIZE","ADDRESS_PREFIX","ADDRESS_PREFIX_BYTE","bin2String","array","apply","toConsumableArray_default","arrayEquals","array1","array2","stringToBytes","len","bytes","push","hexChar2byte","isHexChar","hexStr2byteArray","j","k","reduce","base64EncodeToString","strToDate","tempStrs","dateStrs","year","month","day","timeStrs","hour","minute","second","Date","isNumber","getStringType","ALPHABET","ALPHABET_MAP","BASE","encode58","buffer","digits","carry","reverse","map","digit","join","decode58","Error","getBase58CheckAddress","addressBytes","checkSum","SHA256","decodeBase58Address","base58Sting","address","offset","checkSum1","signTransaction","priKeyBytes","transaction","signature","ECKeySign","txID","arrayToBase64String","a","btoa","signBytes","privateKey","contents","getRowBytesFromTransactionBase64","base64Data","bytesDecode","proto","protocol","Transaction","deserializeBinary","getRawData","serializeBinary","genPriKey","priKeyHex","EC","genKeyPair","getPrivate","computeAddress","pubBytes","hash","keccak256","substring","getAddressFromPriKey","getPubKeyFromPriKey","decode58Check","addressStr","decodeCheck","decodeData","hash1","isAddressValid","base58Str","getBase58CheckAddressFromPriKeyBase64String","priKeyBase64String","getHexStrAddressFromPriKeyBase64String","getAddressFromPriKeyBase64String","pubkey","keyFromPrivate","getPublic","x","y","xHex","yHex","hashBytes","sign","id","recoveryParam","rHex","sHex","msgBytes","shaObj","jsSHA","msgHex","update","getHash","passwordToAddress","password","pkToAddress","generateAccount","pubKeyBytes","publicKey","base58","abiCoder","Ethers","utils","AbiCoder","decodeParams","names","types","ignoreMethodHash","obj","arg","index","substr","toLowerCase","encodeParams","values","TronWeb","toHex","isValidURL","url","validator","isURL","protocols","isObject","isArray","isJson","JSON","parse","ex","isBoolean","bool","isBigNumber","number","BigNumber","constructor","isString","isFunction","isHex","isInteger","Number","hasProperty","hasProperties","_len","arguments","properties","_key","includes","injectPromise","func","_len2","args","_key2","Promise","resolve","reject","err","res","promiseInjector","scope","_this2","_len3","_key3","mapEvent","event","block","block_number","timestamp","block_timestamp","contract","contract_address","event_name","transaction_id","result","parseEvent","_ref","abi","inputs","type","_abi$index","src_utils","objectSpread_default","code","accounts","crypto","providers","HttpProvider","host","timeout","undefined","user","headers","statusPage","classCallCheck_default","instance","axios","baseURL","auth","request","then","data","catch","payload","method","params","TransactionBuilder","tronWeb","to","amount","from","defaultAddress","callback","isAddress","fullNode","to_address","owner_address","sendTrx","tokenID","fromUtf8","asset_name","sendToken","issuerAddress","buyer","purchaseToken","duration","resource","frozen_balance","frozen_duration","freezeBalance","unfreezeBalance","withdrawBlockRewards","applyForSR","votes","voterAddress","vote","keys","invalid","entries","_ref2","slicedToArray_default","srAddress","voteCount","vote_address","vote_count","options","createSmartContract","_options$abi","_options$bytecode","bytecode","_options$feeLimit","feeLimit","_options$callValue","callValue","_options$userFeePerce","userFeePercentage","_options$parameters","parameters","_options$name","_unused","console","log","payable","some","constructorParams","find","it","fee_limit","call_value","consume_user_resource_percent","stringify","parameter","contractAddress","functionSelector","triggerSmartContract","_parameters$i","function_selector","message","toUtf8","_this3","createToken","_options$name2","_options$abbreviation","abbreviation","_options$description","description","_options$url","_options$totalSupply","totalSupply","_options$trxRatio","trxRatio","_options$tokenRatio","tokenRatio","_options$saleStart","saleStart","now","_options$saleEnd","saleEnd","_options$freeBandwidt","freeBandwidth","_options$freeBandwidt2","freeBandwidthLimit","_options$frozenAmount","frozenAmount","_options$frozenDurati","frozenDuration","abbr","total_supply","trx_num","num","start_time","end_time","free_asset_net_limit","public_free_asset_net_limit","frozen_supply","frozen_amount","frozen_days","_this4","updateToken","_options$description2","_options$url2","_options$freeBandwidt3","_options$freeBandwidt4","new_limit","new_public_limit","_this5","createProposal","_this6","proposalID","proposal_id","deleteProposal","_this7","hasApproval","is_add_approval","isApproval","voteProposal","_this8","exchangeID","tokenName","tokenAmount","ownerAddress","exchange_id","token_id","fromAscii","quant","injectExchangeTokens","_this9","withdrawExchangeTokens","_this10","tokenAmountSold","tokenAmountExpected","expected","tradeExchangeTokens","Trx","token","getCurrentBlock","defaultBlock","getBlockByHash","getBlockByNumber","getBlock","blockHash","blockID","getBlockTransactionCount","_ref$transactions","transactions","_ref2$transactions","getTransactionFromBlock","transactionID","getTransaction","getTransactionInfo","solidityNode","limit","getTransactionsRelated","getTransactionsToAddress","getTransactionsFromAddress","direction","tx","sort","b","raw_data","_context","t0","account","_ref3","getAccount","getBalance","_ref4","_ref4$balance","balance","_ref5","_ref5$freeNetUsed","freeNetUsed","_ref5$freeNetLimit","freeNetLimit","_ref5$NetUsed","NetUsed","_ref5$NetLimit","NetLimit","getBandwidth","_ref6","_ref6$assetIssue","assetIssue","tokens","parseToken","getTokensIssuedByAddress","getTokenFromID","listNodes","_ref7","_ref7$nodes","nodes","_ref8","_ref8$address","port","start","end","startNum","endNum","_ref9","_ref9$block","getBlockRange","listSuperRepresentatives","_ref10","_ref10$witnesses","witnesses","_ref12","_ref12$assetIssue","_ref11","_ref11$assetIssue","listTokens","timeUntilNextVoteCycle","_ref13","_ref13$num","Math","floor","getContract","defaultPrivateKey","fromPrivateKey","_context2","signedTransaction","sendRawTransaction","sendTransaction","transactionBuilder","_context3","_context4","proposal","getProposal","listProposals","_ref14","_ref14$proposals","proposals","getChainParameters","_ref15","_ref15$chainParameter","chainParameter","resources","getAccountResources","exchange","getExchangeByID","listExchanges","_ref16","_ref16$exchanges","exchanges","firstTokenID","firstTokenBalance","secondTokenID","secondTokenBalance","first_token_id","first_token_balance","second_token_id","second_token_balance","_ref17","_ref17$exchanges","Witness","getFunctionSelector","getParamTypes","decodeOutput","filter","Method","outputs","sha3","defaultOptions","shouldPollResponse","forEach","methodArgs","_call","send","_send","watch","_watch","deployed","stateMutability","constant_result","trx","broadcast","checkResult","_callee2","decoded","_args2","regenerator_default","wrap","prev","next","abrupt","error","sent","setTimeout","resMessage","contractResult","stop","eventServer","listener","lastBlock","sinceTimestamp","getTime","getEvents","_callee4","events","_events$sort","_events$sort2","latestEvent","newEvents","getEventResult","priorEvent","bindListener","clearInterval","setInterval","Contract","eventListener","methods","props","loadAbi","eventCallback","_getEvents","__proto__","prop","methodCall","onMethod","new","at","entrys","self","startCallback","_startEventListener","_stopEventListener","possibleConstructorReturn_default","getPrototypeOf_default","setFullNode","setSolidityNode","setEventServer","setPrivateKey","assertThisInitialized_default","witness","abs","setAddress","emit","fromHex","provider","knownProvider","isValidProvider","setStatusPage","currentProviders","eventName","blockNumber","routeParams","_ref2$data","response","_ref3$data","getEventByTransacionID","isConnected","isEventServerConnected","val","fromDecimal","typeof_default","test","isFinite","Buffer","padding","padEnd","toBigNumber","toNumber","isLessThan","sun","div","times","solditySource","_unused2","EventEmitter"],"mappings":"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","file":"TronWeb.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 21);\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","module.exports = require(\"@babel/runtime/helpers/objectSpread\");","module.exports = require(\"@babel/runtime/helpers/assertThisInitialized\");","module.exports = require(\"@babel/runtime/helpers/toConsumableArray\");","module.exports = require(\"axios\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"@babel/runtime/helpers/slicedToArray\");","module.exports = require(\"ethers\");","module.exports = require(\"js-sha3\");","module.exports = require(\"elliptic\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"@babel/runtime/helpers/typeof\");","module.exports = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"@babel/runtime/helpers/getPrototypeOf\");","module.exports = require(\"@babel/runtime/helpers/inherits\");","module.exports = require(\"jssha\");","module.exports = require(\"validator\");","module.exports = require(\"eventemitter3\");","export function Base64() {\n    this._keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n    this.encode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n        \n        while (i < input.length) {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.encodeIgnoreUtf8 = inputBytes => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n        \n        while (i < inputBytes.length) {\n            chr1 = inputBytes[i++];\n            chr2 = inputBytes[i++];\n            chr3 = inputBytes[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.decode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = _keyStr.indexOf(input.charAt(i++));\n            enc2 = _keyStr.indexOf(input.charAt(i++));\n            enc3 = _keyStr.indexOf(input.charAt(i++));\n            enc4 = _keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n                \n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n        \n        return this._utf8_decode(output);\n    }\n\n    this.decodeToByteArray = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = _keyStr.indexOf(input.charAt(i++));\n            enc2 = _keyStr.indexOf(input.charAt(i++));\n            enc3 = _keyStr.indexOf(input.charAt(i++));\n            enc4 = _keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n        \n        return this._out2ByteArray(output);\n    }\n\n    this._out2ByteArray = utftext => {\n        const byteArray = new Array(utftext.length);\n\n        let i = 0;\n        let c = c1 = c2 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n            byteArray[i] = c;\n            i++;\n        }\n\n        return byteArray;\n    }\n\n    this._utf8_encode = string => {\n        string = string.replace(/\\r\\n/g, \"\\n\");\n        let utftext = \"\";\n\n        for (let n = 0; n < string.length; n++) {\n            const c = string.charCodeAt(n);\n\n            if (c < 128) {\n                utftext += String.fromCharCode(c);\n            } else if ((c > 127) && (c < 2048)) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            } else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n        }\n\n        return utftext;\n    }\n\n    this._utf8_decode = utftext => {\n        let string = \"\";\n        let i = 0;\n        let c = c1 = c2 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n\n            if (c < 128) {\n                string += String.fromCharCode(c);\n                i++;\n            } else if ((c > 191) && (c < 224)) {\n                c2 = utftext.charCodeAt(i + 1);\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                i += 2;\n            } else {\n                c2 = utftext.charCodeAt(i + 1);\n                c3 = utftext.charCodeAt(i + 2);\n\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\n                i += 3;\n            }\n        }\n\n        return string;\n    }\n}","import { Base64 } from './base64';\n\nexport function byte2hexStr(byte) {\n    const hexByteMap = '0123456789ABCDEF';\n\n    let str = '';\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n        \n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length === 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else {\n            str += String.fromCharCode(arr[i]);\n        }\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.split('');\n    let out = '';\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        let tmp = `0x${ arr[i * 2] }${ arr[i * 2 + 1] }`;\n        out += String.fromCharCode(tmp);\n    }\n\n    return out;\n}\n\nexport function base64DecodeFromString(string64) {\n    return new Base64().decodeToByteArray(string64);\n}\n\nexport function byteArray2hexStr(byteArray) {\n    let str = '';\n\n    for (let i = 0; i < (byteArray.length); i++)\n        str += byte2hexStr(byteArray[i]);\n        \n    return str;\n}","export const ADDRESS_SIZE = 34;\nexport const ADDRESS_PREFIX = \"41\";\nexport const ADDRESS_PREFIX_BYTE = 0x41;\n","import { Base64 } from './base64';\n\nexport function bin2String(array) {\n    return String.fromCharCode(...array);\n}\n\nexport function arrayEquals(array1, array2) {\n    if (array1.length != array2.length)\n        return false;\n        \n    let i;\n\n    for (i = 0; i < array1.length; i++) {\n        if (array1[i] != array2[i])\n            return false;\n    }\n\n    return true;\n}\n\nexport function stringToBytes(str) {\n    const bytes = new Array();\n    let len;\n    let c;\n\n    len = str.length;\n\n    for (let i = 0; i < len; i++) {\n        c = str.charCodeAt(i);\n\n        if (c >= 0x010000 && c <= 0x10FFFF) {\n            bytes.push(((c >> 18) & 0x07) | 0xF0);\n            bytes.push(((c >> 12) & 0x3F) | 0x80);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000800 && c <= 0x00FFFF) {\n            bytes.push(((c >> 12) & 0x0F) | 0xE0);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000080 && c <= 0x0007FF) {\n            bytes.push(((c >> 6) & 0x1F) | 0xC0);\n            bytes.push((c & 0x3F) | 0x80);\n        } else bytes.push(c & 0xFF);\n    }\n\n    return bytes;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n        \n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length == 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else str += String.fromCharCode(arr[i]);\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.split(\"\");\n    let out = \"\";\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        const tmp = `0x${arr[i * 2]}${arr[i * 2 + 1]}`;\n        const charValue = String.fromCharCode(tmp);\n\n        out += charValue;\n    }\n\n    return out\n}\n\nexport function hexChar2byte(c) {\n    let d = 0;\n\n    if (c >= 'A' && c <= 'F')\n        d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    else if (c >= 'a' && c <= 'f')\n        d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10;\n    else if (c >= '0' && c <= '9')\n        d = c.charCodeAt(0) - '0'.charCodeAt(0);\n        \n    return d;\n}\n\nexport function isHexChar(c) {\n    if ((c >= 'A' && c <= 'F') ||\n        (c >= 'a' && c <= 'f') ||\n        (c >= '0' && c <= '9')) {\n        return 1;\n    }\n\n    return 0;\n}\n\nexport function hexStr2byteArray(str) {\n    const byteArray = Array();\n    let d = 0;\n    let j = 0;\n    let k = 0;\n\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charAt(i);\n\n        if (isHexChar(c)) {\n            d <<= 4;\n            d += hexChar2byte(c);\n            j++;\n\n            if (0 === (j % 2)) {\n                byteArray[k++] = d;\n                d = 0;\n            }\n        }\n    }\n\n    return byteArray;\n}\n\nexport function byte2hexStr(byte) {\n    const hexByteMap = \"0123456789ABCDEF\";\n    let str = \"\";\n\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function byteArray2hexStr(byteArray) {\n    return byteArray.reduce((string, byte) => {\n        return string + byte2hexStr(byte);\n    }, '');\n}\n\nexport function base64DecodeFromString(string64) {\n    const b = new Base64();\n    const decodeBytes = b.decodeToByteArray(string64);\n\n    return decodeBytes;\n}\n\nexport function base64EncodeToString(bytes) {\n    const b = new Base64();\n    const string64 = b.encodeIgnoreUtf8(bytes);\n\n    return string64\n}\n\n//yyyy-MM-DD HH-mm-ss\nexport function strToDate(str) {\n    const tempStrs = str.split(\" \");\n    const dateStrs = tempStrs[0].split(\"-\");\n    const year = parseInt(dateStrs[0], 10);\n    const month = parseInt(dateStrs[1], 10) - 1;\n    const day = parseInt(dateStrs[2], 10);\n\n    if (tempStrs.length > 1) {\n        const timeStrs = tempStrs[1].split(\"-\");\n        const hour = parseInt(timeStrs[0], 10);\n        const minute = parseInt(timeStrs[1], 10) - 1;\n        const second = parseInt(timeStrs[2], 10);\n\n        return new Date(year, month, day, hour, minute, second);\n    }\n\n    return new Date(year, month, day);\n}\n\nexport function isNumber(c) {\n    if (c >= '0' && c <= '9')\n        return 1;\n        \n    return 0;\n}\n\n//return 1: address  --- 20Bytes HexString\n//return 2: blockNumber ------ Decimal number\n//return 3: assetName ------ String\n//return other: error\nexport function getStringType(str) {\n    if (null == str)\n        return -1;\n\n    if (typeof (str) != 'string')\n        return -1;\n\n    if (str.length == 0 || str == \"\")\n        return -1;\n\n    let i = 0;\n\n    if (str.length == 40) {\n        for (; i < 40; i++) {\n            var c = str.charAt(i);\n\n            if (!isHexChar(c))\n                break;\n        }\n    }\n\n    if (i == 40)\n        return 1; //40 Hex, Address\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (!isNumber(c))\n            break;\n    }\n\n    if (i == str.length)\n        return 2; //Alll Decimal number, BlockNumber\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (c > ' ')\n            return 3; //At least one visible character\n    }\n\n    return -1;\n}","const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nconst ALPHABET_MAP = {};\n\nfor (let i = 0; i < ALPHABET.length; i++)\n    ALPHABET_MAP[ALPHABET.charAt(i)] = i;\n\nconst BASE = 58;\n\nexport function encode58(buffer) {\n    if (buffer.length === 0) \n        return '';\n\n    let i;\n    let j;\n\n    const digits = [0];\n\n    for (i = 0; i < buffer.length; i++) {\n        for (j = 0; j < digits.length; j++) \n            digits[j] <<= 8;\n\n        digits[0] += buffer[i];\n        let carry = 0;\n\n        for (j = 0; j < digits.length; ++j) {\n            digits[j] += carry;\n            carry = (digits[j] / BASE) | 0;\n            digits[j] %= BASE\n        }\n\n        while (carry) {\n            digits.push(carry % BASE);\n            carry = (carry / BASE) | 0\n        }\n    }\n\n    for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++) \n        digits.push(0);\n\n    return digits.reverse().map(digit => ALPHABET[digit]).join('');\n}\n\nexport function decode58(string) {\n    if (string.length === 0) \n        return [];\n\n    let i;\n    let j;\n\n    const bytes = [0];\n\n    for (i = 0; i < string.length; i++) {\n        const c = string[i];\n\n        if (!(c in ALPHABET_MAP))\n            throw new Error('Non-base58 character');\n\n        for (j = 0; j < bytes.length; j++) \n            bytes[j] *= BASE;\n\n        bytes[0] += ALPHABET_MAP[c];\n        let carry = 0;\n\n        for (j = 0; j < bytes.length; ++j) {\n            bytes[j] += carry;\n            carry = bytes[j] >> 8;\n            bytes[j] &= 0xff;\n        }\n\n        while (carry) {\n            bytes.push(carry & 0xff);\n            carry >>= 8;\n        }\n    }\n\n    for (i = 0; string[i] === '1' && i < string.length - 1; i++)\n        bytes.push(0);\n\n    return bytes.reverse();\n}","import jsSHA from 'jssha';\n\nimport { ADDRESS_PREFIX, ADDRESS_PREFIX_BYTE } from './address';\nimport { base64EncodeToString } from './code';\nimport { base64DecodeFromString, hexStr2byteArray } from './code';\nimport { encode58, decode58 } from './base58';\nimport { keccak256 } from 'js-sha3';\nimport { ADDRESS_SIZE } from './address';\nimport { byte2hexStr, byteArray2hexStr } from './bytes';\nimport { ec as EC } from 'elliptic';\n\nexport function getBase58CheckAddress(addressBytes) {\n    const hash0 = SHA256(addressBytes);\n    const hash1 = SHA256(hash0);\n\n    let checkSum = hash1.slice(0, 4);\n    checkSum = addressBytes.concat(checkSum);\n\n    return encode58(checkSum);\n}\n\nexport function decodeBase58Address(base58Sting) {\n    if (typeof (base58Sting) != 'string')\n        return false;\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    let address = decode58(base58Sting);\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    const len = address.length;\n    const offset = len - 4;\n    const checkSum = address.slice(offset);\n\n    address = address.slice(0, offset);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return address;\n    }\n\n    return hexStr2byteArray('000000000000000000000000000000000000000000');\n}\n\nexport function signTransaction(priKeyBytes, transaction) {\n    if (typeof priKeyBytes === 'string')\n        priKeyBytes = hexStr2byteArray(priKeyBytes);\n\n    const txID = transaction.txID;\n    const signature = ECKeySign(hexStr2byteArray(txID), priKeyBytes);\n\n    transaction.signature = [ signature ];\n    return transaction;\n}\n\nexport function arrayToBase64String(a) {\n    return btoa(String.fromCharCode(...a));\n}\n\nexport function signBytes(privateKey, contents) {\n    if (typeof privateKey === 'string')\n        privateKey = hexStr2byteArray(privateKey);\n\n    const hashBytes = SHA256(contents);\n    const signBytes = ECKeySign(hashBytes, privateKey);\n\n    return signBytes;\n}\n\nexport function getRowBytesFromTransactionBase64(base64Data) {\n    const bytesDecode = base64DecodeFromString(base64Data);\n    const transaction = proto.protocol.Transaction.deserializeBinary(bytesDecode);\n    const raw = transaction.getRawData();\n\n    return raw.serializeBinary();\n}\n\nexport function genPriKey() {\n    const ec = new EC('secp256k1');\n    const key = ec.genKeyPair();\n    const priKey = key.getPrivate();\n\n    let priKeyHex = priKey.toString('hex');\n\n    while (priKeyHex.length < 64) {\n        priKeyHex = `0${priKeyHex}`;\n    }\n\n    return hexStr2byteArray(priKeyHex);\n}\n\nexport function computeAddress(pubBytes) {\n    if (pubBytes.length === 65)\n        pubBytes = pubBytes.slice(1);\n\n    const hash = keccak256(pubBytes).toString();\n    const addressHex = ADDRESS_PREFIX + hash.substring(24);\n\n    return hexStr2byteArray(addressHex);\n}\n\nexport function getAddressFromPriKey(priKeyBytes) {\n    let pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    return computeAddress(pubBytes);\n}\n\nexport function decode58Check(addressStr) {\n    const decodeCheck = decode58(addressStr);\n\n    if (decodeCheck.length <= 4)\n        return false;\n\n    const decodeData = decodeCheck.slice(0, decodeCheck.length - 4);\n    const hash0 = SHA256(decodeData);\n    const hash1 = SHA256(hash0);\n\n    if (hash1[0] === decodeCheck[decodeData.length] &&\n        hash1[1] === decodeCheck[decodeData.length + 1] &&\n        hash1[2] === decodeCheck[decodeData.length + 2] &&\n        hash1[3] === decodeCheck[decodeData.length + 3]) {\n        return decodeData;\n    }\n\n    return false;\n}\n\nexport function isAddressValid(base58Str) {\n    if (typeof (base58Str) !== 'string')\n        return false;\n        \n    if (base58Str.length !== ADDRESS_SIZE)\n        return false;\n\n    let address = decode58(base58Str);\n\n    if (address.length !== 25)\n        return false;\n        \n    if (address[0] !== ADDRESS_PREFIX_BYTE)\n        return false;\n        \n    const checkSum = address.slice(21);\n    address = address.slice(0, 21);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return true\n    }\n\n    return false;\n}\n\nexport function getBase58CheckAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n\n    return getBase58CheckAddress(addressBytes);\n}\n\nexport function getHexStrAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressHex = byteArray2hexStr(addressBytes);\n\n    return addressHex;\n}\n\nexport function getAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressBase64 = base64EncodeToString(addressBytes);\n\n    return addressBase64;\n}\n\nexport function getPubKeyFromPriKey(priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const pubkey = key.getPublic();\n    const x = pubkey.x;\n    const y = pubkey.y;\n\n    let xHex = x.toString('hex');\n\n    while (xHex.length < 64) {\n        xHex = `0${xHex}`;\n    }\n\n    let yHex = y.toString('hex');\n\n    while (yHex.length < 64) {\n        yHex = `0${yHex}`;\n    }\n\n    const pubkeyHex = `04${xHex}${yHex}`;\n    const pubkeyBytes = hexStr2byteArray(pubkeyHex);\n\n    return pubkeyBytes;\n}\n\nexport function ECKeySign(hashBytes, priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const signature = key.sign(hashBytes);\n    const r = signature.r;\n    const s = signature.s;\n    const id = signature.recoveryParam;\n\n    let rHex = r.toString('hex');\n\n    while (rHex.length < 64) {\n        rHex = `0${rHex}`;\n    }\n\n    let sHex = s.toString('hex');\n\n    while (sHex.length < 64) {\n        sHex = `0${sHex}`;\n    }\n\n    const idHex = byte2hexStr(id);\n    const signHex = rHex + sHex + idHex;\n\n    return signHex;\n}\n\nexport function SHA256(msgBytes) {\n    const shaObj = new jsSHA('SHA-256', 'HEX');\n    const msgHex = byteArray2hexStr(msgBytes);\n\n    shaObj.update(msgHex);\n    const hashHex = shaObj.getHash('HEX');\n\n    return hexStr2byteArray(hashHex);\n}\n\nexport function passwordToAddress(password) {\n    const com_priKeyBytes = base64DecodeFromString(password);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n\nexport function pkToAddress(privateKey) {\n    const com_priKeyBytes = hexStr2byteArray(privateKey);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}","import { byteArray2hexStr } from './bytes';\nimport { \n    getBase58CheckAddress,\n    genPriKey,\n    getAddressFromPriKey,\n    getPubKeyFromPriKey\n} from './crypto';\n\nexport function generateAccount() {\n    const priKeyBytes = genPriKey();\n    const pubKeyBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = getAddressFromPriKey(priKeyBytes);\n    \n    const privateKey = byteArray2hexStr(priKeyBytes);\n    const publicKey = byteArray2hexStr(pubKeyBytes);\n\n    return {\n        privateKey,\n        publicKey,\n        address: {\n            base58: getBase58CheckAddress(addressBytes),\n            hex: byteArray2hexStr(addressBytes)\n        }\n    }\n}","import Ethers from 'ethers';\nimport TronWeb from 'index';\n\nconst abiCoder = new Ethers.utils.AbiCoder();\n\nexport function decodeParams(names, types, output, ignoreMethodHash) {\n\n    if (!output || typeof output === 'boolean') {\n        ignoreMethodHash = output;\n        output = types;\n        types = names;\n        names = [];\n    }\n\n    if (ignoreMethodHash && output.replace(/^0x/,'').length % 64 === 8)\n        output = '0x' + output.replace(/^0x/,'').substring(8);\n\n    if (output.replace(/^0x/,'').length % 64)\n        throw new Error('The encoded string is not valid. Its length must be a multiple of 64.');\n\n    return abiCoder.decode(types, output).reduce((obj, arg, index) => {\n        if(types[index] == 'address')\n            arg = '41' + arg.substr(2).toLowerCase();\n\n        if(names.length)\n            obj[names[index]] = arg;\n        else obj.push(arg);\n\n        return obj;\n    }, names.length ? {} : []);\n}\n\nexport function encodeParams(types, values) {\n\n    for (let i =0;i<types.length;i++) {\n        if (types[i] === 'address') {\n            values[i] =  TronWeb.address.toHex(values[i]).replace(/^41/, '0x');\n        }\n    }\n\n    return abiCoder.encode(types, values);\n}\n","import * as accounts from './accounts';\nimport * as base58 from './base58';\nimport * as bytes from './bytes';\nimport * as crypto from './crypto';\nimport * as code from './code';\nimport * as abi from './abi';\n\nimport validator from 'validator';\nimport BigNumber from 'bignumber.js';\n\nconst utils = {\n    isValidURL(url) {\n        return validator.isURL(url.toString(), {\n            protocols: [ 'http', 'https' ]\n        });\n    },\n\n    isObject(obj) {\n        return obj === Object(obj) && Object.prototype.toString.call(obj) !== '[object Array]';\n    },\n\n    isArray(array) {\n        return Array.isArray(array);\n    },\n\n    isJson(string) {\n        try {\n            return !!JSON.parse(string);\n        } catch (ex) {\n            return false;\n        }\n    },\n\n    isBoolean(bool) {\n        return typeof bool === 'boolean';\n    },\n\n    isBigNumber(number) {\n        return number && (number instanceof BigNumber || (number.constructor && number.constructor.name === 'BigNumber'));\n    },\n\n    isString(string) {\n        return typeof string === 'string' || (string && string.constructor && string.constructor.name === 'String');\n    },\n\n    isFunction(obj) {\n        return typeof obj === 'function';\n    },\n\n    isHex(string) {\n        return typeof string === 'string' && !isNaN(parseInt(string, 16));\n    },\n\n    isInteger(number) {\n        return Number.isInteger(\n            Number(number)\n        );\n    },\n\n    hasProperty(obj, property) {\n        return Object.prototype.hasOwnProperty.call(obj, property);\n    },\n\n    hasProperties(obj, ...properties) {\n        return properties.length && !properties.map(property => {\n            return this.hasProperty(obj, property)\n        }).includes(false);\n    },\n\n    injectPromise(func, ...args) {\n        return new Promise((resolve, reject) => {\n            func(...args, (err, res) => {\n                if(err)\n                    reject(err);\n                else resolve(res);\n            });\n        });\n    },\n\n    promiseInjector(scope) {\n        return (func, ...args) => {\n            return this.injectPromise(func.bind(scope), ...args);\n        }\n    },\n\n    mapEvent(event) {\n        return {\n            block: event.block_number,\n            timestamp: event.block_timestamp,\n            contract: event.contract_address,\n            name: event.event_name,\n            transaction: event.transaction_id,\n            result: event.result\n        };\n    },\n\n    parseEvent(event, { inputs: abi }) {\n        if(!event.result)\n            return event;\n\n        if (this.isObject(event.result)) {\n            for (var i = 0; i < abi.length; i++) {\n                let obj = abi[i];\n                if (obj.type == 'address' && obj.name in event.result)\n                    event.result[obj.name] = '41' + event.result[obj.name].substr(2).toLowerCase();\n            }\n        } else if (this.isArray(event.result)) {\n            event.result = event.result.reduce((obj, result, index) => {\n                const {\n                    name,\n                    type\n                } = abi[index];\n\n                if(type == 'address')\n                    result = '41' + result.substr(2).toLowerCase();\n\n                obj[name] = result;\n\n                return obj;\n            }, {});\n        }\n\n        return event;\n    }\n}\n\nexport default {\n    ...utils,\n    code,\n    accounts,\n    base58,\n    bytes,\n    crypto,\n    abi\n};\n","import HttpProvider from './HttpProvider';\n\nexport default {\n    HttpProvider\n};","import axios from 'axios';\nimport utils from 'utils';\n\nexport default class HttpProvider {\n    constructor(host, timeout = 30000, user = false, password = false, headers = {}, statusPage = '/') {\n        if(!utils.isValidURL(host))\n            throw new Error('Invalid URL provided to HttpProvider');\n\n        if(isNaN(timeout) || timeout < 0)\n            throw new Error('Invalid timeout duration provided');\n\n        if(!utils.isObject(headers))\n            throw new Error('Invalid headers object provided');\n\n        host = host.replace(/\\/+$/,'');\n\n        this.host = host;\n        this.timeout = timeout;\n        this.user = user;\n        this.password = password;\n        this.headers = headers;\n        this.statusPage = statusPage;\n\n        this.instance = axios.create({            \n            baseURL: host,\n            timeout: timeout,\n            headers: headers,\n            auth: user && {\n                user,\n                password\n            },\n        });\n    }\n\n    setStatusPage(statusPage = '/') {\n        this.statusPage = statusPage;\n    }\n\n    async isConnected(statusPage = this.statusPage) {\n        return this.request(statusPage).then(data => {\n            return utils.hasProperties(data, 'blockID', 'block_header');\n        }).catch(() => false);\n    }\n\n    request(url, payload = {}, method = 'get') {\n        method = method.toLowerCase();\n\n        return this.instance.request({\n            data: method == 'post' && payload,\n            params: method =='get' && payload,\n            url,\n            method\n        }).then(({ data }) => data);\n    }\n};\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport Ethers from 'ethers';\n\nexport default class TransactionBuilder {\n    constructor(tronWeb = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    sendTrx(to = false, amount = 0, from = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.sendTrx, to, amount, from);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!this.tronWeb.isAddress(from))\n            return callback('Invalid origin address provided');\n\n        to = this.tronWeb.address.toHex(to);\n        from = this.tronWeb.address.toHex(from);\n\n        if(to === from)\n            return callback('Cannot transfer TRX to the same account');\n\n        this.tronWeb.fullNode.request('wallet/createtransaction', {\n            to_address: to,\n            owner_address: from,\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    sendToken(to = false, amount = 0, tokenID = false, from = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, from);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if(!this.tronWeb.isAddress(from))\n            return callback('Invalid origin address provided');\n\n        to = this.tronWeb.address.toHex(to);\n        tokenID = this.tronWeb.fromUtf8(tokenID);\n        from = this.tronWeb.address.toHex(from);\n\n        if(to === from)\n            return callback('Cannot transfer tokens to the same account');\n\n        this.tronWeb.fullNode.request('wallet/transferasset', {\n            to_address: to,\n            owner_address: from,\n            asset_name: tokenID,\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    purchaseToken(issuerAddress = false, tokenID = false, amount = 0, buyer = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(buyer)) {\n            callback = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.purchaseToken, issuerAddress, tokenID, amount, buyer);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!this.tronWeb.isAddress(buyer))\n            return callback('Invalid buyer address provided');\n\n        this.tronWeb.fullNode.request('wallet/participateassetissue', {\n            to_address: this.tronWeb.address.toHex(issuerAddress),\n            owner_address: this.tronWeb.address.toHex(buyer),\n            asset_name: this.tronWeb.fromUtf8(tokenID),\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    freezeBalance(address = this.tronWeb.defaultAddress.hex, amount = 0, duration = 3, resource = \"BANDWIDTH\", callback = false) {\n        if(utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n            \n        if(!callback)\n            return this.injectPromise(this.freezeBalance, address, amount, duration, resource);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isInteger(duration) || duration < 3)\n            return callback('Invalid duration provided, minimum of 3 days');\n\n        this.tronWeb.fullNode.request('wallet/freezebalance', {\n            owner_address: this.tronWeb.address.toHex(address),\n            frozen_balance: parseInt(amount),\n            frozen_duration: parseInt(duration),\n            resource: resource\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    unfreezeBalance(address = this.tronWeb.defaultAddress.hex, resource = \"BANDWIDTH\", callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if(!callback)\n            return this.injectPromise(this.unfreezeBalance, address, resource);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n        \n        this.tronWeb.fullNode.request('wallet/unfreezebalance', {\n            owner_address: this.tronWeb.address.toHex(address),\n            resource: resource\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    withdrawBlockRewards(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.withdrawBlockRewards, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n        \n        this.tronWeb.fullNode.request('wallet/withdrawbalance', {\n            owner_address: this.tronWeb.address.toHex(address)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    applyForSR(address = this.tronWeb.defaultAddress.hex, url = false, callback = false) {\n        if(utils.isValidURL(address)) {\n            callback = url || false;\n            url = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.applyForSR, address, url);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isValidURL(url))\n            return callback('Invalid url provided');\n        \n        this.tronWeb.fullNode.request('wallet/createwitness', {\n            owner_address: this.tronWeb.address.toHex(address),\n            url: this.tronWeb.fromUtf8(url)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    vote(votes = {}, voterAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.vote, votes, voterAddress);\n\n        if(!utils.isObject(votes) || !Object.keys(votes).length)\n            return callback('Invalid votes object provided');\n\n        if(!this.tronWeb.isAddress(voterAddress))\n            return callback('Invalid voter address provided');\n\n        let invalid = false;\n\n        votes = Object.entries(votes).map(([ srAddress, voteCount ]) => {\n            if(invalid)\n                return;\n\n            if(!this.tronWeb.isAddress(srAddress)) {\n                callback('Invalid SR address provided: ' + srAddress);\n                return invalid = true;\n            }\n\n            if(!utils.isInteger(voteCount) || voteCount <= 0) {\n                callback('Invalid vote count provided for SR: ' + srAddress);\n                return invalid = true;\n            }\n\n            return {\n                vote_address: this.tronWeb.address.toHex(srAddress),\n                vote_count: parseInt(voteCount)\n            };\n        });\n\n        if(invalid)\n            return;\n\n        this.tronWeb.fullNode.request('wallet/votewitnessaccount', {\n            owner_address: this.tronWeb.address.toHex(voterAddress),\n            votes\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    createSmartContract(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.createSmartContract, options, issuerAddress);\n\n        let {\n            abi = false,\n            bytecode = false,\n            feeLimit = 1_000_000_000,\n            callValue = 0,\n            userFeePercentage = 0,\n            parameters = [],\n            name = \"\",\n        } = options;\n        \n\n        if(abi && utils.isString(abi)) {\n            try {\n                abi = JSON.parse(abi);\n            } catch{\n                return callback('Invalid options.abi provided');\n            }\n        }\n        console.log(name);\n        if(!utils.isArray(abi))\n            return callback('Invalid options.abi provided');\n\n\n        const payable = abi.some(func => {\n            return func.type == 'constructor' && func.payable;\n        });\n\n        if(!utils.isHex(name))\n            name = this.tronWeb.toHex(name);\n\n        if(!utils.isHex(bytecode))\n            return callback('Invalid options.bytecode provided');\n\n        if(!utils.isInteger(feeLimit) || feeLimit <= 0 || feeLimit > 1_000_000_000)\n            return callback('Invalid options.feeLimit provided');\n\n        if(!utils.isInteger(callValue) || callValue < 0)\n            return callback('Invalid options.callValue provided');\n\n        if(payable && callValue == 0)\n            return callback('When contract is payable, options.callValue must be a positive integer');\n\n        if(!payable && callValue > 0)\n            return callback('When contract is not payable, options.callValue must be 0');\n\n        if(!utils.isInteger(userFeePercentage) || userFeePercentage < 0 || userFeePercentage > 100)\n            return callback('Invalid options.userFeePercentage provided');\n\n        if(!utils.isArray(parameters))\n            return callback('Invalid parameters provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        var constructorParams = abi.find(\n            (it) => {\n                return it.type === 'constructor';\n            }\n        );\n\n        if(typeof constructorParams !== 'undefined' && constructorParams) {\n            const abiCoder = new Ethers.utils.AbiCoder();\n            const types = [];\n            const values = [];\n            constructorParams = constructorParams.inputs;\n\n            if(parameters.length != constructorParams.length)\n                return callback(`constructor needs ${constructorParams.length} but ${parameters.length} provided`);\n\n            for(let i = 0; i < parameters.length; i++) {\n                let type = constructorParams[i].type;\n                let value = parameters[i];\n\n                if(!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if(type == 'address')\n                    value = this.tronWeb.address.toHex(value).replace(/^(41)/, '0x');\n                    \n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        this.tronWeb.fullNode.request('wallet/deploycontract', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            consume_user_resource_percent: userFeePercentage,\n            abi: JSON.stringify(abi),\n            bytecode,\n            parameter: parameters,\n            name\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    triggerSmartContract(\n        contractAddress, \n        functionSelector,\n        feeLimit = 1_000_000_000,\n        callValue = 0,\n        parameters = [], \n        issuerAddress = this.tronWeb.defaultAddress.hex, \n        callback = false\n    ) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(parameters)) {\n            callback = parameters;\n            parameters = [];\n        }\n\n        if(utils.isFunction(callValue)) {\n            callback = callValue;\n            callValue = 0;\n        }\n\n        if(utils.isFunction(feeLimit)) {\n            callback = feeLimit;\n            feeLimit = 1_000_000_000;\n        }\n\n        if(!callback) {\n            return this.injectPromise(\n                this.triggerSmartContract, \n                contractAddress, \n                functionSelector, \n                feeLimit,\n                callValue, \n                parameters,\n                issuerAddress\n            );\n        }\n\n        if(!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if(!utils.isString(functionSelector) || !functionSelector.length)\n            return callback('Invalid function selector provided');\n\n        if(!utils.isInteger(callValue) || callValue < 0)\n            return callback('Invalid call value provided');\n\n        if(!utils.isInteger(feeLimit) || feeLimit <= 0 || feeLimit > 1_000_000_000)\n            return callback('Invalid fee limit provided');\n\n        if(!utils.isArray(parameters))\n            return callback('Invalid parameters provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        functionSelector = functionSelector.replace('/\\s*/g', '');\n\n        if(parameters.length) {\n            const abiCoder = new Ethers.utils.AbiCoder();\n            const types = [];\n            const values = [];\n\n            for(let i = 0; i < parameters.length; i++) {\n                let { type, value } = parameters[i];\n\n                if(!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if(type == 'address')\n                    value = this.tronWeb.address.toHex(value).replace(/^(41)/, '0x');\n                    \n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        this.tronWeb.fullNode.request('wallet/triggersmartcontract', {\n            contract_address: this.tronWeb.address.toHex(contractAddress),\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            function_selector: functionSelector,\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            parameter: parameters\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            if(!transaction.result.result)\n                return callback(transaction);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    createToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.createToken, options, issuerAddress);\n\n        const {\n            name = false,\n            abbreviation = false,\n            description = false,\n            url = false,\n            totalSupply = 0,\n            trxRatio = 1, // How much TRX will `tokenRatio` cost?\n            tokenRatio = 1, // How many tokens will `trxRatio` afford?\n            saleStart = Date.now(),\n            saleEnd = false,            \n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0, // Out of `totalFreeBandwidth`, the amount each token holder get\n            frozenAmount = 0,\n            frozenDuration = 0\n        } = options;\n\n        if(!utils.isString(name) || !name.length)\n            return callback('Invalid token name provided');\n\n        if(!utils.isString(abbreviation) || !abbreviation.length)\n            return callback('Invalid token abbreviation provided');\n\n        if(!utils.isInteger(totalSupply) || totalSupply <= 0)\n            return callback('Invalid supply amount provided');\n\n        if(!utils.isInteger(trxRatio) || trxRatio <= 0)\n            return callback('TRX ratio must be a positive integer');\n\n        if(!utils.isInteger(tokenRatio) || tokenRatio <= 0)\n            return callback('Token ratio must be a positive integer');\n\n        if(!utils.isInteger(saleStart) || saleStart < Date.now())\n            return callback('Invalid sale start timestamp provided');\n\n        if(!utils.isInteger(saleEnd) || saleEnd <= saleStart)\n            return callback('Invalid sale end timestamp provided');\n\n        if(!utils.isString(description) || !description.length)\n            return callback('Invalid token description provided');\n\n        if(!utils.isString(url) || !url.length || !utils.isValidURL(url))\n            return callback('Invalid token url provided');\n\n        if(!utils.isInteger(freeBandwidth) || freeBandwidth < 0)\n            return callback('Invalid free bandwidth amount provided');\n\n        if(!utils.isInteger(freeBandwidthLimit) || freeBandwidthLimit < 0 || (freeBandwidth && !freeBandwidthLimit))\n            return callback('Invalid free bandwidth limit provided');\n\n        if(!utils.isInteger(frozenAmount) || frozenAmount < 0 || (!frozenDuration && frozenAmount))\n            return callback('Invalid frozen supply provided');\n\n        if(!utils.isInteger(frozenDuration) || frozenDuration < 0 || (frozenDuration && !frozenAmount))\n            return callback('Invalid frozen duration provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        this.tronWeb.fullNode.request('wallet/createassetissue', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            name: this.tronWeb.fromUtf8(name),\n            abbr: this.tronWeb.fromUtf8(abbreviation),\n            description: this.tronWeb.fromUtf8(description),\n            url: this.tronWeb.fromUtf8(url),\n            total_supply: parseInt(totalSupply),\n            trx_num: parseInt(trxRatio),\n            num: parseInt(tokenRatio),\n            start_time: parseInt(saleStart),\n            end_time: parseInt(saleEnd),\n            free_asset_net_limit: parseInt(freeBandwidth),\n            public_free_asset_net_limit: parseInt(freeBandwidthLimit),\n            frozen_supply: {\n                frozen_amount: parseInt(frozenAmount),\n                frozen_days: parseInt(frozenDuration)\n            }\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    updateToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.updateToken, options, issuerAddress);\n\n        const {\n            description = false,\n            url = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0 // Out of `totalFreeBandwidth`, the amount each token holder get\n        } = options;\n\n        if(!utils.isInteger(freeBandwidth) || freeBandwidth < 0)\n            return callback('Invalid free bandwidth amount provided');\n\n        if(!utils.isInteger(freeBandwidthLimit) || freeBandwidthLimit < 0 || (freeBandwidth && !freeBandwidthLimit))\n            return callback('Invalid free bandwidth limit provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        this.tronWeb.fullNode.request('wallet/updateasset', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            description: this.tronWeb.fromUtf8(description),\n            url: this.tronWeb.fromUtf8(url),\n            new_limit: parseInt(freeBandwidth),\n            new_public_limit: parseInt(freeBandwidthLimit)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    purchaseAsset(...args) {\n        return this.purchaseToken(...args);\n    }\n\n    createAsset(...args) {\n        return this.createToken(...args);\n    }\n\n    updateAsset(...args) {\n        return this.updateToken(...args);\n    }\n\n    /**\n     * Creates a proposal to modify the network.\n     * Can only be created by a current Super Representative.\n     */\n    createProposal(parameters = false, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!parameters)\n            return callback('Invalid proposal parameters provided');\n\n        if(!callback)\n            return this.injectPromise(this.createProposal, parameters, issuerAddress);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuerAddress provided');\n\n        if(!utils.isObject(parameters))\n            return callback('Invalid parameters provided');\n\n        this.tronWeb.fullNode.request('wallet/proposalcreate', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            parameters: parameters\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Deletes a network modification proposal that the owner issued.\n     * Only current Super Representative can vote on a proposal.\n     */\n    deleteProposal(proposalID = false, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.deleteProposal, proposalID, issuerAddress);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuerAddress provided');\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/proposaldelete', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            proposal_id: parseInt(proposalID)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds a vote to an issued network modification proposal.\n     * Only current Super Representative can vote on a proposal.\n     */\n    voteProposal(proposalID = false, hasApproval = false, voterAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.voteProposal, proposalID, hasApproval, voterAddress);\n\n        if(!this.tronWeb.isAddress(voterAddress))\n            return callback('Invalid voterAddress address provided');\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        if(!utils.isBoolean(hasApproval))\n            return callback('Invalid hasApproval provided');\n\n        this.tronWeb.fullNode.request('wallet/proposalapprove', {\n            owner_address: this.tronWeb.address.toHex(voterAddress),\n            proposal_id: parseInt(proposalID),\n            is_add_approval: isApproval.toString()\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds tokens into a bancor style exchange.\n     */\n    injectExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.injectExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmount) || tokenAmount < 1)\n            return callback('Invalid tokenAmount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangeinject', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant:parseInt(tokenAmount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Withdraws tokens from a bancor style exchange.\n     */\n    withdrawExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.withdrawExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmount) || tokenAmount < 1)\n            return callback('Invalid tokenAmount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangewithdraw', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant:parseInt(tokenAmount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Trade tokens on a bancor style exchange.\n     */\n    tradeExchangeTokens(exchangeID = false, \n        tokenName = false, \n        tokenAmountSold = 0, \n        tokenAmountExpected = 0, \n        ownerAddress = this.tronWeb.defaultAddress.hex, \n        callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.tradeExchangeTokens, exchangeID, tokenName, tokenAmountSold, tokenAmountExpected, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmountSold) || tokenAmountSold < 1)\n            return callback('Invalid tokenAmountSold provided');\n\n        if(!utils.isInteger(tokenAmountExpected) || tokenAmountExpected < 1)\n            return callback('Invalid tokenAmountExpected provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangewithdraw', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant:parseInt(tokenAmountSold),\n            expected:parseInt(tokenAmountExpected)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n}","import TronWeb from 'index';\nimport utils from 'utils';\n\nexport default class Trx {\n    constructor(tronWeb = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    parseToken(token) {\n        return {\n            ...token,\n            name: this.tronWeb.toUtf8(token.name),\n            abbr: token.abbr && this.tronWeb.toUtf8(token.abbr),\n            description: token.description && this.tronWeb.toUtf8(token.description),\n            url: token.url && this.tronWeb.toUtf8(token.url)\n        };\n    }\n\n    getCurrentBlock(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getCurrentBlock);\n\n        this.tronWeb.fullNode.request('wallet/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlock(block = this.tronWeb.defaultBlock, callback = false) {\n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlock, block);\n\n        if(block === false)\n            return callback('No block identifier provided');\n\n        if(block == 'earliest')\n            block = 0;\n\n        if(block == 'latest')\n            return this.getCurrentBlock(callback);\n\n        if(isNaN(block) && utils.isHex(block))\n            return this.getBlockByHash(block, callback);\n\n        this.getBlockByNumber(block, callback);\n    }\n\n    getBlockByHash(blockHash, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getBlockByHash, blockHash);\n\n        this.tronWeb.fullNode.request('wallet/getblockbyid', { \n            value: blockHash \n        }, 'post').then(block => {\n            if(!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockByNumber(blockID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getBlockByNumber, blockID);\n\n        if(!utils.isInteger(blockID) || blockID < 0)\n            return callback('Invalid block number provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbynum', { \n            num: parseInt(blockID) \n        }, 'post').then(block => {\n            if(!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockTransactionCount(block = this.tronWeb.defaultBlock, callback = false) {\n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlockTransactionCount, block);\n\n        this.getBlock(block).then(({ transactions = [] }) => {\n            callback(null, transactions.length);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionFromBlock(block = this.tronWeb.defaultBlock, index = 0, callback = false) {\n        if(utils.isFunction(index)) {\n            callback = index;\n            index = 0;\n        }\n        \n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionFromBlock, block, index);\n\n        if(!utils.isInteger(index) || index < 0)\n            return callback('Invalid transaction index provided');\n\n        this.getBlock(block).then(({ transactions = false }) => {\n            if(!transactions || transactions.length < index)\n                return callback('Transaction not found in block');\n\n            callback(null, transactions[index]);\n        }).catch(err => callback(err));\n    }\n\n    getTransaction(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTransaction, transactionID);\n\n        this.tronWeb.fullNode.request('wallet/gettransactionbyid', { \n            value: transactionID \n        }, 'post').then(transaction => {\n            if(!Object.keys(transaction).length)\n                return callback('Transaction not found');\n                \n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionInfo(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTransactionInfo, transactionID);\n\n        this.tronWeb.solidityNode.request('walletsolidity/gettransactioninfobyid', { \n            value: transactionID \n        }, 'post').then(transaction => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionsToAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;          \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsToAddress, address, limit, offset);\n\n        return this.getTransactionsRelated(address, 'to', limit, offset, callback);\n    }\n\n    getTransactionsFromAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;           \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsFromAddress, address, limit, offset);\n\n        return this.getTransactionsRelated(address, 'from', limit, offset, callback);\n    }\n\n    async getTransactionsRelated(address = this.tronWeb.defaultAddress.hex, direction = 'all', limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;         \n        }\n\n        if(utils.isFunction(direction)) {\n            callback = direction;\n            direction = 'all';\n        }\n\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsRelated, address, direction, limit, offset);\n\n        if(![ 'to', 'from', 'all' ].includes(direction))\n            return callback('Invalid direction provided: Expected \"to\", \"from\" or \"all\"');\n        \n        if(direction == 'all') {\n            try {\n                const from = await this.getTransactionsRelated(address, 'from', limit, offset);\n                const to = await this.getTransactionsRelated(address, 'to', limit, offset);\n\n                return callback(null, [\n                    ...from.map(tx => (tx.direction = 'from', tx)),\n                    ...to.map(tx => (tx.direction = 'to', tx))\n                ].sort((a, b) => b.raw_data.timestamp - a.raw_data.timestamp));\n            } catch(ex) {\n                return callback(ex);\n            }\n        }\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if(!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request(`walletextension/gettransactions${direction}this`, {\n            account: {\n                address\n            },\n            offset,\n            limit\n        }, 'post').then(({ transaction }) => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getAccount, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBalance, address);\n\n        this.getAccount(address).then(({ balance = 0 }) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getBandwidth(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBandwidth, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccountnet', {\n            address\n        }, 'post').then(({ freeNetUsed = 0, freeNetLimit = 0, NetUsed = 0, NetLimit = 0 }) => {\n            callback(null, (freeNetLimit - freeNetUsed) + (NetLimit - NetUsed));\n        }).catch(err => callback(err));\n    }\n\n    getTokensIssuedByAddress(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTokensIssuedByAddress, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyaccount', {\n            address\n        }, 'post').then(({ assetIssue = false }) => {\n            if(!assetIssue)\n                return callback(null, {});\n\n            const tokens = assetIssue.map(token => {\n                return this.parseToken(token);\n            }).reduce((tokens, token) => {\n                return tokens[token.name] = token, tokens;\n            }, {});\n\n            callback(null, tokens);\n        }).catch(err => callback(err));\n    }\n\n    getTokenFromID(tokenID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTokenFromID, tokenID);\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if(!token.name)\n                return callback('Token does not exist');\n                \n            callback(null, this.parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    listNodes(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listNodes);\n\n        this.tronWeb.fullNode.request('wallet/listnodes').then(({ nodes = [] }) => {\n            callback(null, nodes.map(({ address: { host, port } }) => (\n                `${this.tronWeb.toUtf8(host)}:${port}`\n            )));\n        }).catch(err => callback(err));\n    }\n\n    getBlockRange(start = 0, end = 30, callback = false) {\n        if(utils.isFunction(end)) {\n            callback = end;\n            end = 30;            \n        }\n\n        if(utils.isFunction(start)) {\n            callback = start;\n            start = 0;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlockRange, start, end);\n\n        if(!utils.isInteger(start) || start < 0)\n            return callback('Invalid start of range provided');\n\n        if(!utils.isInteger(end) || end <= start)\n            return callback('Invalid end of range provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbylimitnext', { \n            startNum: parseInt(start),\n            endNum: parseInt(end) + 1\n        }, 'post').then(({ block = [] }) => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    listSuperRepresentatives(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listSuperRepresentatives);\n\n        this.tronWeb.fullNode.request('wallet/listwitnesses').then(({ witnesses = [] }) => {\n            callback(null, witnesses);\n        }).catch(err => callback(err));\n    }\n\n    listTokens(limit = 0, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 0;  \n        }\n        \n        if(!callback)\n            return this.injectPromise(this.listTokens, limit, offset);\n\n        if(!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if(!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        if(!limit) {\n            return this.tronWeb.fullNode.request('wallet/getassetissuelist').then(({ assetIssue = [] }) => {\n                callback(null, assetIssue.map(token => this.parseToken(token)));\n            }).catch(err => callback(err));\n        }\n\n        this.tronWeb.fullNode.request('wallet/getpaginatedassetissuelist', {\n            offset: parseInt(offset),\n            limit: parseInt(limit)\n        }, 'post').then(({ assetIssue = [] }) => {\n            callback(null, assetIssue.map(token => this.parseToken(token)));\n        }).catch(err => callback(err));\n    }\n\n    timeUntilNextVoteCycle(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.timeUntilNextVoteCycle);\n\n        this.tronWeb.fullNode.request('wallet/getnextmaintenancetime').then(({ num = -1 }) => {\n            if(num == -1)\n                return callback('Failed to get time until next vote cycle');\n\n            callback(null, Math.floor(num / 1000));\n        }).catch(err => callback(err));\n    }\n\n    getContract(contractAddress, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getContract, contractAddress);\n\n        if(!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        contractAddress = this.tronWeb.address.toHex(contractAddress);\n\n        this.tronWeb.fullNode.request('wallet/getcontract', {\n            value: contractAddress\n        }).then(contract => {\n            if(contract.Error)\n                return callback('Contract does not exist');\n\n            callback(null, contract);\n        }).catch(err => callback(err));\n    }\n\n    async sign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sign, transaction, privateKey);\n\n        if(!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if(transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            const address = this.tronWeb.address.toHex(\n                this.tronWeb.address.fromPrivateKey(privateKey)\n            ).toLowerCase();\n\n            if(address !== transaction.raw_data.contract[0].parameter.value.owner_address.toLowerCase())\n                return callback('Private key does not match address in transaction');\n\n            return callback(null,\n                utils.crypto.signTransaction(privateKey, transaction)\n            );\n        } catch(ex) {\n            callback(ex);\n        }\n    }\n\n    sendRawTransaction(signedTransaction = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.sendRawTransaction, signedTransaction);\n\n        if(!utils.isObject(signedTransaction))\n            return callback('Invalid transaction provided');\n\n        if(!signedTransaction.signature || !utils.isArray(signedTransaction.signature))\n            return callback('Transaction is not signed');\n\n        this.tronWeb.fullNode.request(\n            'wallet/broadcasttransaction', \n            signedTransaction,\n            'post'\n        ).then(result => {\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    async sendTransaction(to = false, amount = false, options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sendTransaction, to, amount, options);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendTrx(to, amount, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    async sendToken(to = false, amount = false, tokenID = false, options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, options);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isString(tokenID))\n            return callback('Invalid token ID provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendToken(to, amount, tokenID, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    send(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    sendTrx(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    broadcast(...args) {\n        return this.sendRawTransaction(...args);\n    }\n\n    signTransaction(...args) {\n        return this.sign(...args);\n    }\n\n    /**\n     * Gets a network modification proposal by ID.\n     */\n    getProposal(proposalID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getProposal, proposalID);\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/getproposalbyid', { \n            id: parseInt(proposalID),\n        }, 'post').then(proposal => {\n            callback(null, proposal);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listProposals(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listProposals);\n\n        this.tronWeb.fullNode.request('wallet/listproposals', {}, 'post').then(({ proposals = [] }) => {\n            callback(null, proposals);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all parameters available for network modification proposals.\n     */\n    getChainParameters(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getChainParameters);\n\n        this.tronWeb.fullNode.request('wallet/getchainparameters', {}, 'post').then(({ chainParameter = [] }) => {\n            callback(null, chainParameter);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the account resources\n     */\n    getAccountResources(address = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getAccountResources, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/getaccountresource', { \n            address: this.tronWeb.address.toHex(address),\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the exchange ID.\n     */\n    getExchangeByID(exchangeID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getExchangeByID, exchangeID);\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        this.tronWeb.fullNode.request('wallet/getexchangebyid', {\n            address: this.tronWeb.defaultAddress.hex,\n        }, 'post').then(exchange => {\n            callback(null, exchange);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists the exchanges\n     */\n    listExchanges(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchanges', {}, 'post').then(({ exchanges = [] }) => {\n            callback(null, exchanges);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between tokens.\n     */\n    exchangeCreate(ownerAddress = false,\n                   firstTokenID, firstTokenBalance,\n                   secondTokenID, secondTokenBalance, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getAccountResources, address);\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid address provided');\n\n        if (!utils.isString(firstTokenID) || !firstTokenID.length\n            || !utils.isString(secondTokenID) || !secondTokenID.length)\n            return callback('Invalid token ID provided');\n\n        if (!utils.isInteger(firstTokenBalance) || firstTokenBalance <= 0\n            || !utils.isInteger(secondTokenBalance) || secondTokenBalance <= 0)\n            return callback('Invalid amount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            first_token_id: firstTokenID,\n            first_token_balance: firstTokenBalance,\n            second_token_id: secondTokenID,\n            second_token_balance: secondTokenBalance\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Exchanges a transaction.\n     */\n    exchangeTransaction(ownerAddress = false, exchangeID, tokenID, quant, expected, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getAccountResources, address);\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid address provided');\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if (!utils.isInteger(quant) || quant <= 0)\n            return callback('Invalid quantity provided');\n\n        if (!utils.isInteger(expected) || expected < 0)\n            return callback('Invalid expected provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangetransaction', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: exchangeID,\n            token_id: tokenID,\n            quant,\n            expected\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listExchangesPaginated(limit = 10, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n        if(!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchangespaginated', {\n            limit,\n            offset\n        }, 'post').then(({ exchanges = [] }) => {\n            callback(null, exchanges);\n        }).catch(err => callback(err));\n    }\n};\n","export default class Witness {\n    \n}","import utils from 'utils';\n\nconst getFunctionSelector = abi => {\n    return abi.name + '(' + getParamTypes(abi.inputs || []).join(',') + ')';\n}\n\nconst getParamTypes = params => {\n    return params.map(({ type }) => type);\n}\n\nconst decodeOutput = (abi, output) => {\n    const names = abi.map(({ name }) => name).filter(name => !!name);\n    const types = abi.map(({ type }) => type);\n\n    return utils.abi.decodeParams(names, types, output);\n};\n\nexport default class Method {\n    constructor(contract, abi) {\n        this.tronWeb = contract.tronWeb;\n        this.contract = contract;\n\n        this.abi = abi;        \n        this.name = abi.name || (abi.name = abi.type);\n\n        this.inputs = abi.inputs || [];\n        this.outputs = abi.outputs || [];\n\n        this.signature = this.tronWeb.sha3(abi.name, false).slice(0, 8);\n        this.functionSelector = getFunctionSelector(abi);\n        this.injectPromise = utils.promiseInjector(this);\n\n        this.defaultOptions = {\n            feeLimit: 1000000000,\n            callValue: 0,\n            from: this.tronWeb.defaultAddress.hex, // Only used for send()\n            shouldPollResponse: false // Only used for sign()\n        };\n    }\n\n    onMethod(...args) {\n        const types = getParamTypes(this.inputs);\n\n        args.forEach((arg, index) => {\n            if(types[index] == 'address')\n                args[index] = this.tronWeb.address.toHex(arg).replace(/^(41)/, '0x')\n        });\n\n        return {\n            call: (...methodArgs) => this._call(types, args, ...methodArgs),\n            send: (...methodArgs) => this._send(types, args, ...methodArgs),\n            watch: (...methodArgs) => this._watch(...methodArgs)\n        }\n    }\n\n    async _call(types, args, options = {}, callback = false) {                \n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n            \n        if(!callback)\n            return this.injectPromise(this._call, types, args, options);\n\n        if(types.length !== args.length)\n            return callback('Invalid argument count provided');\n\n        if(!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if(!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const { stateMutability } = this.abi;\n\n        if(![ 'pure', 'view' ].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use send()`);\n\n        options = { ...this.defaultOptions, ...options };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        this.tronWeb.transactionBuilder.triggerSmartContract(\n            this.contract.address,\n            this.functionSelector,\n            options.feeLimit,\n            options.callValue,\n            parameters,\n            this.tronWeb.address.toHex(options.from),\n        (err, transaction) => {\n            if(err) \n                return callback(err);\n\n            if(!utils.hasProperty(transaction, 'constant_result'))\n                return callback('Failed to execute');\n\n            try {\n                let output = decodeOutput(this.outputs, '0x' + transaction.constant_result[0]);\n                \n                if(output.length === 1)\n                    output = output[0];\n\n                return callback(null, output);\n            } catch(ex) {\n                return callback(ex);\n            }\n        });\n    }\n\n    async _send(types, args, options = {}, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n            \n        if(!callback)\n            return this.injectPromise(this._send, types, args, options, privateKey);\n\n        if(types.length !== args.length)\n            throw new Error('Invalid argument count provided');\n\n        if(!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if(!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const { stateMutability } = this.abi;\n\n        if([ 'pure', 'view' ].includes(stateMutability.toLowerCase()))\n                return callback(`Methods with state mutability \"${stateMutability}\" must use call()`);\n\n        // If a function isn't payable, dont provide a callValue.\n        if(![ 'payable' ].includes(stateMutability.toLowerCase()))\n                options.callValue = 0;\n   \n        options = { ...this.defaultOptions, ...options };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        try {\n            const address = privateKey ? this.tronWeb.address.fromPrivateKey(privateKey) : this.tronWeb.defaultAddress.base58;\n            const transaction = await this.tronWeb.transactionBuilder.triggerSmartContract(\n                this.contract.address,\n                this.functionSelector,\n                options.feeLimit,\n                options.callValue,\n                parameters,\n                this.tronWeb.address.toHex(address)\n            );\n\n            if(!transaction.result || !transaction.result.result)\n                return callback('Unknown error: ' + JSON.stringify(transaction, null, 2));\n\n            // If privateKey is false, this won't be signed here. We assume sign functionality will be replaced.\n            const signedTransaction = await this.tronWeb.trx.sign(transaction.transaction, privateKey);\n\n            if(!signedTransaction.signature) {\n                if (!privateKey) {\n                    return callback('Transaction was not signed properly');\n                } else {\n                    return callback('Invalid private key provided');\n                }\n            }\n\n            const broadcast = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if(!broadcast.result)\n                return callback('Unknown error: ' + JSON.stringify(broadcast, null, 2));\n\n            if(!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if(index == 20) {\n                    return callback({ \n                        error: 'Cannot find result in solidity node', \n                        transaction: signedTransaction\n                    });\n                }\n                \n                const output = await this.tronWeb.trx.getTransactionInfo(signedTransaction.txID);\n\n                if(!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if(output.result && output.result == 'FAILED') {\n                    return callback({\n                        error: this.tronWeb.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if(!utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                let decoded = decodeOutput(this.outputs, '0x' + output.contractResult[0]);\n\n                if(decoded.length === 1)\n                    decoded = decoded[0];\n\n                return callback(null, decoded);\n            }\n\n            checkResult();                    \n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    async _watch(callback = false) {\n        if(!utils.isFunction(callback))\n            throw new Error('Expected callback to be provided');\n        \n        if(!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if(this.abi.type.toLowerCase() !== 'event')\n            return callback('Invalid method type for event watching');\n\n        if(!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        let listener = false;\n        let lastBlock = false;\n        const sinceTimestamp = new Date().getTime();\n\n        const getEvents = async () => {\n            try {\n                const events = await this.tronWeb.getEventResult(this.contract.address, sinceTimestamp, this.name);\n                const [ latestEvent ] = events.sort((a, b) => b.block - a.block);\n                const newEvents = events.filter((event, index) => {\n                    const duplicate = events.slice(0, index).some(priorEvent => (\n                        JSON.stringify(priorEvent) == JSON.stringify(event)\n                    ));\n\n                    if(duplicate)\n                        return false;\n\n                    if(!lastBlock)\n                        return true;            \n\n                    return event.block > lastBlock;\n                });\n\n                if(latestEvent)\n                    lastBlock = latestEvent.block;\n\n                return newEvents;\n            } catch(ex) {\n                return Promise.reject(ex);\n            }\n        };\n\n        const bindListener = () => {\n            if(listener)\n                clearInterval(listener);\n\n            listener = setInterval(() => {\n                getEvents().then(events => events.forEach(event => {\n                    callback(null, utils.parseEvent(event, this.abi))\n                })).catch(err => callback(err));\n            }, 3000);\n        };\n\n        await getEvents();\n        bindListener();\n\n        return {\n            start: bindListener(),\n            stop: () => {\n                if(!listener)\n                    return;\n\n                clearInterval(listener);\n                listener = false;\n            }\n        }\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport Method from './method';\n\nexport default class Contract {\n    constructor(tronWeb = false, abi = [], address = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n\n        this.address = address;\n        this.abi = abi;\n\n        this.eventListener = false;\n        this.bytecode = false;        \n        this.deployed = false;\n        this.lastBlock = false;  \n\n        this.methods = {};\n        this.props = [];\n\n        if(this.tronWeb.isAddress(address))\n            this.deployed = true;\n        else this.address = false;\n\n        this.loadAbi(abi);\n    }\n\n    async _getEvents() {\n        const events = await this.tronWeb.getEventResult(this.address);\n        const [ latestEvent ] = events.sort((a, b) => b.block - a.block);\n        const newEvents = events.filter((event, index) => {\n            const duplicate = events.slice(0, index).some(priorEvent => (\n                JSON.stringify(priorEvent) == JSON.stringify(event)\n            ));\n\n            if(duplicate)\n                return false;\n            \n            if(!this.lastBlock)\n                return true;            \n\n            return event.block > this.lastBlock;\n        });\n\n        if(latestEvent)\n            this.lastBlock = latestEvent.block;\n\n        return newEvents;\n    }\n\n    async _startEventListener(callback) {\n        if(this.eventListener)\n            clearInterval(this.eventListener);\n\n        if(!this.tronWeb.eventServer)\n            throw new Error('Event server is not configured');\n\n        if(!this.address)\n            throw new Error('Contract is not configured with an address');\n\n        this.eventCallback = callback;\n        await this._getEvents();\n\n        this.eventListener = setInterval(() => {\n            this._getEvents().then(newEvents => newEvents.forEach(event => {\n                this.eventCallback && this.eventCallback(event)\n            })).catch(err => {\n                console.error('Failed to get event list', err);\n            });\n        }, 3000);\n    }\n\n    _stopEventListener() {\n        if(!this.eventListener)\n            return;\n\n        clearInterval(this.eventListener);\n        this.eventListener = false;\n        this.eventCallback = false;\n    }\n\n    hasProperty(property) {\n        return this.hasOwnProperty(property) || this.__proto__.hasOwnProperty(property);\n    }\n\n    loadAbi(abi) {\n        this.abi = abi;\n        this.methods = {};\n\n        this.props.forEach(prop => delete this[prop]);\n\n        abi.forEach(func => {\n            // Don't build a method for constructor function. That's handled through contract create.\n            if (func.type.toLowerCase() === 'constructor')\n                return;\n\n            const method = new Method(this, func);\n            const methodCall = method.onMethod.bind(method);\n\n            const {\n                name,\n                functionSelector,\n                signature\n            } = method;\n\n            this.methods[name] = methodCall;\n            this.methods[functionSelector] = methodCall;\n            this.methods[signature] = methodCall;\n\n            if(!this.hasProperty(name)) {\n                this[name] = methodCall;\n                this.props.push(name);\n            }\n\n            if(!this.hasProperty(functionSelector)) {\n                this[functionSelector] = methodCall;\n                this.props.push(functionSelector);\n            }\n\n            if(!this.hasProperty(signature)) {\n                this[signature] = methodCall;\n                this.props.push(signature);\n            }\n        });\n    }\n\n    async new(options, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.new, options, privateKey);\n\n        try {\n            const address = this.tronWeb.address.fromPrivateKey(privateKey);\n            const transaction = await this.tronWeb.transactionBuilder.createSmartContract(options, address);\n            const signedTransaction = await this.tronWeb.trx.sign(transaction, privateKey);\n            const contract = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if(!contract.result)\n                return callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            return this.at(signedTransaction.contract_address, callback);\n        } catch(ex) {\n            return callback(ex);\n        }        \n    }\n\n    async at(contractAddress, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.at, contractAddress);\n\n        try {\n            const contract = await this.tronWeb.trx.getContract(contractAddress);\n\n            if(!contract.contract_address)\n                callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            this.address = contract.contract_address;\n            this.bytecode = contract.bytecode;\n            this.deployed = true;\n\n            this.loadAbi(contract.abi.entrys);\n\n            callback(null, this);\n        } catch(ex) {\n            if(ex.toString().includes('does not exist'))\n                return callback('Contract has not been deployed on the network');\n\n            return callback(ex);\n        }        \n    }\n\n    events(callback = false) {\n        if(!utils.isFunction(callback))\n            throw new Error('Callback function expected');\n\n        const self = this;\n\n        return {\n            start(startCallback = false) {\n                if(!startCallback) {\n                    self._startEventListener(callback);\n                    return this;\n                }\n\n                self._startEventListener(callback).then(() => {\n                    startCallback();\n                }).catch(err => {\n                    startCallback(err)\n                });\n\n                return this;\n            },\n            stop() {\n                self._stopEventListener();\n            }\n        };\n    }\n}","import providers from 'lib/providers';\nimport utils from 'utils';\nimport axios from 'axios';\nimport BigNumber from 'bignumber.js';\nimport EventEmitter from 'eventemitter3';\n\nimport TransactionBuilder from 'lib/transactionBuilder';\nimport Trx from 'lib/trx';\nimport Witness from 'lib/witness';\nimport Contract from 'lib/contract';\n\nimport { keccak256 } from 'js-sha3';\n\nexport default class TronWeb extends EventEmitter {\n    static providers = providers;\n    static BigNumber = BigNumber;\n    \n    constructor(fullNode, solidityNode, eventServer = false, privateKey = false) {\n        super();\n\n        if(utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if(utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n        this.setEventServer(eventServer);\n        \n        this.providers = providers;\n        this.BigNumber = BigNumber;\n\n        this.defaultBlock = false;\n        this.defaultPrivateKey = false;\n        this.defaultAddress = {\n            hex: false,\n            base58: false\n        };\n        \n        [\n            'sha3', 'toHex', 'toUtf8', 'fromUtf8',\n            'toAscii', 'fromAscii', 'toDecimal', 'fromDecimal',\n            'toSun', 'fromSun', 'toBigNumber', 'isAddress',\n            'compile', 'createAccount', 'address'\n        ].forEach(key => {\n            this[key] = TronWeb[key];\n        });\n\n        if(privateKey)\n            this.setPrivateKey(privateKey);\n\n        this.transactionBuilder = new TransactionBuilder(this);\n        this.trx = new Trx(this);\n        this.witness = new Witness(this);\n        this.utils = utils;\n\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    setDefaultBlock(blockID = false) {\n        if(blockID === false || blockID == 'latest' || blockID == 'earliest' || blockID === 0)\n            return this.defaultBlock = blockID;\n\n        if(!utils.isInteger(blockID) || !blockID)\n            throw new Error('Invalid block ID provided');\n\n        this.defaultBlock = Math.abs(blockID);\n    }\n\n    setPrivateKey(privateKey) {\n        try {\n            this.setAddress(\n                this.address.fromPrivateKey(privateKey)\n            );\n        } catch {\n            throw new Error('Invalid private key provided');\n        }\n\n        this.defaultPrivateKey = privateKey;\n        this.emit('privateKeyChanged', privateKey);\n    }\n\n    setAddress(address) {\n        if(!this.isAddress(address))\n            throw new Error('Invalid address provided');\n\n        const hex = this.address.toHex(address);\n        const base58 = this.address.fromHex(address);\n\n        if(this.defaultPrivateKey && this.address.fromPrivateKey(this.defaultPrivateKey) !== base58)\n           this.defaultPrivateKey = false;\n\n        this.defaultAddress = {\n            hex,\n            base58\n        };\n\n        this.emit('addressChanged', { hex, base58 });\n    }\n\n    isValidProvider(provider) {\n        return Object.values(providers).some(knownProvider => provider instanceof knownProvider);\n    }\n\n    isEventServerConnected() {\n        if (!this.eventServer)\n            return false;\n\n        return axios.get(this.eventServer.replace(/\\/+$/,'') + '/healthcheck').then(() => {\n            return true;\n        }).catch(() => {\n            return axios.get(this.eventServer.replace(/\\/+$/,'') + '/events?size=1').then(({data}) => {\n                return Array.isArray(data);\n            }).catch(() => false);\n        });\n    }\n\n    setFullNode(fullNode) {\n        if(utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if(!this.isValidProvider(fullNode))\n            throw new Error('Invalid full node provided');\n\n        this.fullNode = fullNode;\n        this.fullNode.setStatusPage('wallet/getnowblock');\n    }\n\n    setSolidityNode(solidityNode) {\n        if(utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if(!this.isValidProvider(solidityNode))\n            throw new Error('Invalid solidity node provided');\n\n        this.solidityNode = solidityNode;\n        this.solidityNode.setStatusPage('walletsolidity/getnowblock');\n    }\n\n    setEventServer(eventServer = false) {\n        if(eventServer !== false && !utils.isValidURL(eventServer))\n            throw new Error('Invalid URL provided for event server');\n\n        this.eventServer = eventServer;\n    }\n\n    currentProviders() {\n        return {\n            fullNode: this.fullNode,\n            solidityNode: this.solidityNode,\n            eventServer: this.eventServer\n        };\n    }\n\n    currentProvider() {\n        return this.currentProviders();\n    }\n\n    getEventResult(contractAddress = false, sinceTimestamp = 0, eventName = false, blockNumber = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getEventResult, contractAddress, sinceTimestamp, eventName, blockNumber);\n\n        if(!this.eventServer)\n            callback('No event server configured');\n\n        const routeParams = [];\n\n        if(!this.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if(eventName && !contractAddress)\n            return callback('Usage of event name filtering requires a contract address');\n        \n        if(blockNumber && !eventName)\n            return callback('Usage of block number filtering requires an event name');\n\n        if(contractAddress)\n            routeParams.push(this.address.fromHex(contractAddress));\n\n        if(eventName)\n            routeParams.push(eventName);\n\n        if(blockNumber)\n            routeParams.push(blockNumber);\n\n        return axios(`${this.eventServer}/event/contract/${routeParams.join('/')}?since=${sinceTimestamp}`).then(({ data = false }) => {\n            if(!data)\n                return callback('Unknown error occurred');\n\n            if(!utils.isArray(data))\n                return callback(data);\n\n            return callback(null, \n                data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err)); \n    }\n\n    getEventByTransacionID(transactionID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getEventByTransacionID, transactionID);\n\n        if(!this.eventServer)\n            callback('No event server configured');\n\n        return axios(`${this.eventServer}/event/transaction/${transactionID}`).then(({ data = false }) => {\n            if(!data)\n                return callback('Unknown error occurred');\n\n            if(!utils.isArray(data))\n                return callback(data);\n\n            return callback(null, \n                data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n    contract(abi = [], address = false) {\n        return new Contract(this, abi, address);\n    }\n\n    static get address() {\n        return {\n            fromHex(address) {\n                if(!utils.isHex(address))\n                    return address;\n\n                return utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address)\n                );\n            },\n            toHex(address) {\n                if(utils.isHex(address))\n                    return address.toLowerCase();\n\n                return utils.code.byteArray2hexStr(\n                    utils.crypto.decodeBase58Address(address)\n                ).toLowerCase();\n            },\n            fromPrivateKey(privateKey) {\n                try {\n                    return utils.crypto.pkToAddress(privateKey);\n                } catch { return false; }\n            }\n        }\n    }\n\n    static sha3(string, prefix = true) {\n        return (prefix ? '0x' : '') + keccak256(string);\n    }\n\n    static toHex(val) {\n        if(utils.isBoolean(val))\n            return TronWeb.fromDecimal(+val);\n\n        if(utils.isBigNumber(val))\n            return TronWeb.fromDecimal(val);\n\n        if(typeof val === 'object')\n            return TronWeb.fromUtf8(JSON.stringify(val));\n\n        if(utils.isString(val)) {\n            if (/^(-|)0x/.test(val))\n                return val;\n            // if(val.indexOf('-0x') === 0)\n            //     return TronWeb.fromDecimal(val); // << this returns val\n            //\n            // if(val.indexOf('0x') === 0)\n            //     return val;\n\n            if(!isFinite(val))\n                return TronWeb.fromUtf8(val);\n        }\n\n        return TronWeb.fromDecimal(val);\n    }\n\n    static toUtf8(hex) {\n        hex = hex.replace(/^0x/,'');\n        return Buffer.from(hex, 'hex').toString('utf8');\n    }\n\n    static fromUtf8(string) {\n        return '0x' + Buffer.from(string, 'utf8').toString('hex');\n    }\n\n    static toAscii(hex) {\n        hex = hex.replace(/^0x/,'');\n        return Buffer.from(hex, 'hex').toString('ascii');\n    }\n\n    static fromAscii(string, padding) {\n        return '0x' + Buffer.from(string, 'ascii').toString('hex').padEnd(padding, '0');\n    }\n\n    static toDecimal(value) {\n        return TronWeb.toBigNumber(value).toNumber();\n    }\n\n    static fromDecimal(value) {\n        const number = TronWeb.toBigNumber(value);\n        const result = number.toString(16);\n\n        return number.isLessThan(0) ? '-0x' + result.substr(1) : '0x' + result;\n    }\n\n    static fromSun(sun) {\n        const trx = TronWeb.toBigNumber(sun).div(1_000_000);        \n        return utils.isBigNumber(sun) ? trx : trx.toString(10);\n    }\n\n    static toSun(trx) {\n        const sun = TronWeb.toBigNumber(trx).times(1_000_000);        \n        return utils.isBigNumber(trx) ? sun : sun.toString(10);\n    }\n\n    static toBigNumber(amount = 0) {\n        if(utils.isBigNumber(amount))\n            return amount;\n\n        if(utils.isString(amount) && (amount.indexOf('0x') === 0 || amount.indexOf('-0x') === 0))\n            return new BigNumber(amount.replace('0x', ''), 16);\n\n        return new BigNumber(amount.toString(10), 10);\n    }\n\n    static isAddress(address = false) {\n        if(!utils.isString(address))\n            return false;\n\n        // Convert HEX to Base58\n        if(address.length === 42) {\n            return TronWeb.isAddress(\n                utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address)\n                )\n            );\n        }\n\n        return utils.crypto.isAddressValid(address);\n    }\n\n    // TODO\n    static compile(solditySource) {\n\n    }\n\n    static async createAccount(callback = false) {\n        const account = utils.accounts.generateAccount();\n\n        if(callback)\n            callback(null, account);\n\n        return account;\n    }\n\n    async isConnected(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.isConnected);\n\n        callback(null, {\n            fullNode: await this.fullNode.isConnected(),\n            solidityNode: await this.solidityNode.isConnected(),\n            eventServer: await this.isEventServerConnected()\n        });\n    }\n};\n"],"sourceRoot":""}