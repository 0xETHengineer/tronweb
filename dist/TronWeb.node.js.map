{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@babel/runtime/helpers/asyncToGenerator\"","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///external \"@babel/runtime/helpers/objectSpread\"","webpack:///external \"ethers\"","webpack:///external \"@babel/runtime/helpers/toConsumableArray\"","webpack:///external \"bignumber.js\"","webpack:///external \"@babel/runtime/helpers/assertThisInitialized\"","webpack:///external \"@babel/runtime/helpers/slicedToArray\"","webpack:///external \"@babel/runtime/helpers/defineProperty\"","webpack:///external \"js-sha3\"","webpack:///external \"elliptic\"","webpack:///external \"@babel/runtime/helpers/typeof\"","webpack:///external \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack:///external \"@babel/runtime/helpers/getPrototypeOf\"","webpack:///external \"@babel/runtime/helpers/inherits\"","webpack:///external \"axios\"","webpack:///external \"jssha\"","webpack:///external \"validator\"","webpack:///external \"eventemitter3\"","webpack:///./src/utils/base64.js","webpack:///./src/utils/bytes.js","webpack:///./src/utils/address.js","webpack:///./src/utils/code.js","webpack:///./src/utils/base58.js","webpack:///./src/utils/crypto.js","webpack:///./src/utils/accounts.js","webpack:///./src/utils/abi.js","webpack:///./src/utils/index.js","webpack:///./src/lib/providers/index.js","webpack:///./src/lib/providers/HttpProvider.js","webpack:///./src/lib/transactionBuilder.js","webpack:///./src/lib/trx.js","webpack:///./src/lib/contract/method.js","webpack:///./src/lib/contract/index.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","Base64","_this","this","_keyStr","encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","length","charCodeAt","isNaN","charAt","encodeIgnoreUtf8","inputBytes","decode","replace","indexOf","String","fromCharCode","_utf8_decode","decodeToByteArray","_out2ByteArray","utftext","byteArray","Array","_utf8_encode","string","c2","c3","byte2hexStr","byte","Error","str","bytesToString","arr","one","toString","v","match","bytesLength","store","slice","st","parseInt","hextoString","hex","split","out","tmp","concat","byteArray2hexStr","base64DecodeFromString","string64","base64EncodeToString","bytes","ADDRESS_SIZE","ADDRESS_PREFIX","ADDRESS_PREFIX_BYTE","bin2String","array","arrayEquals","array1","array2","strict","JSON","stringify","stringToBytes","len","push","hexChar2byte","isHexChar","hexStr2byteArray","j","k","strToDate","test","tempStrs","dateStrs","year","month","day","timeStrs","hour","minute","second","Date","isNumber","getStringType","ALPHABET","ALPHABET_MAP","base58_i","BASE","encode58","buffer","digits","carry","reverse","map","digit","join","decode58","getBase58CheckAddress","addressBytes","checkSum","SHA256","decodeBase58Address","base58Sting","address","offset","checkSum1","signTransaction","priKeyBytes","transaction","signature","ECKeySign","txID","arrayToBase64String","a","btoa","apply","toConsumableArray_default","crypto_signBytes","privateKey","contents","getRowBytesFromTransactionBase64","base64Data","bytesDecode","proto","protocol","Transaction","deserializeBinary","getRawData","serializeBinary","genPriKey","priKeyHex","external_elliptic_","genKeyPair","getPrivate","computeAddress","pubBytes","hash","external_js_sha3_","substring","getAddressFromPriKey","getPubKeyFromPriKey","decode58Check","addressStr","decodeCheck","decodeData","hash1","isAddressValid","base58Str","getBase58CheckAddressFromPriKeyBase64String","priKeyBase64String","getHexStrAddressFromPriKeyBase64String","getAddressFromPriKeyBase64String","pubkey","keyFromPrivate","getPublic","x","y","xHex","yHex","hashBytes","sign","id","recoveryParam","rHex","sHex","msgBytes","shaObj","external_jssha_default","msgHex","update","getHash","passwordToAddress","password","pkToAddress","generateAccount","pubKeyBytes","publicKey","base58","abi_abiCoder","external_ethers_","AbiCoder","decodeParams","names","types","ignoreMethodHash","reduce","obj","arg","index","substr","toLowerCase","encodeParams","values","src_TronWeb","toHex","utils","isValidURL","url","external_validator_default","isURL","protocols","isObject","isArray","isJson","parse","ex","isBoolean","bool","isBigNumber","number","external_bignumber_js_default","constructor","isString","isFunction","isHex","isInteger","Number","hasProperty","hasProperties","_len","arguments","properties","_key","includes","injectPromise","func","_len2","args","_key2","Promise","resolve","reject","err","res","promiseInjector","scope","_this2","_len3","_key3","mapEvent","event","block","block_number","timestamp","block_timestamp","contract","contract_address","event_name","transaction_id","result","resourceNode","resource_Node","parseEvent","_ref","abi","inputs","type","_abi$index","padLeft","padding","amount","src_utils","objectSpread_default","code","code_namespaceObject","accounts","accounts_namespaceObject","base58_namespaceObject","bytes_namespaceObject","crypto","crypto_namespaceObject","abi_namespaceObject","providers","HttpProvider","host","timeout","undefined","user","headers","statusPage","classCallCheck_default","instance","external_axios_default","baseURL","auth","request","then","data","catch","payload","method","params","transactionBuilder_TransactionBuilder","TransactionBuilder","tronWeb","to","from","defaultAddress","callback","isAddress","fullNode","to_address","owner_address","sendTrx","tokenID","fromUtf8","asset_name","sendToken","issuerAddress","buyer","purchaseToken","duration","resource","frozen_balance","frozen_duration","freezeBalance","unfreezeBalance","withdrawBlockRewards","applyForSR","votes","voterAddress","vote","keys","invalid","entries","_ref2","slicedToArray_default","srAddress","voteCount","vote_address","vote_count","options","createSmartContract","_options$abi","_options$bytecode","bytecode","_options$feeLimit","feeLimit","_options$callValue","callValue","_options$userFeePerce","userFeePercentage","_options$parameters","parameters","_options$name","_unused","payable","some","constructorParams","find","it","abiCoder","fee_limit","call_value","consume_user_resource_percent","parameter","contractAddress","functionSelector","triggerSmartContract","_parameters$i","function_selector","message","toUtf8","_this3","createToken","_options$name2","_options$abbreviation","abbreviation","_options$description","description","_options$url","_options$totalSupply","totalSupply","_options$trxRatio","trxRatio","_options$tokenRatio","tokenRatio","_options$saleStart","saleStart","now","_options$saleEnd","saleEnd","_options$freeBandwidt","freeBandwidth","_options$freeBandwidt2","freeBandwidthLimit","_options$frozenAmount","frozenAmount","_options$frozenDurati","frozenDuration","abbr","total_supply","trx_num","num","start_time","end_time","free_asset_net_limit","public_free_asset_net_limit","frozen_supply","frozen_amount","frozen_days","accountName","account_name","updateAccount","_this4","updateToken","_options$description2","_options$url2","_options$freeBandwidt3","_options$freeBandwidt4","new_limit","new_public_limit","_this5","createProposal","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","iterator","next","done","return","_this6","proposalID","proposal_id","deleteProposal","_this7","hasApproval","is_add_approval","isApproval","voteProposal","tokenName","tokenBalance","trxBalance","ownerAddress","console","log","first_token_id","first_token_balance","second_token_id","second_token_balance","resources","createTRXExchange","_this8","exchangeID","tokenAmount","exchange_id","token_id","quant","injectExchangeTokens","_this9","withdrawExchangeTokens","_this10","tokenAmountSold","tokenAmountExpected","fromAscii","expected","tradeExchangeTokens","trx_Trx","Trx","token","getCurrentBlock","defaultBlock","getBlockByHash","getBlockByNumber","getBlock","blockHash","blockID","getBlockTransactionCount","_ref$transactions","transactions","_ref2$transactions","getTransactionFromBlock","transactionID","getTransaction","getConfirmedTransaction","solidityNode","getTransactionInfo","limit","getTransactionsRelated","getTransactionsToAddress","getTransactionsFromAddress","direction","tx","sort","b","raw_data","_context","t0","account","_ref3","getAccount","getBalance","_ref4","_ref4$balance","balance","getUnconfirmedAccount","getUnconfirmedBalance","_ref5","_ref5$balance","_ref6","_ref6$freeNetUsed","freeNetUsed","_ref6$freeNetLimit","freeNetLimit","_ref6$NetUsed","NetUsed","_ref6$NetLimit","NetLimit","getBandwidth","_ref7","_ref7$assetIssue","assetIssue","tokens","parseToken","getTokensIssuedByAddress","getTokenFromID","listNodes","_ref8","_ref8$nodes","nodes","_ref9","_ref9$address","port","start","end","startNum","endNum","_ref10","_ref10$block","getBlockRange","listSuperRepresentatives","_ref11","_ref11$witnesses","witnesses","_ref13","_ref13$assetIssue","_ref12","_ref12$assetIssue","listTokens","timeUntilNextVoteCycle","_ref14","_ref14$num","Math","floor","getContract","useTronHeader","verifyMessage","messageBytes","toUtf8Bytes","messageDigest","keccak256","recovered","recoverAddress","tronAddress","fromHex","defaultPrivateKey","signingKey","SigningKey","signDigest","signatureHex","_context3","fromPrivateKey","t1","signedTransaction","sendRawTransaction","sendTransaction","transactionBuilder","_context4","_context5","_context6","_context7","_context8","proposal","getProposal","listProposals","_ref15","_ref15$proposals","proposals","getChainParameters","_ref16","_ref16$chainParameter","chainParameter","getAccountResources","exchange","getExchangeByID","listExchanges","_ref17","_ref17$exchanges","exchanges","_ref18","_ref18$exchanges","getFunctionSelector","getParamTypes","method_decodeOutput","filter","method_Method","Method","outputs","sha3","defaultOptions","shouldPollResponse","forEach","methodArgs","_call","send","_send","watch","_watch","deployed","stateMutability","constant_result","trx","broadcast","checkResult","_callee2","decoded","_args2","regenerator_default","wrap","_context2","prev","abrupt","error","sent","setTimeout","resMessage","contractResult","stop","eventServer","listener","lastBlock","sinceTimestamp","getTime","getEvents","_callee4","events","_events$sort","_events$sort2","latestEvent","newEvents","getEventResult","RegExp","priorEvent","bindListener","clearInterval","setInterval","contract_Contract","Contract","eventListener","methods","methodInstances","props","loadAbi","eventCallback","_getEvents","__proto__","prop","methodCall","onMethod","methodName","inputData","decodeInput","new","at","entrys","self","startCallback","_startEventListener","_stopEventListener","TronWeb","possibleConstructorReturn_default","getPrototypeOf_default","setFullNode","setSolidityNode","setEventServer","BigNumber","setPrivateKey","assertThisInitialized_default","abs","setAddress","emit","provider","knownProvider","isValidProvider","setStatusPage","isConnected","currentProviders","eventName","blockNumber","routeParams","response","getEventByTransactionID","val","fromDecimal","typeof_default","isFinite","Buffer","padEnd","toBigNumber","toNumber","isLessThan","sun","div","times","_unused2","external_eventemitter3_default"],"mappings":"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","file":"TronWeb.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 21);\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","module.exports = require(\"@babel/runtime/helpers/objectSpread\");","module.exports = require(\"ethers\");","module.exports = require(\"@babel/runtime/helpers/toConsumableArray\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"@babel/runtime/helpers/assertThisInitialized\");","module.exports = require(\"@babel/runtime/helpers/slicedToArray\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"js-sha3\");","module.exports = require(\"elliptic\");","module.exports = require(\"@babel/runtime/helpers/typeof\");","module.exports = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"@babel/runtime/helpers/getPrototypeOf\");","module.exports = require(\"@babel/runtime/helpers/inherits\");","module.exports = require(\"axios\");","module.exports = require(\"jssha\");","module.exports = require(\"validator\");","module.exports = require(\"eventemitter3\");","export function Base64() {\n    this._keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n    this.encode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n        \n        while (i < input.length) {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.encodeIgnoreUtf8 = inputBytes => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n        \n        while (i < inputBytes.length) {\n            chr1 = inputBytes[i++];\n            chr2 = inputBytes[i++];\n            chr3 = inputBytes[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.decode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n                \n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n        \n        return this._utf8_decode(output);\n    }\n\n    this.decodeToByteArray = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n        \n        return this._out2ByteArray(output);\n    }\n\n    this._out2ByteArray = utftext => {\n        const byteArray = new Array(utftext.length);\n\n        let i = 0;\n        let c = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n            byteArray[i] = c;\n            i++;\n        }\n\n        return byteArray;\n    }\n\n    this._utf8_encode = string => {\n        string = string.replace(/\\r\\n/g, \"\\n\");\n        let utftext = \"\";\n\n        for (let n = 0; n < string.length; n++) {\n            const c = string.charCodeAt(n);\n\n            if (c < 128) {\n                utftext += String.fromCharCode(c);\n            } else if ((c > 127) && (c < 2048)) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            } else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n        }\n\n        return utftext;\n    }\n\n    this._utf8_decode = utftext => {\n        let string = \"\";\n        let i = 0;\n        let c = 0;\n        let c2 = 0;\n        let c3 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n\n            if (c < 128) {\n                string += String.fromCharCode(c);\n                i++;\n            } else if ((c > 191) && (c < 224)) {\n                c2 = utftext.charCodeAt(i + 1);\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                i += 2;\n            } else {\n                c2 = utftext.charCodeAt(i + 1);\n                c3 = utftext.charCodeAt(i + 2);\n\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\n                i += 3;\n            }\n        }\n\n        return string;\n    }\n}\n","import { Base64 } from './base64';\n\nexport function byte2hexStr(byte) {\n    if (typeof byte !== 'number')\n        throw new Error('Input must be a number');\n\n    if (byte < 0 || byte > 255)\n        throw new Error('Input must be a byte');\n\n    const hexByteMap = '0123456789ABCDEF';\n\n    let str = '';\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n\n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length === 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else {\n            str += String.fromCharCode(arr[i]);\n        }\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.replace(/^0x/,'').split('');\n    let out = '';\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        let tmp = `0x${ arr[i * 2] }${ arr[i * 2 + 1] }`;\n        out += String.fromCharCode(tmp);\n    }\n\n    return out;\n}\n\nexport function byteArray2hexStr(byteArray) {\n    let str = '';\n\n    for (let i = 0; i < (byteArray.length); i++)\n        str += byte2hexStr(byteArray[i]);\n\n    return str;\n}\n\nexport function base64DecodeFromString(string64) {\n    return new Base64().decodeToByteArray(string64);\n}\n\nexport function base64EncodeToString(bytes) {\n    const b = new Base64();\n    const string64 = b.encodeIgnoreUtf8(bytes);\n\n    return string64\n}\n\n","export const ADDRESS_SIZE = 34;\nexport const ADDRESS_PREFIX = \"41\";\nexport const ADDRESS_PREFIX_BYTE = 0x41;\n","\nimport { byte2hexStr, bytesToString, hextoString, byteArray2hexStr, base64DecodeFromString, base64EncodeToString } from './bytes';\n\nexport function bin2String(array) {\n    // TODO Do we need this alias?\n    return bytesToString(array);\n}\n\nexport function arrayEquals(array1, array2, strict) {\n    if (array1.length != array2.length)\n        return false;\n        \n    let i;\n\n    for (i = 0; i < array1.length; i++) {\n        if (strict) {\n            if (array1[i] != array2[i])\n                return false;\n        } else if (JSON.stringify(array1[i]) != JSON.stringify(array2[i]))\n            return false;\n    }\n\n    return true;\n}\n\nexport function stringToBytes(str) {\n\n    if (typeof str !== 'string')\n        throw new Error('The passed string is not a string')\n\n    const bytes = new Array();\n    let len;\n    let c;\n\n    len = str.length;\n\n    for (let i = 0; i < len; i++) {\n        c = str.charCodeAt(i);\n\n        if (c >= 0x010000 && c <= 0x10FFFF) {\n            bytes.push(((c >> 18) & 0x07) | 0xF0);\n            bytes.push(((c >> 12) & 0x3F) | 0x80);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000800 && c <= 0x00FFFF) {\n            bytes.push(((c >> 12) & 0x0F) | 0xE0);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000080 && c <= 0x0007FF) {\n            bytes.push(((c >> 6) & 0x1F) | 0xC0);\n            bytes.push((c & 0x3F) | 0x80);\n        } else bytes.push(c & 0xFF);\n    }\n\n    return bytes;\n}\n\nexport { byte2hexStr, bytesToString, hextoString, byteArray2hexStr, base64DecodeFromString, base64EncodeToString }\n\nexport function hexChar2byte(c) {\n    let d;\n\n    if (c >= 'A' && c <= 'F')\n        d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    else if (c >= 'a' && c <= 'f')\n        d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10;\n    else if (c >= '0' && c <= '9')\n        d = c.charCodeAt(0) - '0'.charCodeAt(0);\n\n    if (typeof d === 'number')\n        return d;\n    else\n        throw new Error('The passed hex char is not a valid hex char');\n}\n\nexport function isHexChar(c) {\n    if ((c >= 'A' && c <= 'F') ||\n        (c >= 'a' && c <= 'f') ||\n        (c >= '0' && c <= '9')) {\n        return 1;\n    }\n\n    return 0;\n}\n\nexport function hexStr2byteArray(str) {\n    if (typeof str !== 'string')\n        throw new Error('The passed string is not a string')\n\n    const byteArray = Array();\n    let d = 0;\n    let j = 0;\n    let k = 0;\n\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charAt(i);\n\n        if (isHexChar(c)) {\n            d <<= 4;\n            d += hexChar2byte(c);\n            j++;\n\n            if (0 === (j % 2)) {\n                byteArray[k++] = d;\n                d = 0;\n            }\n        } else\n            throw new Error('The passed hex char is not a valid hex string')\n    }\n\n    return byteArray;\n}\n\n//yyyy-MM-DD HH-mm-ss\nexport function strToDate(str) {\n\n    if (!/^\\d{4}-\\d{2}-\\d{2}( \\d{2}-\\d{2}-\\d{2}|)/.test(str))\n        throw new Error('The passed date string is not valid')\n\n    const tempStrs = str.split(\" \");\n    const dateStrs = tempStrs[0].split(\"-\");\n    const year = parseInt(dateStrs[0], 10);\n    const month = parseInt(dateStrs[1], 10) - 1;\n    const day = parseInt(dateStrs[2], 10);\n\n    if (tempStrs.length > 1) {\n        const timeStrs = tempStrs[1].split(\"-\");\n        const hour = parseInt(timeStrs[0] , 10);\n        const minute = parseInt(timeStrs[1], 10);\n        const second = parseInt(timeStrs[2], 10);\n\n        return new Date(year, month, day, hour, minute, second);\n    }\n\n    return new Date(year, month, day);\n}\n\nexport function isNumber(c) {\n    if (c >= '0' && c <= '9')\n        return 1;\n        \n    return 0;\n}\n\n//return 1: address  --- 20Bytes HexString\n//return 2: blockNumber ------ Decimal number\n//return 3: assetName ------ String\n//return other: error\nexport function getStringType(str) {\n    if (null == str)\n        return -1;\n\n    if (typeof (str) != 'string')\n        return -1;\n\n    if (str.length == 0 || str == \"\")\n        return -1;\n\n    let i = 0;\n\n    // TODO Should we return 1 if someone passes a full, 42-chars long address?\n    // if (str.length == 42 && /^41/.test(str)) {\n    //     for (; i < 40; i++) {\n    //         var c = str.charAt(i+2);\n    //\n    //         if (!isHexChar(c))\n    //             break;\n    //     }\n    // } else\n    if (str.length == 40) {\n        for (; i < 40; i++) {\n            var c = str.charAt(i);\n\n            if (!isHexChar(c))\n                break;\n        }\n    }\n\n    if (i == 40)\n        return 1; //40 Hex, Address\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (!isNumber(c))\n            break;\n    }\n\n    if (i == str.length)\n        return 2; // All Decimal number, BlockNumber\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (c > ' ')\n            return 3; // At least one visible character\n    }\n\n    return -1;\n}\n","const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nconst ALPHABET_MAP = {};\n\nfor (let i = 0; i < ALPHABET.length; i++)\n    ALPHABET_MAP[ALPHABET.charAt(i)] = i;\n\nconst BASE = 58;\n\nexport function encode58(buffer) {\n    if (buffer.length === 0)\n        return '';\n\n    let i;\n    let j;\n\n    const digits = [0];\n\n    for (i = 0; i < buffer.length; i++) {\n        for (j = 0; j < digits.length; j++) \n            digits[j] <<= 8;\n\n        digits[0] += buffer[i];\n        let carry = 0;\n\n        for (j = 0; j < digits.length; ++j) {\n            digits[j] += carry;\n            carry = (digits[j] / BASE) | 0;\n            digits[j] %= BASE\n        }\n\n        while (carry) {\n            digits.push(carry % BASE);\n            carry = (carry / BASE) | 0\n        }\n    }\n\n    for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++) \n        digits.push(0);\n\n    return digits.reverse().map(digit => ALPHABET[digit]).join('');\n}\n\nexport function decode58(string) {\n    if (string.length === 0)\n        return [];\n\n    let i;\n    let j;\n\n    const bytes = [0];\n\n    for (i = 0; i < string.length; i++) {\n        const c = string[i];\n\n        if (!(c in ALPHABET_MAP))\n            throw new Error('Non-base58 character');\n\n        for (j = 0; j < bytes.length; j++) \n            bytes[j] *= BASE;\n\n        bytes[0] += ALPHABET_MAP[c];\n        let carry = 0;\n\n        for (j = 0; j < bytes.length; ++j) {\n            bytes[j] += carry;\n            carry = bytes[j] >> 8;\n            bytes[j] &= 0xff;\n        }\n\n        while (carry) {\n            bytes.push(carry & 0xff);\n            carry >>= 8;\n        }\n    }\n\n    for (i = 0; string[i] === '1' && i < string.length - 1; i++)\n        bytes.push(0);\n\n    return bytes.reverse();\n}\n","import jsSHA from 'jssha';\n\nimport { ADDRESS_PREFIX, ADDRESS_PREFIX_BYTE, ADDRESS_SIZE } from './address';\nimport { base64EncodeToString } from './code';\nimport { base64DecodeFromString, hexStr2byteArray } from './code';\nimport { encode58, decode58 } from './base58';\nimport { keccak256 } from 'js-sha3';\nimport { byte2hexStr, byteArray2hexStr } from './bytes';\nimport { ec as EC } from 'elliptic';\n\nexport function getBase58CheckAddress(addressBytes) {\n    const hash0 = SHA256(addressBytes);\n    const hash1 = SHA256(hash0);\n\n    let checkSum = hash1.slice(0, 4);\n    checkSum = addressBytes.concat(checkSum);\n\n    return encode58(checkSum);\n}\n\nexport function decodeBase58Address(base58Sting) {\n    if (typeof (base58Sting) != 'string')\n        return false;\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    let address = decode58(base58Sting);\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    const len = address.length;\n    const offset = len - 4;\n    const checkSum = address.slice(offset);\n\n    address = address.slice(0, offset);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return address;\n    }\n\n    throw new Error('Invalid address provided');\n}\n\nexport function signTransaction(priKeyBytes, transaction) {\n    if (typeof priKeyBytes === 'string')\n        priKeyBytes = hexStr2byteArray(priKeyBytes);\n\n    const txID = transaction.txID;\n    const signature = ECKeySign(hexStr2byteArray(txID), priKeyBytes);\n\n    transaction.signature = [ signature ];\n    return transaction;\n}\n\nexport function arrayToBase64String(a) {\n    return btoa(String.fromCharCode(...a));\n}\n\nexport function signBytes(privateKey, contents) {\n    if (typeof privateKey === 'string')\n        privateKey = hexStr2byteArray(privateKey);\n\n    const hashBytes = SHA256(contents);\n    const signBytes = ECKeySign(hashBytes, privateKey);\n\n    return signBytes;\n}\n\nexport function getRowBytesFromTransactionBase64(base64Data) {\n    const bytesDecode = base64DecodeFromString(base64Data);\n    const transaction = proto.protocol.Transaction.deserializeBinary(bytesDecode);\n    const raw = transaction.getRawData();\n\n    return raw.serializeBinary();\n}\n\nexport function genPriKey() {\n    const ec = new EC('secp256k1');\n    const key = ec.genKeyPair();\n    const priKey = key.getPrivate();\n\n    let priKeyHex = priKey.toString('hex');\n\n    while (priKeyHex.length < 64) {\n        priKeyHex = `0${priKeyHex}`;\n    }\n\n    return hexStr2byteArray(priKeyHex);\n}\n\nexport function computeAddress(pubBytes) {\n    if (pubBytes.length === 65)\n        pubBytes = pubBytes.slice(1);\n\n    const hash = keccak256(pubBytes).toString();\n    const addressHex = ADDRESS_PREFIX + hash.substring(24);\n\n    return hexStr2byteArray(addressHex);\n}\n\nexport function getAddressFromPriKey(priKeyBytes) {\n    let pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    return computeAddress(pubBytes);\n}\n\nexport function decode58Check(addressStr) {\n    const decodeCheck = decode58(addressStr);\n\n    if (decodeCheck.length <= 4)\n        return false;\n\n    const decodeData = decodeCheck.slice(0, decodeCheck.length - 4);\n    const hash0 = SHA256(decodeData);\n    const hash1 = SHA256(hash0);\n\n    if (hash1[0] === decodeCheck[decodeData.length] &&\n        hash1[1] === decodeCheck[decodeData.length + 1] &&\n        hash1[2] === decodeCheck[decodeData.length + 2] &&\n        hash1[3] === decodeCheck[decodeData.length + 3]) {\n        return decodeData;\n    }\n\n    return false;\n}\n\nexport function isAddressValid(base58Str) {\n    if (typeof (base58Str) !== 'string')\n        return false;\n        \n    if (base58Str.length !== ADDRESS_SIZE)\n        return false;\n\n    let address = decode58(base58Str);\n\n    if (address.length !== 25)\n        return false;\n        \n    if (address[0] !== ADDRESS_PREFIX_BYTE)\n        return false;\n        \n    const checkSum = address.slice(21);\n    address = address.slice(0, 21);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return true\n    }\n\n    return false;\n}\n\nexport function getBase58CheckAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n\n    return getBase58CheckAddress(addressBytes);\n}\n\nexport function getHexStrAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressHex = byteArray2hexStr(addressBytes);\n\n    return addressHex;\n}\n\nexport function getAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressBase64 = base64EncodeToString(addressBytes);\n\n    return addressBase64;\n}\n\nexport function getPubKeyFromPriKey(priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const pubkey = key.getPublic();\n    const x = pubkey.x;\n    const y = pubkey.y;\n\n    let xHex = x.toString('hex');\n\n    while (xHex.length < 64) {\n        xHex = `0${xHex}`;\n    }\n\n    let yHex = y.toString('hex');\n\n    while (yHex.length < 64) {\n        yHex = `0${yHex}`;\n    }\n\n    const pubkeyHex = `04${xHex}${yHex}`;\n    const pubkeyBytes = hexStr2byteArray(pubkeyHex);\n\n    return pubkeyBytes;\n}\n\nexport function ECKeySign(hashBytes, priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const signature = key.sign(hashBytes);\n    const r = signature.r;\n    const s = signature.s;\n    const id = signature.recoveryParam;\n\n    let rHex = r.toString('hex');\n\n    while (rHex.length < 64) {\n        rHex = `0${rHex}`;\n    }\n\n    let sHex = s.toString('hex');\n\n    while (sHex.length < 64) {\n        sHex = `0${sHex}`;\n    }\n\n    const idHex = byte2hexStr(id);\n    const signHex = rHex + sHex + idHex;\n\n    return signHex;\n}\n\nexport function SHA256(msgBytes) {\n    const shaObj = new jsSHA('SHA-256', 'HEX');\n    const msgHex = byteArray2hexStr(msgBytes);\n\n    shaObj.update(msgHex);\n    const hashHex = shaObj.getHash('HEX');\n\n    return hexStr2byteArray(hashHex);\n}\n\nexport function passwordToAddress(password) {\n    const com_priKeyBytes = base64DecodeFromString(password);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n\nexport function pkToAddress(privateKey) {\n    const com_priKeyBytes = hexStr2byteArray(privateKey);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n","import { byteArray2hexStr } from './bytes';\nimport { \n    getBase58CheckAddress,\n    genPriKey,\n    getAddressFromPriKey,\n    getPubKeyFromPriKey\n} from './crypto';\n\nexport function generateAccount() {\n    const priKeyBytes = genPriKey();\n    const pubKeyBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = getAddressFromPriKey(priKeyBytes);\n    \n    const privateKey = byteArray2hexStr(priKeyBytes);\n    const publicKey = byteArray2hexStr(pubKeyBytes);\n\n    return {\n        privateKey,\n        publicKey,\n        address: {\n            base58: getBase58CheckAddress(addressBytes),\n            hex: byteArray2hexStr(addressBytes)\n        }\n    }\n}","import * as Ethers from 'ethers';\nimport TronWeb from 'index';\n\nconst abiCoder = new Ethers.utils.AbiCoder();\n\nexport function decodeParams(names, types, output, ignoreMethodHash) {\n\n    if (!output || typeof output === 'boolean') {\n        ignoreMethodHash = output;\n        output = types;\n        types = names;\n        names = [];\n    }\n\n    if (ignoreMethodHash && output.replace(/^0x/,'').length % 64 === 8)\n        output = '0x' + output.replace(/^0x/,'').substring(8);\n\n    if (output.replace(/^0x/,'').length % 64)\n        throw new Error('The encoded string is not valid. Its length must be a multiple of 64.');\n\n    return abiCoder.decode(types, output).reduce((obj, arg, index) => {\n        if(types[index] == 'address')\n            arg = '41' + arg.substr(2).toLowerCase();\n\n        if(names.length)\n            obj[names[index]] = arg;\n        else obj.push(arg);\n\n        return obj;\n    }, names.length ? {} : []);\n}\n\nexport function encodeParams(types, values) {\n\n    for (let i =0;i<types.length;i++) {\n        if (types[i] === 'address') {\n            values[i] =  TronWeb.address.toHex(values[i]).replace(/^41/, '0x');\n        }\n    }\n\n    return abiCoder.encode(types, values);\n}\n","import * as accounts from './accounts';\nimport * as base58 from './base58';\nimport * as bytes from './bytes';\nimport * as crypto from './crypto';\nimport * as code from './code';\nimport * as abi from './abi';\n\nimport validator from 'validator';\nimport BigNumber from 'bignumber.js';\n\nconst utils = {\n    isValidURL(url) {\n        if (typeof url !== 'string')\n            return false;\n        return validator.isURL(url.toString(), {\n            protocols: [ 'http', 'https' ]\n        });\n    },\n\n    isObject(obj) {\n        return obj === Object(obj) && Object.prototype.toString.call(obj) !== '[object Array]';\n    },\n\n    isArray(array) {\n        return Array.isArray(array);\n    },\n\n    isJson(string) {\n        try {\n            return !!JSON.parse(string);\n        } catch (ex) {\n            return false;\n        }\n    },\n\n    isBoolean(bool) {\n        return typeof bool === 'boolean';\n    },\n\n    isBigNumber(number) {\n        return number && (number instanceof BigNumber || (number.constructor && number.constructor.name === 'BigNumber'));\n    },\n\n    isString(string) {\n        return typeof string === 'string' || (string && string.constructor && string.constructor.name === 'String');\n    },\n\n    isFunction(obj) {\n        return typeof obj === 'function';\n    },\n\n    isHex(string) {\n        return (typeof string === 'string'\n            && !isNaN(parseInt(string, 16))\n            && /^(0x|)[a-fA-F0-9]+$/.test(string));\n    },\n\n    isInteger(number) {\n        return Number.isInteger(\n            Number(number)\n        );\n    },\n\n    hasProperty(obj, property) {\n        return Object.prototype.hasOwnProperty.call(obj, property);\n    },\n\n    hasProperties(obj, ...properties) {\n        return properties.length && !properties.map(property => {\n            return this.hasProperty(obj, property)\n        }).includes(false);\n    },\n\n    injectPromise(func, ...args) {\n        return new Promise((resolve, reject) => {\n            func(...args, (err, res) => {\n                if(err)\n                    reject(err);\n                else resolve(res);\n            });\n        });\n    },\n\n    promiseInjector(scope) {\n        return (func, ...args) => {\n            return this.injectPromise(func.bind(scope), ...args);\n        }\n    },\n\n    mapEvent(event) {\n        return {\n            block: event.block_number,\n            timestamp: event.block_timestamp,\n            contract: event.contract_address,\n            name: event.event_name,\n            transaction: event.transaction_id,\n            result: event.result,\n            resourceNode: event.resource_Node\n        };\n    },\n\n    parseEvent(event, { inputs: abi }) {\n        if(!event.result)\n            return event;\n\n        if (this.isObject(event.result)) {\n            for (var i = 0; i < abi.length; i++) {\n                let obj = abi[i];\n                if (obj.type == 'address' && obj.name in event.result)\n                    event.result[obj.name] = '41' + event.result[obj.name].substr(2).toLowerCase();\n            }\n        } else if (this.isArray(event.result)) {\n            event.result = event.result.reduce((obj, result, index) => {\n                const {\n                    name,\n                    type\n                } = abi[index];\n\n                if(type == 'address')\n                    result = '41' + result.substr(2).toLowerCase();\n\n                obj[name] = result;\n\n                return obj;\n            }, {});\n        }\n\n        return event;\n    },\n\n    padLeft(input, padding, amount) {\n        let res = input.toString();\n\n        while(res.length < amount)\n            res = padding + res;\n\n        return res;\n    }\n}\n\nexport default {\n    ...utils,\n    code,\n    accounts,\n    base58,\n    bytes,\n    crypto,\n    abi\n};\n","import HttpProvider from './HttpProvider';\n\nexport default {\n    HttpProvider\n};","import axios from 'axios';\nimport utils from 'utils';\n\nexport default class HttpProvider {\n    constructor(host, timeout = 30000, user = false, password = false, headers = {}, statusPage = '/') {\n        if(!utils.isValidURL(host))\n            throw new Error('Invalid URL provided to HttpProvider');\n\n        if(isNaN(timeout) || timeout < 0)\n            throw new Error('Invalid timeout duration provided');\n\n        if(!utils.isObject(headers))\n            throw new Error('Invalid headers object provided');\n\n        host = host.replace(/\\/+$/,'');\n\n        this.host = host;\n        this.timeout = timeout;\n        this.user = user;\n        this.password = password;\n        this.headers = headers;\n        this.statusPage = statusPage;\n\n        this.instance = axios.create({\n            baseURL: host,\n            timeout: timeout,\n            headers: headers,\n            auth: user && {\n                user,\n                password\n            },\n        });\n    }\n\n    setStatusPage(statusPage = '/') {\n        this.statusPage = statusPage;\n    }\n\n    async isConnected(statusPage = this.statusPage) {\n        return this.request(statusPage).then(data => {\n            return utils.hasProperties(data, 'blockID', 'block_header');\n        }).catch(() => false);\n    }\n\n    request(url, payload = {}, method = 'get') {\n        method = method.toLowerCase();\n\n        return this.instance.request({\n            data: method == 'post' && payload,\n            params: method =='get' && payload,\n            url,\n            method\n        }).then(({ data }) => data);\n    }\n};\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport * as Ethers from 'ethers';\n\nexport default class TransactionBuilder {\n    constructor(tronWeb = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    sendTrx(to = false, amount = 0, from = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.sendTrx, to, amount, from);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!this.tronWeb.isAddress(from))\n            return callback('Invalid origin address provided');\n\n        to = this.tronWeb.address.toHex(to);\n        from = this.tronWeb.address.toHex(from);\n\n        if(to === from)\n            return callback('Cannot transfer TRX to the same account');\n\n        this.tronWeb.fullNode.request('wallet/createtransaction', {\n            to_address: to,\n            owner_address: from,\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    sendToken(to = false, amount = 0, tokenID = false, from = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, from);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if(!this.tronWeb.isAddress(from))\n            return callback('Invalid origin address provided');\n\n        to = this.tronWeb.address.toHex(to);\n        tokenID = this.tronWeb.fromUtf8(tokenID);\n        from = this.tronWeb.address.toHex(from);\n\n        if(to === from)\n            return callback('Cannot transfer tokens to the same account');\n\n        this.tronWeb.fullNode.request('wallet/transferasset', {\n            to_address: to,\n            owner_address: from,\n            asset_name: tokenID,\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    purchaseToken(issuerAddress = false, tokenID = false, amount = 0, buyer = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(buyer)) {\n            callback = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.purchaseToken, issuerAddress, tokenID, amount, buyer);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!this.tronWeb.isAddress(buyer))\n            return callback('Invalid buyer address provided');\n\n        this.tronWeb.fullNode.request('wallet/participateassetissue', {\n            to_address: this.tronWeb.address.toHex(issuerAddress),\n            owner_address: this.tronWeb.address.toHex(buyer),\n            asset_name: this.tronWeb.fromUtf8(tokenID),\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, callback = false)\n    {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if(!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, address);\n\n        if(![ 'BANDWIDTH', 'ENERGY' ].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isInteger(duration) || duration < 3)\n            return callback('Invalid duration provided, minimum of 3 days');\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/freezebalance', {\n            owner_address: this.tronWeb.address.toHex(address),\n            frozen_balance: parseInt(amount),\n            frozen_duration: parseInt(duration),\n            resource: resource\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    unfreezeBalance(resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, callback = false)\n    {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if(!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, address);\n\n        if(![ 'BANDWIDTH', 'ENERGY' ].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/unfreezebalance', {\n            owner_address: this.tronWeb.address.toHex(address),\n            resource: resource\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    withdrawBlockRewards(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.withdrawBlockRewards, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n        \n        this.tronWeb.fullNode.request('wallet/withdrawbalance', {\n            owner_address: this.tronWeb.address.toHex(address)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    applyForSR(address = this.tronWeb.defaultAddress.hex, url = false, callback = false) {\n        if(utils.isValidURL(address)) {\n            callback = url || false;\n            url = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.applyForSR, address, url);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isValidURL(url))\n            return callback('Invalid url provided');\n        \n        this.tronWeb.fullNode.request('wallet/createwitness', {\n            owner_address: this.tronWeb.address.toHex(address),\n            url: this.tronWeb.fromUtf8(url)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    vote(votes = {}, voterAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.vote, votes, voterAddress);\n\n        if(!utils.isObject(votes) || !Object.keys(votes).length)\n            return callback('Invalid votes object provided');\n\n        if(!this.tronWeb.isAddress(voterAddress))\n            return callback('Invalid voter address provided');\n\n        let invalid = false;\n\n        votes = Object.entries(votes).map(([ srAddress, voteCount ]) => {\n            if(invalid)\n                return;\n\n            if(!this.tronWeb.isAddress(srAddress)) {\n                callback('Invalid SR address provided: ' + srAddress);\n                return invalid = true;\n            }\n\n            if(!utils.isInteger(voteCount) || voteCount <= 0) {\n                callback('Invalid vote count provided for SR: ' + srAddress);\n                return invalid = true;\n            }\n\n            return {\n                vote_address: this.tronWeb.address.toHex(srAddress),\n                vote_count: parseInt(voteCount)\n            };\n        });\n\n        if(invalid)\n            return;\n\n        this.tronWeb.fullNode.request('wallet/votewitnessaccount', {\n            owner_address: this.tronWeb.address.toHex(voterAddress),\n            votes\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    createSmartContract(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.createSmartContract, options, issuerAddress);\n\n        let {\n            abi = false,\n            bytecode = false,\n            feeLimit = 1_000_000_000,\n            callValue = 0,\n            userFeePercentage = 0,\n            parameters = [],\n            name = \"\",\n        } = options;\n        \n\n        if(abi && utils.isString(abi)) {\n            try {\n                abi = JSON.parse(abi);\n            } catch{\n                return callback('Invalid options.abi provided');\n            }\n        }\n\n        if(!utils.isArray(abi))\n            return callback('Invalid options.abi provided');\n\n\n        const payable = abi.some(func => {\n            return func.type == 'constructor' && func.payable;\n        });\n\n        if(!utils.isHex(bytecode))\n            return callback('Invalid options.bytecode provided');\n\n        if(!utils.isInteger(feeLimit) || feeLimit <= 0 || feeLimit > 1_000_000_000)\n            return callback('Invalid options.feeLimit provided');\n\n        if(!utils.isInteger(callValue) || callValue < 0)\n            return callback('Invalid options.callValue provided');\n\n        if(payable && callValue == 0)\n            return callback('When contract is payable, options.callValue must be a positive integer');\n\n        if(!payable && callValue > 0)\n            return callback('When contract is not payable, options.callValue must be 0');\n\n        if(!utils.isInteger(userFeePercentage) || userFeePercentage < 0 || userFeePercentage > 100)\n            return callback('Invalid options.userFeePercentage provided');\n\n        if(!utils.isArray(parameters))\n            return callback('Invalid parameters provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        var constructorParams = abi.find(\n            (it) => {\n                return it.type === 'constructor';\n            }\n        );\n\n        if(typeof constructorParams !== 'undefined' && constructorParams) {\n            const abiCoder = new Ethers.utils.AbiCoder();\n            const types = [];\n            const values = [];\n            constructorParams = constructorParams.inputs;\n\n            if(parameters.length != constructorParams.length)\n                return callback(`constructor needs ${constructorParams.length} but ${parameters.length} provided`);\n\n            for(let i = 0; i < parameters.length; i++) {\n                let type = constructorParams[i].type;\n                let value = parameters[i];\n\n                if(!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if(type == 'address')\n                    value = this.tronWeb.address.toHex(value).replace(/^(41)/, '0x');\n                    \n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        this.tronWeb.fullNode.request('wallet/deploycontract', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            consume_user_resource_percent: userFeePercentage,\n            abi: JSON.stringify(abi),\n            bytecode,\n            parameter: parameters,\n            name\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    triggerSmartContract(\n        contractAddress, \n        functionSelector,\n        feeLimit = 1_000_000_000,\n        callValue = 0,\n        parameters = [], \n        issuerAddress = this.tronWeb.defaultAddress.hex, \n        callback = false\n    ) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(parameters)) {\n            callback = parameters;\n            parameters = [];\n        }\n\n        if(utils.isFunction(callValue)) {\n            callback = callValue;\n            callValue = 0;\n        }\n\n        if(utils.isFunction(feeLimit)) {\n            callback = feeLimit;\n            feeLimit = 1_000_000_000;\n        }\n\n        if(!callback) {\n            return this.injectPromise(\n                this.triggerSmartContract, \n                contractAddress, \n                functionSelector, \n                feeLimit,\n                callValue, \n                parameters,\n                issuerAddress\n            );\n        }\n\n        if(!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if(!utils.isString(functionSelector) || !functionSelector.length)\n            return callback('Invalid function selector provided');\n\n        if(!utils.isInteger(callValue) || callValue < 0)\n            return callback('Invalid call value provided');\n\n        if(!utils.isInteger(feeLimit) || feeLimit <= 0 || feeLimit > 1_000_000_000)\n            return callback('Invalid fee limit provided');\n\n        if(!utils.isArray(parameters))\n            return callback('Invalid parameters provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        functionSelector = functionSelector.replace('/\\s*/g', '');\n\n        if(parameters.length) {\n            const abiCoder = new Ethers.utils.AbiCoder();\n            const types = [];\n            const values = [];\n\n            for(let i = 0; i < parameters.length; i++) {\n                let { type, value } = parameters[i];\n\n                if(!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if(type == 'address')\n                    value = this.tronWeb.address.toHex(value).replace(/^(41)/, '0x');\n                    \n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        this.tronWeb.fullNode.request('wallet/triggersmartcontract', {\n            contract_address: this.tronWeb.address.toHex(contractAddress),\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            function_selector: functionSelector,\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            parameter: parameters\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            if(!transaction.result.result)\n                return callback(transaction);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    createToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.createToken, options, issuerAddress);\n\n        const {\n            name = false,\n            abbreviation = false,\n            description = false,\n            url = false,\n            totalSupply = 0,\n            trxRatio = 1, // How much TRX will `tokenRatio` cost?\n            tokenRatio = 1, // How many tokens will `trxRatio` afford?\n            saleStart = Date.now(),\n            saleEnd = false,            \n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0, // Out of `totalFreeBandwidth`, the amount each token holder get\n            frozenAmount = 0,\n            frozenDuration = 0\n        } = options;\n\n        if(!utils.isString(name) || !name.length)\n            return callback('Invalid token name provided');\n\n        if(!utils.isString(abbreviation) || !abbreviation.length)\n            return callback('Invalid token abbreviation provided');\n\n        if(!utils.isInteger(totalSupply) || totalSupply <= 0)\n            return callback('Invalid supply amount provided');\n\n        if(!utils.isInteger(trxRatio) || trxRatio <= 0)\n            return callback('TRX ratio must be a positive integer');\n\n        if(!utils.isInteger(tokenRatio) || tokenRatio <= 0)\n            return callback('Token ratio must be a positive integer');\n\n        if(!utils.isInteger(saleStart) || saleStart < Date.now())\n            return callback('Invalid sale start timestamp provided');\n\n        if(!utils.isInteger(saleEnd) || saleEnd <= saleStart)\n            return callback('Invalid sale end timestamp provided');\n\n        if(!utils.isString(description) || !description.length)\n            return callback('Invalid token description provided');\n\n        if(!utils.isString(url) || !url.length || !utils.isValidURL(url))\n            return callback('Invalid token url provided');\n\n        if(!utils.isInteger(freeBandwidth) || freeBandwidth < 0)\n            return callback('Invalid free bandwidth amount provided');\n\n        if(!utils.isInteger(freeBandwidthLimit) || freeBandwidthLimit < 0 || (freeBandwidth && !freeBandwidthLimit))\n            return callback('Invalid free bandwidth limit provided');\n\n        if(!utils.isInteger(frozenAmount) || frozenAmount < 0 || (!frozenDuration && frozenAmount))\n            return callback('Invalid frozen supply provided');\n\n        if(!utils.isInteger(frozenDuration) || frozenDuration < 0 || (frozenDuration && !frozenAmount))\n            return callback('Invalid frozen duration provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        this.tronWeb.fullNode.request('wallet/createassetissue', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            name: this.tronWeb.fromUtf8(name),\n            abbr: this.tronWeb.fromUtf8(abbreviation),\n            description: this.tronWeb.fromUtf8(description),\n            url: this.tronWeb.fromUtf8(url),\n            total_supply: parseInt(totalSupply),\n            trx_num: parseInt(trxRatio),\n            num: parseInt(tokenRatio),\n            start_time: parseInt(saleStart),\n            end_time: parseInt(saleEnd),\n            free_asset_net_limit: parseInt(freeBandwidth),\n            public_free_asset_net_limit: parseInt(freeBandwidthLimit),\n            frozen_supply: {\n                frozen_amount: parseInt(frozenAmount),\n                frozen_days: parseInt(frozenDuration)\n            }\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    updateAccount(accountName = false, address = this.tronWeb.defaultAddress.hex, callback = false)\n    {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback) {\n            return this.injectPromise(this.updateAccount, accountName, address);\n        }\n\n        if (!utils.isString(accountName) || !accountName.length) {\n            return callback('Name must be a string');\n        }\n\n        if(!this.tronWeb.isAddress(address)) {\n            return callback('Invalid origin address provided');\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateaccount', {\n            account_name: this.tronWeb.fromUtf8(accountName),\n            owner_address: this.tronWeb.address.toHex(address),\n        }, 'post').then(transaction => {\n\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    updateToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.updateToken, options, issuerAddress);\n\n        const {\n            description = false,\n            url = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0 // Out of `totalFreeBandwidth`, the amount each token holder get\n        } = options;\n\n        if(!utils.isString(description) || !description.length)\n            return callback('Invalid token description provided');\n\n        if(!utils.isString(url) || !url.length || !utils.isValidURL(url))\n            return callback('Invalid token url provided');\n\n        if(!utils.isInteger(freeBandwidth) || freeBandwidth < 0)\n            return callback('Invalid free bandwidth amount provided');\n\n        if(!utils.isInteger(freeBandwidthLimit) || freeBandwidthLimit < 0 || (freeBandwidth && !freeBandwidthLimit))\n            return callback('Invalid free bandwidth limit provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        this.tronWeb.fullNode.request('wallet/updateasset', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            description: this.tronWeb.fromUtf8(description),\n            url: this.tronWeb.fromUtf8(url),\n            new_limit: parseInt(freeBandwidth),\n            new_public_limit: parseInt(freeBandwidthLimit)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    purchaseAsset(...args) {\n        return this.purchaseToken(...args);\n    }\n\n    createAsset(...args) {\n        return this.createToken(...args);\n    }\n\n    updateAsset(...args) {\n        return this.updateToken(...args);\n    }\n\n    /**\n     * Creates a proposal to modify the network.\n     * Can only be created by a current Super Representative.\n     */\n    createProposal(parameters = false, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!parameters)\n            return callback('Invalid proposal parameters provided');\n\n        if(!callback)\n            return this.injectPromise(this.createProposal, parameters, issuerAddress);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuerAddress provided');\n\n        if(!utils.isArray(parameters))\n            return callback('Invalid parameters provided');\n\n        for (let parameter of parameters) {\n            if(!utils.isObject(parameter))\n                return callback('Invalid parameters provided');\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposalcreate', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            parameters: parameters\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Deletes a network modification proposal that the owner issued.\n     * Only current Super Representative can vote on a proposal.\n     */\n    deleteProposal(proposalID = false, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.deleteProposal, proposalID, issuerAddress);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuerAddress provided');\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/proposaldelete', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            proposal_id: parseInt(proposalID)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds a vote to an issued network modification proposal.\n     * Only current Super Representative can vote on a proposal.\n     */\n    voteProposal(proposalID = false, hasApproval = false, voterAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.voteProposal, proposalID, hasApproval, voterAddress);\n\n        if(!this.tronWeb.isAddress(voterAddress))\n            return callback('Invalid voterAddress address provided');\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        if(!utils.isBoolean(hasApproval))\n            return callback('Invalid hasApproval provided');\n\n        this.tronWeb.fullNode.request('wallet/proposalapprove', {\n            owner_address: this.tronWeb.address.toHex(voterAddress),\n            proposal_id: parseInt(proposalID),\n            is_add_approval: isApproval.toString()\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between a token and TRX.\n     * Token Name should be a CASE SENSITIVE string. \n     * PLEASE VERIFY THIS ON TRONSCAN.\n     */\n    createTRXExchange(tokenName, tokenBalance, trxBalance, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createTRXExchange, tokenName, tokenBalance, trxBalance, ownerAddress);\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid address provided');\n\n        if (!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if (!utils.isInteger(tokenBalance) || tokenBalance <= 0\n            || !utils.isInteger(trxBalance) || trxBalance <= 0)\n            return callback('Invalid amount provided');\n\n        console.log({\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            first_token_id: this.tronWeb.fromUtf8(tokenName),\n            first_token_balance: tokenBalance,\n            second_token_id: '5f', // Constant for TRX.\n            second_token_balance: trxBalance\n        })\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            first_token_id: this.tronWeb.fromUtf8(tokenName),\n            first_token_balance: tokenBalance,\n            second_token_id: '5f', // Constant for TRX.\n            second_token_balance: trxBalance\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds tokens into a bancor style exchange.\n     */\n    injectExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.injectExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmount) || tokenAmount < 1)\n            return callback('Invalid tokenAmount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangeinject', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromUtf8(tokenName),\n            quant:parseInt(tokenAmount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Withdraws tokens from a bancor style exchange.\n     */\n    withdrawExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.withdrawExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmount) || tokenAmount < 1)\n            return callback('Invalid tokenAmount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangewithdraw', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromUtf8(tokenName),\n            quant:parseInt(tokenAmount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Trade tokens on a bancor style exchange.\n     */\n    tradeExchangeTokens(exchangeID = false,\n        tokenName = false, \n        tokenAmountSold = 0, \n        tokenAmountExpected = 0, \n        ownerAddress = this.tronWeb.defaultAddress.hex, \n        callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.tradeExchangeTokens, exchangeID, tokenName, tokenAmountSold, tokenAmountExpected, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmountSold) || tokenAmountSold < 1)\n            return callback('Invalid tokenAmountSold provided');\n\n        if(!utils.isInteger(tokenAmountExpected) || tokenAmountExpected < 1)\n            return callback('Invalid tokenAmountExpected provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangewithdraw', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant:parseInt(tokenAmountSold),\n            expected:parseInt(tokenAmountExpected)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport * as Ethers from 'ethers';\n\nconst TRX_MESSAGE_HEADER = '\\x19TRON Signed Message:\\n32';\nconst ETH_MESSAGE_HEADER = '\\x19Ethereum Signed Message:\\n32';\n\nexport default class Trx {\n    constructor(tronWeb = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    parseToken(token) {\n        return {\n            ...token,\n            name: this.tronWeb.toUtf8(token.name),\n            abbr: token.abbr && this.tronWeb.toUtf8(token.abbr),\n            description: token.description && this.tronWeb.toUtf8(token.description),\n            url: token.url && this.tronWeb.toUtf8(token.url)\n        };\n    }\n\n    getCurrentBlock(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getCurrentBlock);\n\n        this.tronWeb.fullNode.request('wallet/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlock(block = this.tronWeb.defaultBlock, callback = false) {\n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlock, block);\n\n        if(block === false)\n            return callback('No block identifier provided');\n\n        if(block == 'earliest')\n            block = 0;\n\n        if(block == 'latest')\n            return this.getCurrentBlock(callback);\n\n        if(isNaN(block) && utils.isHex(block))\n            return this.getBlockByHash(block, callback);\n\n        this.getBlockByNumber(block, callback);\n    }\n\n    getBlockByHash(blockHash, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getBlockByHash, blockHash);\n\n        this.tronWeb.fullNode.request('wallet/getblockbyid', { \n            value: blockHash \n        }, 'post').then(block => {\n            if(!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockByNumber(blockID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getBlockByNumber, blockID);\n\n        if(!utils.isInteger(blockID) || blockID < 0)\n            return callback('Invalid block number provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbynum', { \n            num: parseInt(blockID) \n        }, 'post').then(block => {\n            if(!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockTransactionCount(block = this.tronWeb.defaultBlock, callback = false) {\n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlockTransactionCount, block);\n\n        this.getBlock(block).then(({ transactions = [] }) => {\n            callback(null, transactions.length);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionFromBlock(block = this.tronWeb.defaultBlock, index = 0, callback = false) {\n        if(utils.isFunction(index)) {\n            callback = index;\n            index = 0;\n        }\n        \n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionFromBlock, block, index);\n\n        if(!utils.isInteger(index) || index < 0)\n            return callback('Invalid transaction index provided');\n\n        this.getBlock(block).then(({ transactions = false }) => {\n            if(!transactions || transactions.length < index)\n                return callback('Transaction not found in block');\n\n            callback(null, transactions[index]);\n        }).catch(err => callback(err));\n    }\n\n    getTransaction(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTransaction, transactionID);\n\n        this.tronWeb.fullNode.request('wallet/gettransactionbyid', { \n            value: transactionID \n        }, 'post').then(transaction => {\n            if(!Object.keys(transaction).length)\n                return callback('Transaction not found');\n                \n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getConfirmedTransaction(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getConfirmedTransaction, transactionID);\n\n        this.tronWeb.solidityNode.request('walletsolidity/gettransactionbyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            if(!Object.keys(transaction).length)\n                return callback('Transaction not found');\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionInfo(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTransactionInfo, transactionID);\n\n        this.tronWeb.solidityNode.request('walletsolidity/gettransactioninfobyid', { \n            value: transactionID \n        }, 'post').then(transaction => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionsToAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;          \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsToAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'to', limit, offset, callback);\n    }\n\n    getTransactionsFromAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;           \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsFromAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'from', limit, offset, callback);\n    }\n\n    async getTransactionsRelated(address = this.tronWeb.defaultAddress.hex, direction = 'all', limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;         \n        }\n\n        if(utils.isFunction(direction)) {\n            callback = direction;\n            direction = 'all';\n        }\n\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsRelated, address, direction, limit, offset);\n\n        if(![ 'to', 'from', 'all' ].includes(direction))\n            return callback('Invalid direction provided: Expected \"to\", \"from\" or \"all\"');\n        \n        if(direction == 'all') {\n            try {\n                const from = await this.getTransactionsRelated(address, 'from', limit, offset);\n                const to = await this.getTransactionsRelated(address, 'to', limit, offset);\n\n                return callback(null, [\n                    ...from.map(tx => (tx.direction = 'from', tx)),\n                    ...to.map(tx => (tx.direction = 'to', tx))\n                ].sort((a, b) => b.raw_data.timestamp - a.raw_data.timestamp));\n            } catch(ex) {\n                return callback(ex);\n            }\n        }\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if(!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request(`walletextension/gettransactions${direction}this`, {\n            account: {\n                address\n            },\n            offset,\n            limit\n        }, 'post').then(({ transaction }) => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getAccount, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBalance, address);\n\n        this.getAccount(address).then(({ balance = 0 }) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getUnconfirmedAccount, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getUnconfirmedBalance, address);\n\n        this.getUnconfirmedAccount(address).then(({ balance = 0 }) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getBandwidth(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBandwidth, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccountnet', {\n            address\n        }, 'post').then(({ freeNetUsed = 0, freeNetLimit = 0, NetUsed = 0, NetLimit = 0 }) => {\n            callback(null, (freeNetLimit - freeNetUsed) + (NetLimit - NetUsed));\n        }).catch(err => callback(err));\n    }\n\n    getTokensIssuedByAddress(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTokensIssuedByAddress, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyaccount', {\n            address\n        }, 'post').then(({ assetIssue = false }) => {\n            if(!assetIssue)\n                return callback(null, {});\n\n            const tokens = assetIssue.map(token => {\n                return this.parseToken(token);\n            }).reduce((tokens, token) => {\n                return tokens[token.name] = token, tokens;\n            }, {});\n\n            callback(null, tokens);\n        }).catch(err => callback(err));\n    }\n\n    getTokenFromID(tokenID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTokenFromID, tokenID);\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if(!token.name)\n                return callback('Token does not exist');\n                \n            callback(null, this.parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    listNodes(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listNodes);\n\n        this.tronWeb.fullNode.request('wallet/listnodes').then(({ nodes = [] }) => {\n            callback(null, nodes.map(({ address: { host, port } }) => (\n                `${this.tronWeb.toUtf8(host)}:${port}`\n            )));\n        }).catch(err => callback(err));\n    }\n\n    getBlockRange(start = 0, end = 30, callback = false) {\n        if(utils.isFunction(end)) {\n            callback = end;\n            end = 30;            \n        }\n\n        if(utils.isFunction(start)) {\n            callback = start;\n            start = 0;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlockRange, start, end);\n\n        if(!utils.isInteger(start) || start < 0)\n            return callback('Invalid start of range provided');\n\n        if(!utils.isInteger(end) || end <= start)\n            return callback('Invalid end of range provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbylimitnext', { \n            startNum: parseInt(start),\n            endNum: parseInt(end) + 1\n        }, 'post').then(({ block = [] }) => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    listSuperRepresentatives(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listSuperRepresentatives);\n\n        this.tronWeb.fullNode.request('wallet/listwitnesses').then(({ witnesses = [] }) => {\n            callback(null, witnesses);\n        }).catch(err => callback(err));\n    }\n\n    listTokens(limit = 0, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 0;  \n        }\n        \n        if(!callback)\n            return this.injectPromise(this.listTokens, limit, offset);\n\n        if(!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if(!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        if(!limit) {\n            return this.tronWeb.fullNode.request('wallet/getassetissuelist').then(({ assetIssue = [] }) => {\n                callback(null, assetIssue.map(token => this.parseToken(token)));\n            }).catch(err => callback(err));\n        }\n\n        this.tronWeb.fullNode.request('wallet/getpaginatedassetissuelist', {\n            offset: parseInt(offset),\n            limit: parseInt(limit)\n        }, 'post').then(({ assetIssue = [] }) => {\n            callback(null, assetIssue.map(token => this.parseToken(token)));\n        }).catch(err => callback(err));\n    }\n\n    timeUntilNextVoteCycle(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.timeUntilNextVoteCycle);\n\n        this.tronWeb.fullNode.request('wallet/getnextmaintenancetime').then(({ num = -1 }) => {\n            if(num == -1)\n                return callback('Failed to get time until next vote cycle');\n\n            callback(null, Math.floor(num / 1000));\n        }).catch(err => callback(err));\n    }\n\n    getContract(contractAddress, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getContract, contractAddress);\n\n        if(!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        contractAddress = this.tronWeb.address.toHex(contractAddress);\n\n        this.tronWeb.fullNode.request('wallet/getcontract', {\n            value: contractAddress\n        }).then(contract => {\n            if(contract.Error)\n                return callback('Contract does not exist');\n\n            callback(null, contract);\n        }).catch(err => callback(err));\n    }\n\n    async verifyMessage(message = false, signature = false, address = this.tronWeb.defaultAddress.base58, useTronHeader = true, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.base58;\n            useTronHeader = true;\n        }\n\n        if(utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.verifyMessage, message, signature, address, useTronHeader);\n\n        if(!utils.isHex(message))\n            return callback('Expected hex message input');\n\n        if(message.substr(0, 2) == '0x')\n            message = message.substring(2);\n\n        if(signature.substr(0, 2) == '0x')\n            signature = signature.substr(2);\n\n        const messageBytes = [\n            ...Ethers.utils.toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n            ...utils.code.hexStr2byteArray(message)\n        ];\n\n        const messageDigest = Ethers.utils.keccak256(messageBytes);\n        const recovered = Ethers.utils.recoverAddress(messageDigest, {\n            recoveryParam: signature.substring(128, 130) == '1c' ? 1 : 0,\n            r: '0x' + signature.substring(0, 64),\n            s: '0x' + signature.substring(64, 128)\n        });\n\n        const tronAddress = '41' + recovered.substr(2);\n        const base58Address = this.tronWeb.address.fromHex(tronAddress);\n\n        if(base58Address == this.tronWeb.address.fromHex(address))\n            return callback(null, true);\n\n        callback('Signature does not match');\n    }\n\n    async sign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, useTronHeader = true, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n            useTronHeader = true;\n        }\n\n        if(utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sign, transaction, privateKey, useTronHeader);\n\n        // Message signing\n        if(utils.isString(transaction)) {\n            if(transaction.substring(0, 2) == '0x')\n                transaction = transaction.substring(2);\n\n            if(!utils.isHex(transaction))\n                return callback('Expected hex message input');\n\n            try {\n                const signingKey = new Ethers.utils.SigningKey(privateKey);\n                const messageBytes = [\n                    ...Ethers.utils.toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n                    ...utils.code.hexStr2byteArray(transaction)\n                ];\n\n                const messageDigest = Ethers.utils.keccak256(messageBytes);\n                const signature = signingKey.signDigest(messageDigest);\n\n                const signatureHex = [\n                    '0x',\n                    signature.r.substring(2),\n                    signature.s.substring(2),\n                    Number(signature.v).toString(16)\n                ].join('');\n\n                return callback(null, signatureHex);\n            } catch(ex) {\n                callback(ex);\n            }\n        }\n\n        if(!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if(transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            const address = this.tronWeb.address.toHex(\n                this.tronWeb.address.fromPrivateKey(privateKey)\n            ).toLowerCase();\n\n            if(address !== transaction.raw_data.contract[0].parameter.value.owner_address.toLowerCase())\n                return callback('Private key does not match address in transaction');\n\n            return callback(null,\n                utils.crypto.signTransaction(privateKey, transaction)\n            );\n        } catch(ex) {\n            callback(ex);\n        }\n    }\n\n    sendRawTransaction(signedTransaction = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.sendRawTransaction, signedTransaction);\n\n        if(!utils.isObject(signedTransaction))\n            return callback('Invalid transaction provided');\n\n        if(!signedTransaction.signature || !utils.isArray(signedTransaction.signature))\n            return callback('Transaction is not signed');\n\n        this.tronWeb.fullNode.request(\n            'wallet/broadcasttransaction', \n            signedTransaction,\n            'post'\n        ).then(result => {\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    async sendTransaction(to = false, amount = false, options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        \n        if(typeof options === 'string')\n            options = { privateKey: options };\n\n        if(!callback)\n            return this.injectPromise(this.sendTransaction, to, amount, options);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendTrx(to, amount, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    async sendToken(to = false, amount = false, tokenID = false, options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        \n        if(typeof options === 'string')\n            options = { privateKey: options };\n\n        if(!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, options);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isString(tokenID))\n            return callback('Invalid token ID provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendToken(to, amount, tokenID, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n/**\n     * Freezes an amount of TRX.\n     * Will give bandwidth OR Energy and TRON Power(voting rights)\n     * to the owner of the frozen tokens.\n     *\n     * @param amount - is the number of frozen trx\n     * @param duration - is the duration in days to be frozen\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", options = {}, callback = false)\n    {\n        if(utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        \n        if(typeof options === 'string')\n            options = { privateKey: options };\n\n        if(!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, options);\n\n        if(![ 'BANDWIDTH', 'ENERGY' ].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isInteger(duration) || duration < 3)\n            return callback('Invalid duration provided, minimum of 3 days');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const freezeBalance = await this.tronWeb.transactionBuilder.freezeBalance(amount, duration, resource, address);\n            const signedTransaction = await this.sign(freezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Unfreeze TRX that has passed the minimum freeze duration.\n     * Unfreezing will remove bandwidth and TRON Power.\n     *\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async unfreezeBalance(resource = \"BANDWIDTH\", options = {}, callback = false)\n    {\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = 'BANDWIDTH';\n        }\n\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        \n        if(typeof options === 'string')\n            options = { privateKey: options };\n\n        if(!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, options);\n\n        if(![ 'BANDWIDTH', 'ENERGY' ].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const unfreezeBalance = await this.tronWeb.transactionBuilder.unfreezeBalance(resource, address);\n            const signedTransaction = await this.sign(unfreezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Modify account name\n     * Note: Username is allowed to edit only once.\n     *\n     * @param privateKey - Account private Key\n     * @param accountName - name of the account\n     * @param callback\n     *\n     * @return modified Transaction Object\n     */\n    async updateAccount(accountName = false, options = {},  callback = false)\n    {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        \n        if(typeof options === 'string')\n            options = { privateKey: options };\n\n        if(!callback) {\n            return this.injectPromise(this.updateAccount, accountName, options);\n        }\n\n        if (!utils.isString(accountName) || !accountName.length) {\n            return callback('Name must be a string');\n        }\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const updateAccount = await this.tronWeb.transactionBuilder.updateAccount(accountName, address);\n            const signedTransaction = await this.sign(updateAccount, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    signMessage(...args) {\n        return this.sign(...args);\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    send(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    sendTrx(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    broadcast(...args) {\n        return this.sendRawTransaction(...args);\n    }\n\n    signTransaction(...args) {\n        return this.sign(...args);\n    }\n\n    /**\n     * Gets a network modification proposal by ID.\n     */\n    getProposal(proposalID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getProposal, proposalID);\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/getproposalbyid', { \n            id: parseInt(proposalID),\n        }, 'post').then(proposal => {\n            callback(null, proposal);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listProposals(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listProposals);\n\n        this.tronWeb.fullNode.request('wallet/listproposals', {}, 'post').then(({ proposals = [] }) => {\n            callback(null, proposals);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all parameters available for network modification proposals.\n     */\n    getChainParameters(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getChainParameters);\n\n        this.tronWeb.fullNode.request('wallet/getchainparameters', {}, 'post').then(({ chainParameter = [] }) => {\n            callback(null, chainParameter);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the account resources\n     */\n    getAccountResources(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getAccountResources, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/getaccountresource', { \n            address: this.tronWeb.address.toHex(address),\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the exchange ID.\n     */\n    getExchangeByID(exchangeID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getExchangeByID, exchangeID);\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        this.tronWeb.fullNode.request('wallet/getexchangebyid', {\n            value: exchangeID,\n        }, 'post').then(exchange => {\n            callback(null, exchange);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists the exchanges\n     */\n    listExchanges(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchanges', {}, 'post').then(({ exchanges = [] }) => {\n            callback(null, exchanges);\n        }, 'post').catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listExchangesPaginated(limit = 10, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n        if(!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchangespaginated', {\n            limit,\n            offset\n        }, 'post').then(({ exchanges = [] }) => {\n            callback(null, exchanges);\n        }).catch(err => callback(err));\n    }\n};\n","import utils from 'utils';\n\nconst getFunctionSelector = abi => {\n    return abi.name + '(' + getParamTypes(abi.inputs || []).join(',') + ')';\n}\n\nconst getParamTypes = params => {\n    return params.map(({ type }) => type);\n}\n\nconst decodeOutput = (abi, output) => {\n    const names = abi.map(({ name }) => name).filter(name => !!name);\n    const types = abi.map(({ type }) => type);\n\n    return utils.abi.decodeParams(names, types, output);\n};\n\nexport default class Method {\n    constructor(contract, abi) {\n        this.tronWeb = contract.tronWeb;\n        this.contract = contract;\n\n        this.abi = abi;\n        this.name = abi.name || (abi.name = abi.type);\n\n        this.inputs = abi.inputs || [];\n        this.outputs = abi.outputs || [];\n\n        this.functionSelector = getFunctionSelector(abi);\n        this.signature = this.tronWeb.sha3(this.functionSelector, false).slice(0, 8);\n        this.injectPromise = utils.promiseInjector(this);\n\n        this.defaultOptions = {\n            feeLimit: 1000000000,\n            callValue: 0,\n            from: this.tronWeb.defaultAddress.hex, // Only used for send()\n            shouldPollResponse: false // Only used for sign()\n        };\n    }\n\n    decodeInput(data) {\n        return decodeOutput(this.inputs, '0x' + data);\n    }\n\n    onMethod(...args) {\n        const types = getParamTypes(this.inputs);\n\n        args.forEach((arg, index) => {\n            if (types[index] == 'address')\n                args[index] = this.tronWeb.address.toHex(arg).replace(/^(41)/, '0x')\n\n            if (types[index] == 'address[]') {\n                args[index] = args[index].map(address => {\n                    return this.tronWeb.address.toHex(address).replace(/^(41)/, '0x')\n                })\n            }\n        });\n\n        return {\n            call: (...methodArgs) => this._call(types, args, ...methodArgs),\n            send: (...methodArgs) => this._send(types, args, ...methodArgs),\n            watch: (...methodArgs) => this._watch(...methodArgs)\n        }\n    }\n\n    async _call(types, args, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this._call, types, args, options);\n\n        if (types.length !== args.length)\n            return callback('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (!['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use send()`);\n\n        options = { ...this.defaultOptions, ...options };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        this.tronWeb.transactionBuilder.triggerSmartContract(\n            this.contract.address,\n            this.functionSelector,\n            options.feeLimit,\n            options.callValue,\n            parameters,\n            this.tronWeb.address.toHex(options.from),\n            (err, transaction) => {\n                if (err)\n                    return callback(err);\n\n                if (!utils.hasProperty(transaction, 'constant_result'))\n                    return callback('Failed to execute');\n\n                try {\n                    let output = decodeOutput(this.outputs, '0x' + transaction.constant_result[0]);\n\n                    if (output.length === 1)\n                        output = output[0];\n\n                    return callback(null, output);\n                } catch (ex) {\n                    return callback(ex);\n                }\n            });\n    }\n\n    async _send(types, args, options = {}, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this._send, types, args, options, privateKey);\n\n        if (types.length !== args.length)\n            throw new Error('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use call()`);\n\n        // If a function isn't payable, dont provide a callValue.\n        if (!['payable'].includes(stateMutability.toLowerCase()))\n            options.callValue = 0;\n\n        options = {...this.defaultOptions, ...options};\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        try {\n            const address = privateKey ? this.tronWeb.address.fromPrivateKey(privateKey) : this.tronWeb.defaultAddress.base58;\n            const transaction = await this.tronWeb.transactionBuilder.triggerSmartContract(\n                this.contract.address,\n                this.functionSelector,\n                options.feeLimit,\n                options.callValue,\n                parameters,\n                this.tronWeb.address.toHex(address)\n            );\n\n            if (!transaction.result || !transaction.result.result)\n                return callback('Unknown error: ' + JSON.stringify(transaction, null, 2));\n\n            // If privateKey is false, this won't be signed here. We assume sign functionality will be replaced.\n            const signedTransaction = await this.tronWeb.trx.sign(transaction.transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n                \n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if (!broadcast.result)\n                return callback('Unknown error: ' + JSON.stringify(broadcast, null, 2));\n\n            if (!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if (index == 20) {\n                    return callback({\n                        error: 'Cannot find result in solidity node',\n                        transaction: signedTransaction\n                    });\n                }\n\n                const output = await this.tronWeb.trx.getTransactionInfo(signedTransaction.txID);\n\n                if (!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if (output.result && output.result == 'FAILED') {\n                    return callback({\n                        error: this.tronWeb.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (!utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                let decoded = decodeOutput(this.outputs, '0x' + output.contractResult[0]);\n\n                if (decoded.length === 1)\n                    decoded = decoded[0];\n\n                return callback(null, decoded);\n            }\n\n            checkResult();\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async _watch(options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!utils.isFunction(callback))\n            throw new Error('Expected callback to be provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (this.abi.type.toLowerCase() !== 'event')\n            return callback('Invalid method type for event watching');\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        let listener = false;\n        let lastBlock = false;\n        const sinceTimestamp = new Date().getTime();\n\n        const getEvents = async () => {\n            try {\n                const events = await this.tronWeb.getEventResult(this.contract.address, sinceTimestamp, this.name);\n                const [ latestEvent ] = events.sort((a, b) => b.block - a.block);\n                const newEvents = events.filter((event, index) => {\n\n                    if (options.resourceNode && !RegExp(options.resourceNode, 'i').test(event.resourceNode))\n                        return false;\n\n                    const duplicate = events.slice(0, index).some(priorEvent => (\n                        JSON.stringify(priorEvent) == JSON.stringify(event)\n                    ));\n\n                    if (duplicate)\n                        return false;\n\n                    if (!lastBlock)\n                        return true;\n\n                    return event.block > lastBlock;\n                });\n\n                if (latestEvent)\n                    lastBlock = latestEvent.block;\n\n                return newEvents;\n            } catch (ex) {\n                return Promise.reject(ex);\n            }\n        };\n\n        const bindListener = () => {\n            if (listener)\n                clearInterval(listener);\n\n            listener = setInterval(() => {\n                getEvents().then(events => events.forEach(event => {\n                    callback(null, utils.parseEvent(event, this.abi))\n                })).catch(err => callback(err));\n            }, 3000);\n        };\n\n        await getEvents();\n        bindListener();\n\n        return {\n            start: bindListener(),\n            stop: () => {\n                if (!listener)\n                    return;\n\n                clearInterval(listener);\n                listener = false;\n            }\n        }\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport Method from './method';\n\nexport default class Contract {\n    constructor(tronWeb = false, abi = [], address = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n\n        this.address = address;\n        this.abi = abi;\n\n        this.eventListener = false;\n        this.bytecode = false;\n        this.deployed = false;\n        this.lastBlock = false;\n\n        this.methods = {};\n        this.methodInstances = {};\n        this.props = [];\n\n        if(this.tronWeb.isAddress(address))\n            this.deployed = true;\n        else this.address = false;\n\n        this.loadAbi(abi);\n    }\n\n    async _getEvents(options = {}) {\n        const events = await this.tronWeb.getEventResult(this.address);\n        const [ latestEvent ] = events.sort((a, b) => b.block - a.block);\n        const newEvents = events.filter((event, index) => {\n\n            if (options.resourceNode && !RegExp(options.resourceNode, 'i').test(event.resourceNode))\n                return false;\n\n            const duplicate = events.slice(0, index).some(priorEvent => (\n                JSON.stringify(priorEvent) == JSON.stringify(event)\n            ));\n\n            if(duplicate)\n                return false;\n\n            if(!this.lastBlock)\n                return true;\n\n            return event.block > this.lastBlock;\n        });\n\n        if(latestEvent)\n            this.lastBlock = latestEvent.block;\n\n        return newEvents;\n    }\n\n    async _startEventListener(options = {}, callback) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(this.eventListener)\n            clearInterval(this.eventListener);\n\n        if(!this.tronWeb.eventServer)\n            throw new Error('Event server is not configured');\n\n        if(!this.address)\n            throw new Error('Contract is not configured with an address');\n\n        this.eventCallback = callback;\n        await this._getEvents(options);\n\n        this.eventListener = setInterval(() => {\n            this._getEvents(options).then(newEvents => newEvents.forEach(event => {\n                this.eventCallback && this.eventCallback(event)\n            })).catch(err => {\n                console.error('Failed to get event list', err);\n            });\n        }, 3000);\n    }\n\n    _stopEventListener() {\n        if(!this.eventListener)\n            return;\n\n        clearInterval(this.eventListener);\n        this.eventListener = false;\n        this.eventCallback = false;\n    }\n\n    hasProperty(property) {\n        return this.hasOwnProperty(property) || this.__proto__.hasOwnProperty(property);\n    }\n\n    loadAbi(abi) {\n        this.abi = abi;\n        this.methods = {};\n\n        this.props.forEach(prop => delete this[prop]);\n\n        abi.forEach(func => {\n            // Don't build a method for constructor function. That's handled through contract create.\n            if (func.type.toLowerCase() === 'constructor')\n                return;\n\n            const method = new Method(this, func);\n            const methodCall = method.onMethod.bind(method);\n\n            const {\n                name,\n                functionSelector,\n                signature\n            } = method;\n\n            this.methods[name] = methodCall;\n            this.methods[functionSelector] = methodCall;\n            this.methods[signature] = methodCall;\n\n            this.methodInstances[name] = method;\n            this.methodInstances[functionSelector] = method;\n            this.methodInstances[signature] = method;\n\n            if(!this.hasProperty(name)) {\n                this[name] = methodCall;\n                this.props.push(name);\n            }\n\n            if(!this.hasProperty(functionSelector)) {\n                this[functionSelector] = methodCall;\n                this.props.push(functionSelector);\n            }\n\n            if(!this.hasProperty(signature)) {\n                this[signature] = methodCall;\n                this.props.push(signature);\n            }\n        });\n    }\n\n    decodeInput(data) {\n\n        const methodName = data.substring(0, 8);\n        const inputData = data.substring(8);\n\n        if (!this.methodInstances[methodName])\n            throw new Error('Contract method ' + methodName + \" not found\");\n\n        const methodInstance = this.methodInstances[methodName];\n\n        return {\n            name: methodInstance.name,\n            params: this.methodInstances[methodName].decodeInput(inputData),\n        }\n    }\n\n    async new(options, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.new, options, privateKey);\n\n        try {\n            const address = this.tronWeb.address.fromPrivateKey(privateKey);\n            const transaction = await this.tronWeb.transactionBuilder.createSmartContract(options, address);\n            const signedTransaction = await this.tronWeb.trx.sign(transaction, privateKey);\n            const contract = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if(!contract.result)\n                return callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            return this.at(signedTransaction.contract_address, callback);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    async at(contractAddress, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.at, contractAddress);\n\n        try {\n            const contract = await this.tronWeb.trx.getContract(contractAddress);\n\n            if(!contract.contract_address)\n                callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            this.address = contract.contract_address;\n            this.bytecode = contract.bytecode;\n            this.deployed = true;\n\n            this.loadAbi(contract.abi.entrys);\n\n            callback(null, this);\n        } catch(ex) {\n            if(ex.toString().includes('does not exist'))\n                return callback('Contract has not been deployed on the network');\n\n            return callback(ex);\n        }\n    }\n\n    events(options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!utils.isFunction(callback))\n            throw new Error('Callback function expected');\n\n        const self = this;\n\n        return {\n            start(startCallback = false) {\n                if(!startCallback) {\n                    self._startEventListener(options, callback);\n                    return this;\n                }\n\n                self._startEventListener(options, callback).then(() => {\n                    startCallback();\n                }).catch(err => {\n                    startCallback(err)\n                });\n\n                return this;\n            },\n            stop() {\n                self._stopEventListener();\n            }\n        };\n    }\n}\n","import providers from 'lib/providers';\nimport utils from 'utils';\nimport BigNumber from 'bignumber.js';\nimport EventEmitter from 'eventemitter3';\n\nimport TransactionBuilder from 'lib/transactionBuilder';\nimport Trx from 'lib/trx';\nimport Contract from 'lib/contract';\n\nimport { keccak256 } from 'js-sha3';\n\nexport default class TronWeb extends EventEmitter {\n    static providers = providers;\n    static BigNumber = BigNumber;\n    static TransactionBuilder = TransactionBuilder;\n    static Trx = Trx;\n    static Contract = Contract;\n    \n    constructor(fullNode, solidityNode, eventServer = false, privateKey = false) {\n        super();\n\n        if(utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if(utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if(utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n        this.setEventServer(eventServer);\n        \n        this.providers = providers;\n        this.BigNumber = BigNumber;\n\n        this.defaultBlock = false;\n        this.defaultPrivateKey = false;\n        this.defaultAddress = {\n            hex: false,\n            base58: false\n        };\n        \n        [\n            'sha3', 'toHex', 'toUtf8', 'fromUtf8',\n            'toAscii', 'fromAscii', 'toDecimal', 'fromDecimal',\n            'toSun', 'fromSun', 'toBigNumber', 'isAddress', \n            'createAccount', 'address'\n        ].forEach(key => {\n            this[key] = TronWeb[key];\n        });\n\n        if(privateKey)\n            this.setPrivateKey(privateKey);\n\n        this.transactionBuilder = new TransactionBuilder(this);\n        this.trx = new Trx(this);\n        this.utils = utils;\n\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    setDefaultBlock(blockID = false) {\n        if([ false, 'latest', 'earliest', 0 ].includes(blockID)) {\n            return this.defaultBlock = blockID;\n        }\n\n        if(!utils.isInteger(blockID) || !blockID)\n            throw new Error('Invalid block ID provided');\n\n        this.defaultBlock = Math.abs(blockID);\n    }\n\n    setPrivateKey(privateKey) {\n        try {\n            this.setAddress(\n                this.address.fromPrivateKey(privateKey)\n            );\n        } catch {\n            throw new Error('Invalid private key provided');\n        }\n\n        this.defaultPrivateKey = privateKey;\n        this.emit('privateKeyChanged', privateKey);\n    }\n\n    setAddress(address) {\n        if(!this.isAddress(address))\n            throw new Error('Invalid address provided');\n\n        const hex = this.address.toHex(address);\n        const base58 = this.address.fromHex(address);\n\n        if(this.defaultPrivateKey && this.address.fromPrivateKey(this.defaultPrivateKey) !== base58)\n           this.defaultPrivateKey = false;\n\n        this.defaultAddress = {\n            hex,\n            base58\n        };\n\n        this.emit('addressChanged', { hex, base58 });\n    }\n\n    isValidProvider(provider) {\n        return Object.values(providers).some(knownProvider => provider instanceof knownProvider);\n    }\n\n    setFullNode(fullNode) {\n        if(utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if(!this.isValidProvider(fullNode))\n            throw new Error('Invalid full node provided');\n\n        this.fullNode = fullNode;\n        this.fullNode.setStatusPage('wallet/getnowblock');\n    }\n\n    setSolidityNode(solidityNode) {\n        if(utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if(!this.isValidProvider(solidityNode))\n            throw new Error('Invalid solidity node provided');\n\n        this.solidityNode = solidityNode;\n        this.solidityNode.setStatusPage('walletsolidity/getnowblock');\n    }\n\n    setEventServer(eventServer = false) {\n        if(!eventServer)\n            return this.eventServer = false;\n\n        if(utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n            \n        if(!this.isValidProvider(eventServer))\n            throw new Error('Invalid event server provided');\n\n        this.eventServer = eventServer;\n        this.eventServer.isConnected = () => this.eventServer.request('healthcheck').then(() => true).catch(() => (\n            this.eventServer.request('events?size=1').then(data => (\n                Array.isArray(data)\n            ))\n        )).catch(() => false);\n    }\n\n    currentProviders() {\n        return {\n            fullNode: this.fullNode,\n            solidityNode: this.solidityNode,\n            eventServer: this.eventServer\n        };\n    }\n\n    currentProvider() {\n        return this.currentProviders();\n    }\n\n    getEventResult(contractAddress = false, sinceTimestamp = 0, eventName = false, blockNumber = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getEventResult, contractAddress, sinceTimestamp, eventName, blockNumber);\n\n        if(!this.eventServer)\n            callback('No event server configured');\n\n        const routeParams = [];\n\n        if(!this.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if(eventName && !contractAddress)\n            return callback('Usage of event name filtering requires a contract address');\n        \n        if(blockNumber && !eventName)\n            return callback('Usage of block number filtering requires an event name');\n\n        if(contractAddress)\n            routeParams.push(this.address.fromHex(contractAddress));\n\n        if(eventName)\n            routeParams.push(eventName);\n\n        if(blockNumber)\n            routeParams.push(blockNumber);\n\n        return this.eventServer.request(`event/contract/${routeParams.join('/')}?since=${sinceTimestamp}`).then((data = false) => {\n            if(!data)\n                return callback('Unknown error occurred');\n\n            if(!utils.isArray(data))\n                return callback(data);\n\n            return callback(null, \n                data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err)); \n    }\n\n    getEventByTransactionID(transactionID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getEventByTransactionID, transactionID);\n\n        if(!this.eventServer)\n            callback('No event server configured');\n\n        return this.eventServer.request(`event/transaction/${transactionID}`).then((data = false) => {\n            if(!data)\n                return callback('Unknown error occurred');\n\n            if(!utils.isArray(data))\n                return callback(data);\n\n            return callback(null, \n                data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n    contract(abi = [], address = false) {\n        return new Contract(this, abi, address);\n    }\n\n    static get address() {\n        return {\n            fromHex(address) {\n                if(!utils.isHex(address))\n                    return address;\n\n                return utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address)\n                );\n            },\n            toHex(address) {\n                if(utils.isHex(address))\n                    return address.toLowerCase().replace(/^0x/,'41');\n\n                return utils.code.byteArray2hexStr(\n                    utils.crypto.decodeBase58Address(address)\n                ).toLowerCase();\n            },\n            fromPrivateKey(privateKey) {\n                try {\n                    return utils.crypto.pkToAddress(privateKey);\n                } catch { return false; }\n            }\n        }\n    }\n\n    static sha3(string, prefix = true) {\n        return (prefix ? '0x' : '') + keccak256(string);\n    }\n\n    static toHex(val) {\n        if(utils.isBoolean(val))\n            return TronWeb.fromDecimal(+val);\n\n        if(utils.isBigNumber(val))\n            return TronWeb.fromDecimal(val);\n\n        if(typeof val === 'object')\n            return TronWeb.fromUtf8(JSON.stringify(val));\n\n        if(utils.isString(val)) {\n            if (/^(-|)0x/.test(val))\n                return val;\n\n            if(!isFinite(val))\n                return TronWeb.fromUtf8(val);\n        }\n\n        let result = TronWeb.fromDecimal(val);\n        if (result === '0xNaN') {\n            throw new Error('The passed value is not convertible to a hex string');\n        } else {\n            return result;\n        }\n    }\n\n    static toUtf8(hex) {\n        if (utils.isHex(hex)) {\n            hex = hex.replace(/^0x/, '');\n            return Buffer.from(hex, 'hex').toString('utf8');\n        } else {\n            throw new Error('The passed value is not a valid hex string');\n        }\n    }\n\n    static fromUtf8(string) {\n        if (!utils.isString(string)) {\n            throw new Error('The passed value is not a valid utf-8 string')\n        }\n        return '0x' + Buffer.from(string, 'utf8').toString('hex');\n    }\n\n    static toAscii(hex) {\n        if (utils.isHex(hex)) {\n            let str = \"\";\n            let i = 0, l = hex.length;\n            if (hex.substring(0, 2) === '0x') {\n                i = 2;\n            }\n            for (; i < l; i+=2) {\n                let code = parseInt(hex.substr(i, 2), 16);\n                str += String.fromCharCode(code);\n            }\n            return str;\n        } else {\n            throw new Error('The passed value is not a valid hex string');\n        }\n    }\n\n    static fromAscii(string, padding) {\n        if (!utils.isString(string)) {\n            throw new Error('The passed value is not a valid utf-8 string')\n        }\n        return '0x' + Buffer.from(string, 'ascii').toString('hex').padEnd(padding, '0');\n    }\n\n\n    static toDecimal(value) {\n        return TronWeb.toBigNumber(value).toNumber();\n    }\n\n    static fromDecimal(value) {\n        const number = TronWeb.toBigNumber(value);\n        const result = number.toString(16);\n\n        return number.isLessThan(0) ? '-0x' + result.substr(1) : '0x' + result;\n    }\n\n    static fromSun(sun) {\n        const trx = TronWeb.toBigNumber(sun).div(1_000_000);        \n        return utils.isBigNumber(sun) ? trx : trx.toString(10);\n    }\n\n    static toSun(trx) {\n        const sun = TronWeb.toBigNumber(trx).times(1_000_000);        \n        return utils.isBigNumber(trx) ? sun : sun.toString(10);\n    }\n\n    static toBigNumber(amount = 0) {\n        if(utils.isBigNumber(amount))\n            return amount;\n\n        if(utils.isString(amount) && /^(-|)0x/.test(amount))\n            return new BigNumber(amount.replace('0x', ''), 16);\n\n        return new BigNumber(amount.toString(10), 10);\n    }\n\n    static isAddress(address = false) {\n        if(!utils.isString(address))\n            return false;\n\n        // Convert HEX to Base58\n        if(address.length === 42) {\n            try {\n                return TronWeb.isAddress(\n                    utils.crypto.getBase58CheckAddress(\n                        utils.code.hexStr2byteArray(address) // it throws an error if the address starts with 0x\n                    )\n                );\n            } catch(err) {\n                return false;\n            }\n        }\n\n        return utils.crypto.isAddressValid(address);\n    }\n\n    static async createAccount(callback = false) {\n        const account = utils.accounts.generateAccount();\n\n        if(callback)\n            callback(null, account);\n\n        return account;\n    }\n\n    async isConnected(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.isConnected);\n\n        callback(null, {\n            fullNode: await this.fullNode.isConnected(),\n            solidityNode: await this.solidityNode.isConnected(),\n            eventServer: this.eventServer && await this.eventServer.isConnected()\n        });\n    }\n};\n"],"sourceRoot":""}