{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@babel/runtime/helpers/asyncToGenerator\"","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///external \"ethers\"","webpack:///external \"@babel/runtime/helpers/toConsumableArray\"","webpack:///external \"@babel/runtime/helpers/objectSpread\"","webpack:///external \"@babel/runtime/helpers/assertThisInitialized\"","webpack:///external \"axios\"","webpack:///external \"bignumber.js\"","webpack:///external \"@babel/runtime/helpers/slicedToArray\"","webpack:///external \"js-sha3\"","webpack:///external \"elliptic\"","webpack:///external \"@babel/runtime/helpers/defineProperty\"","webpack:///external \"@babel/runtime/helpers/typeof\"","webpack:///external \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack:///external \"@babel/runtime/helpers/getPrototypeOf\"","webpack:///external \"@babel/runtime/helpers/inherits\"","webpack:///external \"jssha\"","webpack:///external \"validator\"","webpack:///external \"eventemitter3\"","webpack:///./src/utils/base64.js","webpack:///./src/utils/bytes.js","webpack:///./src/utils/address.js","webpack:///./src/utils/code.js","webpack:///./src/utils/base58.js","webpack:///./src/utils/crypto.js","webpack:///./src/utils/accounts.js","webpack:///./src/utils/abi.js","webpack:///./src/utils/index.js","webpack:///./src/lib/providers/index.js","webpack:///./src/lib/providers/HttpProvider.js","webpack:///./src/lib/transactionBuilder.js","webpack:///./src/lib/trx.js","webpack:///./src/lib/witness.js","webpack:///./src/lib/contract/method.js","webpack:///./src/lib/contract/index.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","Base64","_this","this","_keyStr","encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","length","charCodeAt","isNaN","charAt","encodeIgnoreUtf8","inputBytes","decode","replace","indexOf","String","fromCharCode","_utf8_decode","decodeToByteArray","_out2ByteArray","utftext","byteArray","Array","c1","c2","_utf8_encode","string","c3","byte2hexStr","byte","str","bytesToString","arr","one","toString","v","match","bytesLength","store","slice","st","parseInt","hextoString","hex","split","out","tmp","concat","base64DecodeFromString","string64","byteArray2hexStr","ADDRESS_SIZE","ADDRESS_PREFIX","ADDRESS_PREFIX_BYTE","bin2String","array","apply","toConsumableArray_default","arrayEquals","array1","array2","stringToBytes","len","bytes","push","hexChar2byte","isHexChar","hexStr2byteArray","j","k","reduce","base64EncodeToString","strToDate","tempStrs","dateStrs","year","month","day","timeStrs","hour","minute","second","Date","isNumber","getStringType","ALPHABET","ALPHABET_MAP","BASE","encode58","buffer","digits","carry","reverse","map","digit","join","decode58","Error","getBase58CheckAddress","addressBytes","checkSum","SHA256","decodeBase58Address","base58Sting","address","offset","checkSum1","signTransaction","priKeyBytes","transaction","signature","ECKeySign","txID","arrayToBase64String","a","btoa","signBytes","privateKey","contents","getRowBytesFromTransactionBase64","base64Data","bytesDecode","proto","protocol","Transaction","deserializeBinary","getRawData","serializeBinary","genPriKey","priKeyHex","EC","genKeyPair","getPrivate","computeAddress","pubBytes","hash","keccak256","substring","getAddressFromPriKey","getPubKeyFromPriKey","decode58Check","addressStr","decodeCheck","decodeData","hash1","isAddressValid","base58Str","getBase58CheckAddressFromPriKeyBase64String","priKeyBase64String","getHexStrAddressFromPriKeyBase64String","getAddressFromPriKeyBase64String","pubkey","keyFromPrivate","getPublic","x","y","xHex","yHex","hashBytes","sign","id","recoveryParam","rHex","sHex","msgBytes","shaObj","jsSHA","msgHex","update","getHash","passwordToAddress","password","pkToAddress","generateAccount","pubKeyBytes","publicKey","base58","abiCoder","Ethers","AbiCoder","decodeParams","names","types","ignoreMethodHash","obj","arg","index","substr","toLowerCase","encodeParams","values","TronWeb","toHex","utils","isValidURL","url","validator","isURL","protocols","isObject","isArray","isJson","JSON","parse","ex","isBoolean","bool","isBigNumber","number","BigNumber","constructor","isString","isFunction","isHex","isInteger","Number","hasProperty","hasProperties","_len","arguments","properties","_key","includes","injectPromise","func","_len2","args","_key2","Promise","resolve","reject","err","res","promiseInjector","scope","_this2","_len3","_key3","mapEvent","event","block","block_number","timestamp","block_timestamp","contract","contract_address","event_name","transaction_id","result","parseEvent","_ref","abi","inputs","type","_abi$index","padLeft","padding","amount","src_utils","objectSpread_default","code","accounts","crypto","providers","HttpProvider","host","timeout","undefined","user","headers","statusPage","classCallCheck_default","instance","axios","baseURL","auth","request","then","data","catch","payload","method","params","TransactionBuilder","tronWeb","to","from","defaultAddress","callback","isAddress","fullNode","to_address","owner_address","sendTrx","tokenID","fromUtf8","asset_name","sendToken","issuerAddress","buyer","purchaseToken","duration","resource","frozen_balance","frozen_duration","freezeBalance","unfreezeBalance","withdrawBlockRewards","applyForSR","votes","voterAddress","vote","keys","invalid","entries","_ref2","slicedToArray_default","srAddress","voteCount","vote_address","vote_count","options","createSmartContract","_options$abi","_options$bytecode","bytecode","_options$feeLimit","feeLimit","_options$callValue","callValue","_options$userFeePerce","userFeePercentage","_options$parameters","parameters","_options$name","_unused","payable","some","constructorParams","find","it","fee_limit","call_value","consume_user_resource_percent","stringify","parameter","contractAddress","functionSelector","triggerSmartContract","_parameters$i","function_selector","message","toUtf8","_this3","createToken","_options$name2","_options$abbreviation","abbreviation","_options$description","description","_options$url","_options$totalSupply","totalSupply","_options$trxRatio","trxRatio","_options$tokenRatio","tokenRatio","_options$saleStart","saleStart","now","_options$saleEnd","saleEnd","_options$freeBandwidt","freeBandwidth","_options$freeBandwidt2","freeBandwidthLimit","_options$frozenAmount","frozenAmount","_options$frozenDurati","frozenDuration","abbr","total_supply","trx_num","num","start_time","end_time","free_asset_net_limit","public_free_asset_net_limit","frozen_supply","frozen_amount","frozen_days","accountName","account_name","stringUtf8toHex","updateAccount","_this4","updateToken","_options$description2","_options$url2","_options$freeBandwidt3","_options$freeBandwidt4","new_limit","new_public_limit","_this5","createProposal","_this6","proposalID","proposal_id","deleteProposal","_this7","hasApproval","is_add_approval","isApproval","voteProposal","_this8","exchangeID","tokenName","tokenAmount","ownerAddress","exchange_id","token_id","fromAscii","quant","injectExchangeTokens","_this9","withdrawExchangeTokens","_this10","tokenAmountSold","tokenAmountExpected","expected","tradeExchangeTokens","Trx","token","getCurrentBlock","defaultBlock","getBlockByHash","getBlockByNumber","getBlock","blockHash","blockID","getBlockTransactionCount","_ref$transactions","transactions","_ref2$transactions","getTransactionFromBlock","transactionID","getTransaction","getTransactionInfo","solidityNode","limit","getTransactionsRelated","getTransactionsToAddress","getTransactionsFromAddress","direction","tx","sort","b","raw_data","_context","t0","account","_ref3","getAccount","getBalance","_ref4","_ref4$balance","balance","_ref5","_ref5$freeNetUsed","freeNetUsed","_ref5$freeNetLimit","freeNetLimit","_ref5$NetUsed","NetUsed","_ref5$NetLimit","NetLimit","getBandwidth","_ref6","_ref6$assetIssue","assetIssue","tokens","parseToken","getTokensIssuedByAddress","getTokenFromID","listNodes","_ref7","_ref7$nodes","nodes","_ref8","_ref8$address","port","start","end","startNum","endNum","_ref9","_ref9$block","getBlockRange","listSuperRepresentatives","_ref10","_ref10$witnesses","witnesses","_ref12","_ref12$assetIssue","_ref11","_ref11$assetIssue","listTokens","timeUntilNextVoteCycle","_ref13","_ref13$num","Math","floor","getContract","useTronHeader","verifyMessage","messageBytes","toUtf8Bytes","messageDigest","recovered","recoverAddress","tronAddress","fromHex","defaultPrivateKey","signingKey","SigningKey","signDigest","signatureHex","_context3","fromPrivateKey","t1","signedTransaction","sendRawTransaction","sendTransaction","transactionBuilder","_context4","_context5","_context6","proposal","getProposal","listProposals","_ref14","_ref14$proposals","proposals","getChainParameters","_ref15","_ref15$chainParameter","chainParameter","resources","getAccountResources","exchange","getExchangeByID","listExchanges","_ref16","_ref16$exchanges","exchanges","firstTokenID","firstTokenBalance","secondTokenID","secondTokenBalance","first_token_id","first_token_balance","second_token_id","second_token_balance","_ref17","_ref17$exchanges","Witness","getFunctionSelector","getParamTypes","decodeOutput","filter","Method","outputs","sha3","defaultOptions","shouldPollResponse","forEach","methodArgs","_call","send","_send","watch","_watch","deployed","stateMutability","constant_result","trx","broadcast","checkResult","_callee2","decoded","_args2","regenerator_default","wrap","_context2","prev","next","abrupt","error","sent","setTimeout","resMessage","contractResult","stop","eventServer","listener","lastBlock","sinceTimestamp","getTime","getEvents","_callee4","events","_events$sort","_events$sort2","latestEvent","newEvents","getEventResult","priorEvent","bindListener","clearInterval","setInterval","Contract","eventListener","methods","methodInstances","props","loadAbi","eventCallback","_getEvents","console","__proto__","prop","methodCall","onMethod","methodName","inputData","decodeInput","new","at","entrys","self","startCallback","_startEventListener","_stopEventListener","possibleConstructorReturn_default","getPrototypeOf_default","setFullNode","setSolidityNode","setEventServer","setPrivateKey","assertThisInitialized_default","witness","abs","setAddress","emit","provider","knownProvider","isValidProvider","setStatusPage","currentProviders","eventName","blockNumber","routeParams","_ref2$data","response","_ref3$data","getEventByTransacionID","isConnected","isEventServerConnected","val","fromDecimal","typeof_default","test","isFinite","Buffer","padEnd","toBigNumber","toNumber","isLessThan","sun","div","times","solditySource","_unused2","EventEmitter"],"mappings":"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","file":"TronWeb.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 21);\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","module.exports = require(\"ethers\");","module.exports = require(\"@babel/runtime/helpers/toConsumableArray\");","module.exports = require(\"@babel/runtime/helpers/objectSpread\");","module.exports = require(\"@babel/runtime/helpers/assertThisInitialized\");","module.exports = require(\"axios\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"@babel/runtime/helpers/slicedToArray\");","module.exports = require(\"js-sha3\");","module.exports = require(\"elliptic\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"@babel/runtime/helpers/typeof\");","module.exports = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"@babel/runtime/helpers/getPrototypeOf\");","module.exports = require(\"@babel/runtime/helpers/inherits\");","module.exports = require(\"jssha\");","module.exports = require(\"validator\");","module.exports = require(\"eventemitter3\");","export function Base64() {\n    this._keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n    this.encode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n        \n        while (i < input.length) {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.encodeIgnoreUtf8 = inputBytes => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n        \n        while (i < inputBytes.length) {\n            chr1 = inputBytes[i++];\n            chr2 = inputBytes[i++];\n            chr3 = inputBytes[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.decode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = _keyStr.indexOf(input.charAt(i++));\n            enc2 = _keyStr.indexOf(input.charAt(i++));\n            enc3 = _keyStr.indexOf(input.charAt(i++));\n            enc4 = _keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n                \n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n        \n        return this._utf8_decode(output);\n    }\n\n    this.decodeToByteArray = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = _keyStr.indexOf(input.charAt(i++));\n            enc2 = _keyStr.indexOf(input.charAt(i++));\n            enc3 = _keyStr.indexOf(input.charAt(i++));\n            enc4 = _keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n        \n        return this._out2ByteArray(output);\n    }\n\n    this._out2ByteArray = utftext => {\n        const byteArray = new Array(utftext.length);\n\n        let i = 0;\n        let c = c1 = c2 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n            byteArray[i] = c;\n            i++;\n        }\n\n        return byteArray;\n    }\n\n    this._utf8_encode = string => {\n        string = string.replace(/\\r\\n/g, \"\\n\");\n        let utftext = \"\";\n\n        for (let n = 0; n < string.length; n++) {\n            const c = string.charCodeAt(n);\n\n            if (c < 128) {\n                utftext += String.fromCharCode(c);\n            } else if ((c > 127) && (c < 2048)) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            } else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n        }\n\n        return utftext;\n    }\n\n    this._utf8_decode = utftext => {\n        let string = \"\";\n        let i = 0;\n        let c = c1 = c2 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n\n            if (c < 128) {\n                string += String.fromCharCode(c);\n                i++;\n            } else if ((c > 191) && (c < 224)) {\n                c2 = utftext.charCodeAt(i + 1);\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                i += 2;\n            } else {\n                c2 = utftext.charCodeAt(i + 1);\n                c3 = utftext.charCodeAt(i + 2);\n\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\n                i += 3;\n            }\n        }\n\n        return string;\n    }\n}","import { Base64 } from './base64';\n\nexport function byte2hexStr(byte) {\n    const hexByteMap = '0123456789ABCDEF';\n\n    let str = '';\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n        \n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length === 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else {\n            str += String.fromCharCode(arr[i]);\n        }\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.split('');\n    let out = '';\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        let tmp = `0x${ arr[i * 2] }${ arr[i * 2 + 1] }`;\n        out += String.fromCharCode(tmp);\n    }\n\n    return out;\n}\n\nexport function base64DecodeFromString(string64) {\n    return new Base64().decodeToByteArray(string64);\n}\n\nexport function byteArray2hexStr(byteArray) {\n    let str = '';\n\n    for (let i = 0; i < (byteArray.length); i++)\n        str += byte2hexStr(byteArray[i]);\n        \n    return str;\n}","export const ADDRESS_SIZE = 34;\nexport const ADDRESS_PREFIX = \"41\";\nexport const ADDRESS_PREFIX_BYTE = 0x41;\n","import { Base64 } from './base64';\n\nexport function bin2String(array) {\n    return String.fromCharCode(...array);\n}\n\nexport function arrayEquals(array1, array2) {\n    if (array1.length != array2.length)\n        return false;\n        \n    let i;\n\n    for (i = 0; i < array1.length; i++) {\n        if (array1[i] != array2[i])\n            return false;\n    }\n\n    return true;\n}\n\nexport function stringToBytes(str) {\n    const bytes = new Array();\n    let len;\n    let c;\n\n    len = str.length;\n\n    for (let i = 0; i < len; i++) {\n        c = str.charCodeAt(i);\n\n        if (c >= 0x010000 && c <= 0x10FFFF) {\n            bytes.push(((c >> 18) & 0x07) | 0xF0);\n            bytes.push(((c >> 12) & 0x3F) | 0x80);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000800 && c <= 0x00FFFF) {\n            bytes.push(((c >> 12) & 0x0F) | 0xE0);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000080 && c <= 0x0007FF) {\n            bytes.push(((c >> 6) & 0x1F) | 0xC0);\n            bytes.push((c & 0x3F) | 0x80);\n        } else bytes.push(c & 0xFF);\n    }\n\n    return bytes;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n        \n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length == 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else str += String.fromCharCode(arr[i]);\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.split(\"\");\n    let out = \"\";\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        const tmp = `0x${arr[i * 2]}${arr[i * 2 + 1]}`;\n        const charValue = String.fromCharCode(tmp);\n\n        out += charValue;\n    }\n\n    return out\n}\n\nexport function hexChar2byte(c) {\n    let d = 0;\n\n    if (c >= 'A' && c <= 'F')\n        d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    else if (c >= 'a' && c <= 'f')\n        d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10;\n    else if (c >= '0' && c <= '9')\n        d = c.charCodeAt(0) - '0'.charCodeAt(0);\n        \n    return d;\n}\n\nexport function isHexChar(c) {\n    if ((c >= 'A' && c <= 'F') ||\n        (c >= 'a' && c <= 'f') ||\n        (c >= '0' && c <= '9')) {\n        return 1;\n    }\n\n    return 0;\n}\n\nexport function hexStr2byteArray(str) {\n    const byteArray = Array();\n    let d = 0;\n    let j = 0;\n    let k = 0;\n\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charAt(i);\n\n        if (isHexChar(c)) {\n            d <<= 4;\n            d += hexChar2byte(c);\n            j++;\n\n            if (0 === (j % 2)) {\n                byteArray[k++] = d;\n                d = 0;\n            }\n        }\n    }\n\n    return byteArray;\n}\n\nexport function byte2hexStr(byte) {\n    const hexByteMap = \"0123456789ABCDEF\";\n    let str = \"\";\n\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function byteArray2hexStr(byteArray) {\n    return byteArray.reduce((string, byte) => {\n        return string + byte2hexStr(byte);\n    }, '');\n}\n\nexport function base64DecodeFromString(string64) {\n    const b = new Base64();\n    const decodeBytes = b.decodeToByteArray(string64);\n\n    return decodeBytes;\n}\n\nexport function base64EncodeToString(bytes) {\n    const b = new Base64();\n    const string64 = b.encodeIgnoreUtf8(bytes);\n\n    return string64\n}\n\n//yyyy-MM-DD HH-mm-ss\nexport function strToDate(str) {\n    const tempStrs = str.split(\" \");\n    const dateStrs = tempStrs[0].split(\"-\");\n    const year = parseInt(dateStrs[0], 10);\n    const month = parseInt(dateStrs[1], 10) - 1;\n    const day = parseInt(dateStrs[2], 10);\n\n    if (tempStrs.length > 1) {\n        const timeStrs = tempStrs[1].split(\"-\");\n        const hour = parseInt(timeStrs[0], 10);\n        const minute = parseInt(timeStrs[1], 10) - 1;\n        const second = parseInt(timeStrs[2], 10);\n\n        return new Date(year, month, day, hour, minute, second);\n    }\n\n    return new Date(year, month, day);\n}\n\nexport function isNumber(c) {\n    if (c >= '0' && c <= '9')\n        return 1;\n        \n    return 0;\n}\n\n//return 1: address  --- 20Bytes HexString\n//return 2: blockNumber ------ Decimal number\n//return 3: assetName ------ String\n//return other: error\nexport function getStringType(str) {\n    if (null == str)\n        return -1;\n\n    if (typeof (str) != 'string')\n        return -1;\n\n    if (str.length == 0 || str == \"\")\n        return -1;\n\n    let i = 0;\n\n    if (str.length == 40) {\n        for (; i < 40; i++) {\n            var c = str.charAt(i);\n\n            if (!isHexChar(c))\n                break;\n        }\n    }\n\n    if (i == 40)\n        return 1; //40 Hex, Address\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (!isNumber(c))\n            break;\n    }\n\n    if (i == str.length)\n        return 2; //Alll Decimal number, BlockNumber\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (c > ' ')\n            return 3; //At least one visible character\n    }\n\n    return -1;\n}","const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nconst ALPHABET_MAP = {};\n\nfor (let i = 0; i < ALPHABET.length; i++)\n    ALPHABET_MAP[ALPHABET.charAt(i)] = i;\n\nconst BASE = 58;\n\nexport function encode58(buffer) {\n    if (buffer.length === 0) \n        return '';\n\n    let i;\n    let j;\n\n    const digits = [0];\n\n    for (i = 0; i < buffer.length; i++) {\n        for (j = 0; j < digits.length; j++) \n            digits[j] <<= 8;\n\n        digits[0] += buffer[i];\n        let carry = 0;\n\n        for (j = 0; j < digits.length; ++j) {\n            digits[j] += carry;\n            carry = (digits[j] / BASE) | 0;\n            digits[j] %= BASE\n        }\n\n        while (carry) {\n            digits.push(carry % BASE);\n            carry = (carry / BASE) | 0\n        }\n    }\n\n    for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++) \n        digits.push(0);\n\n    return digits.reverse().map(digit => ALPHABET[digit]).join('');\n}\n\nexport function decode58(string) {\n    if (string.length === 0) \n        return [];\n\n    let i;\n    let j;\n\n    const bytes = [0];\n\n    for (i = 0; i < string.length; i++) {\n        const c = string[i];\n\n        if (!(c in ALPHABET_MAP))\n            throw new Error('Non-base58 character');\n\n        for (j = 0; j < bytes.length; j++) \n            bytes[j] *= BASE;\n\n        bytes[0] += ALPHABET_MAP[c];\n        let carry = 0;\n\n        for (j = 0; j < bytes.length; ++j) {\n            bytes[j] += carry;\n            carry = bytes[j] >> 8;\n            bytes[j] &= 0xff;\n        }\n\n        while (carry) {\n            bytes.push(carry & 0xff);\n            carry >>= 8;\n        }\n    }\n\n    for (i = 0; string[i] === '1' && i < string.length - 1; i++)\n        bytes.push(0);\n\n    return bytes.reverse();\n}","import jsSHA from 'jssha';\n\nimport { ADDRESS_PREFIX, ADDRESS_PREFIX_BYTE, ADDRESS_SIZE } from './address';\nimport { base64EncodeToString } from './code';\nimport { base64DecodeFromString, hexStr2byteArray } from './code';\nimport { encode58, decode58 } from './base58';\nimport { keccak256 } from 'js-sha3';\nimport { byte2hexStr, byteArray2hexStr } from './bytes';\nimport { ec as EC } from 'elliptic';\n\nexport function getBase58CheckAddress(addressBytes) {\n    const hash0 = SHA256(addressBytes);\n    const hash1 = SHA256(hash0);\n\n    let checkSum = hash1.slice(0, 4);\n    checkSum = addressBytes.concat(checkSum);\n\n    return encode58(checkSum);\n}\n\nexport function decodeBase58Address(base58Sting) {\n    if (typeof (base58Sting) != 'string')\n        return false;\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    let address = decode58(base58Sting);\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    const len = address.length;\n    const offset = len - 4;\n    const checkSum = address.slice(offset);\n\n    address = address.slice(0, offset);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return address;\n    }\n\n    return hexStr2byteArray('000000000000000000000000000000000000000000');\n}\n\nexport function signTransaction(priKeyBytes, transaction) {\n    if (typeof priKeyBytes === 'string')\n        priKeyBytes = hexStr2byteArray(priKeyBytes);\n\n    const txID = transaction.txID;\n    const signature = ECKeySign(hexStr2byteArray(txID), priKeyBytes);\n\n    transaction.signature = [ signature ];\n    return transaction;\n}\n\nexport function arrayToBase64String(a) {\n    return btoa(String.fromCharCode(...a));\n}\n\nexport function signBytes(privateKey, contents) {\n    if (typeof privateKey === 'string')\n        privateKey = hexStr2byteArray(privateKey);\n\n    const hashBytes = SHA256(contents);\n    const signBytes = ECKeySign(hashBytes, privateKey);\n\n    return signBytes;\n}\n\nexport function getRowBytesFromTransactionBase64(base64Data) {\n    const bytesDecode = base64DecodeFromString(base64Data);\n    const transaction = proto.protocol.Transaction.deserializeBinary(bytesDecode);\n    const raw = transaction.getRawData();\n\n    return raw.serializeBinary();\n}\n\nexport function genPriKey() {\n    const ec = new EC('secp256k1');\n    const key = ec.genKeyPair();\n    const priKey = key.getPrivate();\n\n    let priKeyHex = priKey.toString('hex');\n\n    while (priKeyHex.length < 64) {\n        priKeyHex = `0${priKeyHex}`;\n    }\n\n    return hexStr2byteArray(priKeyHex);\n}\n\nexport function computeAddress(pubBytes) {\n    if (pubBytes.length === 65)\n        pubBytes = pubBytes.slice(1);\n\n    const hash = keccak256(pubBytes).toString();\n    const addressHex = ADDRESS_PREFIX + hash.substring(24);\n\n    return hexStr2byteArray(addressHex);\n}\n\nexport function getAddressFromPriKey(priKeyBytes) {\n    let pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    return computeAddress(pubBytes);\n}\n\nexport function decode58Check(addressStr) {\n    const decodeCheck = decode58(addressStr);\n\n    if (decodeCheck.length <= 4)\n        return false;\n\n    const decodeData = decodeCheck.slice(0, decodeCheck.length - 4);\n    const hash0 = SHA256(decodeData);\n    const hash1 = SHA256(hash0);\n\n    if (hash1[0] === decodeCheck[decodeData.length] &&\n        hash1[1] === decodeCheck[decodeData.length + 1] &&\n        hash1[2] === decodeCheck[decodeData.length + 2] &&\n        hash1[3] === decodeCheck[decodeData.length + 3]) {\n        return decodeData;\n    }\n\n    return false;\n}\n\nexport function isAddressValid(base58Str) {\n    if (typeof (base58Str) !== 'string')\n        return false;\n        \n    if (base58Str.length !== ADDRESS_SIZE)\n        return false;\n\n    let address = decode58(base58Str);\n\n    if (address.length !== 25)\n        return false;\n        \n    if (address[0] !== ADDRESS_PREFIX_BYTE)\n        return false;\n        \n    const checkSum = address.slice(21);\n    address = address.slice(0, 21);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return true\n    }\n\n    return false;\n}\n\nexport function getBase58CheckAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n\n    return getBase58CheckAddress(addressBytes);\n}\n\nexport function getHexStrAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressHex = byteArray2hexStr(addressBytes);\n\n    return addressHex;\n}\n\nexport function getAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressBase64 = base64EncodeToString(addressBytes);\n\n    return addressBase64;\n}\n\nexport function getPubKeyFromPriKey(priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const pubkey = key.getPublic();\n    const x = pubkey.x;\n    const y = pubkey.y;\n\n    let xHex = x.toString('hex');\n\n    while (xHex.length < 64) {\n        xHex = `0${xHex}`;\n    }\n\n    let yHex = y.toString('hex');\n\n    while (yHex.length < 64) {\n        yHex = `0${yHex}`;\n    }\n\n    const pubkeyHex = `04${xHex}${yHex}`;\n    const pubkeyBytes = hexStr2byteArray(pubkeyHex);\n\n    return pubkeyBytes;\n}\n\nexport function ECKeySign(hashBytes, priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const signature = key.sign(hashBytes);\n    const r = signature.r;\n    const s = signature.s;\n    const id = signature.recoveryParam;\n\n    let rHex = r.toString('hex');\n\n    while (rHex.length < 64) {\n        rHex = `0${rHex}`;\n    }\n\n    let sHex = s.toString('hex');\n\n    while (sHex.length < 64) {\n        sHex = `0${sHex}`;\n    }\n\n    const idHex = byte2hexStr(id);\n    const signHex = rHex + sHex + idHex;\n\n    return signHex;\n}\n\nexport function SHA256(msgBytes) {\n    const shaObj = new jsSHA('SHA-256', 'HEX');\n    const msgHex = byteArray2hexStr(msgBytes);\n\n    shaObj.update(msgHex);\n    const hashHex = shaObj.getHash('HEX');\n\n    return hexStr2byteArray(hashHex);\n}\n\nexport function passwordToAddress(password) {\n    const com_priKeyBytes = base64DecodeFromString(password);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n\nexport function pkToAddress(privateKey) {\n    const com_priKeyBytes = hexStr2byteArray(privateKey);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n","import { byteArray2hexStr } from './bytes';\nimport { \n    getBase58CheckAddress,\n    genPriKey,\n    getAddressFromPriKey,\n    getPubKeyFromPriKey\n} from './crypto';\n\nexport function generateAccount() {\n    const priKeyBytes = genPriKey();\n    const pubKeyBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = getAddressFromPriKey(priKeyBytes);\n    \n    const privateKey = byteArray2hexStr(priKeyBytes);\n    const publicKey = byteArray2hexStr(pubKeyBytes);\n\n    return {\n        privateKey,\n        publicKey,\n        address: {\n            base58: getBase58CheckAddress(addressBytes),\n            hex: byteArray2hexStr(addressBytes)\n        }\n    }\n}","import * as Ethers from 'ethers';\nimport TronWeb from 'index';\n\nconst abiCoder = new Ethers.utils.AbiCoder();\n\nexport function decodeParams(names, types, output, ignoreMethodHash) {\n\n    if (!output || typeof output === 'boolean') {\n        ignoreMethodHash = output;\n        output = types;\n        types = names;\n        names = [];\n    }\n\n    if (ignoreMethodHash && output.replace(/^0x/,'').length % 64 === 8)\n        output = '0x' + output.replace(/^0x/,'').substring(8);\n\n    if (output.replace(/^0x/,'').length % 64)\n        throw new Error('The encoded string is not valid. Its length must be a multiple of 64.');\n\n    return abiCoder.decode(types, output).reduce((obj, arg, index) => {\n        if(types[index] == 'address')\n            arg = '41' + arg.substr(2).toLowerCase();\n\n        if(names.length)\n            obj[names[index]] = arg;\n        else obj.push(arg);\n\n        return obj;\n    }, names.length ? {} : []);\n}\n\nexport function encodeParams(types, values) {\n\n    for (let i =0;i<types.length;i++) {\n        if (types[i] === 'address') {\n            values[i] =  TronWeb.address.toHex(values[i]).replace(/^41/, '0x');\n        }\n    }\n\n    return abiCoder.encode(types, values);\n}\n","import * as accounts from './accounts';\nimport * as base58 from './base58';\nimport * as bytes from './bytes';\nimport * as crypto from './crypto';\nimport * as code from './code';\nimport * as abi from './abi';\n\nimport validator from 'validator';\nimport BigNumber from 'bignumber.js';\n\nconst utils = {\n    isValidURL(url) {\n        return validator.isURL(url.toString(), {\n            protocols: [ 'http', 'https' ]\n        });\n    },\n\n    isObject(obj) {\n        return obj === Object(obj) && Object.prototype.toString.call(obj) !== '[object Array]';\n    },\n\n    isArray(array) {\n        return Array.isArray(array);\n    },\n\n    isJson(string) {\n        try {\n            return !!JSON.parse(string);\n        } catch (ex) {\n            return false;\n        }\n    },\n\n    isBoolean(bool) {\n        return typeof bool === 'boolean';\n    },\n\n    isBigNumber(number) {\n        return number && (number instanceof BigNumber || (number.constructor && number.constructor.name === 'BigNumber'));\n    },\n\n    isString(string) {\n        return typeof string === 'string' || (string && string.constructor && string.constructor.name === 'String');\n    },\n\n    isFunction(obj) {\n        return typeof obj === 'function';\n    },\n\n    isHex(string) {\n        return typeof string === 'string' && !isNaN(parseInt(string, 16));\n    },\n\n    isInteger(number) {\n        return Number.isInteger(\n            Number(number)\n        );\n    },\n\n    hasProperty(obj, property) {\n        return Object.prototype.hasOwnProperty.call(obj, property);\n    },\n\n    hasProperties(obj, ...properties) {\n        return properties.length && !properties.map(property => {\n            return this.hasProperty(obj, property)\n        }).includes(false);\n    },\n\n    injectPromise(func, ...args) {\n        return new Promise((resolve, reject) => {\n            func(...args, (err, res) => {\n                if(err)\n                    reject(err);\n                else resolve(res);\n            });\n        });\n    },\n\n    promiseInjector(scope) {\n        return (func, ...args) => {\n            return this.injectPromise(func.bind(scope), ...args);\n        }\n    },\n\n    mapEvent(event) {\n        return {\n            block: event.block_number,\n            timestamp: event.block_timestamp,\n            contract: event.contract_address,\n            name: event.event_name,\n            transaction: event.transaction_id,\n            result: event.result\n        };\n    },\n\n    parseEvent(event, { inputs: abi }) {\n        if(!event.result)\n            return event;\n\n        if (this.isObject(event.result)) {\n            for (var i = 0; i < abi.length; i++) {\n                let obj = abi[i];\n                if (obj.type == 'address' && obj.name in event.result)\n                    event.result[obj.name] = '41' + event.result[obj.name].substr(2).toLowerCase();\n            }\n        } else if (this.isArray(event.result)) {\n            event.result = event.result.reduce((obj, result, index) => {\n                const {\n                    name,\n                    type\n                } = abi[index];\n\n                if(type == 'address')\n                    result = '41' + result.substr(2).toLowerCase();\n\n                obj[name] = result;\n\n                return obj;\n            }, {});\n        }\n\n        return event;\n    },\n\n    padLeft(input, padding, amount) {\n        let res = input.toString();\n\n        while(res.length < amount)\n            res = padding + res;\n\n        return res;\n    }\n}\n\nexport default {\n    ...utils,\n    code,\n    accounts,\n    base58,\n    bytes,\n    crypto,\n    abi\n};\n","import HttpProvider from './HttpProvider';\n\nexport default {\n    HttpProvider\n};","import axios from 'axios';\nimport utils from 'utils';\n\nexport default class HttpProvider {\n    constructor(host, timeout = 30000, user = false, password = false, headers = {}, statusPage = '/') {\n        if(!utils.isValidURL(host))\n            throw new Error('Invalid URL provided to HttpProvider');\n\n        if(isNaN(timeout) || timeout < 0)\n            throw new Error('Invalid timeout duration provided');\n\n        if(!utils.isObject(headers))\n            throw new Error('Invalid headers object provided');\n\n        host = host.replace(/\\/+$/,'');\n\n        this.host = host;\n        this.timeout = timeout;\n        this.user = user;\n        this.password = password;\n        this.headers = headers;\n        this.statusPage = statusPage;\n\n        this.instance = axios.create({            \n            baseURL: host,\n            timeout: timeout,\n            headers: headers,\n            auth: user && {\n                user,\n                password\n            },\n        });\n    }\n\n    setStatusPage(statusPage = '/') {\n        this.statusPage = statusPage;\n    }\n\n    async isConnected(statusPage = this.statusPage) {\n        return this.request(statusPage).then(data => {\n            return utils.hasProperties(data, 'blockID', 'block_header');\n        }).catch(() => false);\n    }\n\n    request(url, payload = {}, method = 'get') {\n        method = method.toLowerCase();\n\n        return this.instance.request({\n            data: method == 'post' && payload,\n            params: method =='get' && payload,\n            url,\n            method\n        }).then(({ data }) => data);\n    }\n};\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport * as Ethers from 'ethers';\n\nexport default class TransactionBuilder {\n    constructor(tronWeb = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    sendTrx(to = false, amount = 0, from = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.sendTrx, to, amount, from);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!this.tronWeb.isAddress(from))\n            return callback('Invalid origin address provided');\n\n        to = this.tronWeb.address.toHex(to);\n        from = this.tronWeb.address.toHex(from);\n\n        if(to === from)\n            return callback('Cannot transfer TRX to the same account');\n\n        this.tronWeb.fullNode.request('wallet/createtransaction', {\n            to_address: to,\n            owner_address: from,\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    sendToken(to = false, amount = 0, tokenID = false, from = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, from);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if(!this.tronWeb.isAddress(from))\n            return callback('Invalid origin address provided');\n\n        to = this.tronWeb.address.toHex(to);\n        tokenID = this.tronWeb.fromUtf8(tokenID);\n        from = this.tronWeb.address.toHex(from);\n\n        if(to === from)\n            return callback('Cannot transfer tokens to the same account');\n\n        this.tronWeb.fullNode.request('wallet/transferasset', {\n            to_address: to,\n            owner_address: from,\n            asset_name: tokenID,\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    purchaseToken(issuerAddress = false, tokenID = false, amount = 0, buyer = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(buyer)) {\n            callback = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.purchaseToken, issuerAddress, tokenID, amount, buyer);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!this.tronWeb.isAddress(buyer))\n            return callback('Invalid buyer address provided');\n\n        this.tronWeb.fullNode.request('wallet/participateassetissue', {\n            to_address: this.tronWeb.address.toHex(issuerAddress),\n            owner_address: this.tronWeb.address.toHex(buyer),\n            asset_name: this.tronWeb.fromUtf8(tokenID),\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    freezeBalance(address = this.tronWeb.defaultAddress.hex, amount = 0, duration = 3, resource = \"BANDWIDTH\", callback = false) {\n        if(utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n            \n        if(!callback)\n            return this.injectPromise(this.freezeBalance, address, amount, duration, resource);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isInteger(duration) || duration < 3)\n            return callback('Invalid duration provided, minimum of 3 days');\n\n        this.tronWeb.fullNode.request('wallet/freezebalance', {\n            owner_address: this.tronWeb.address.toHex(address),\n            frozen_balance: parseInt(amount),\n            frozen_duration: parseInt(duration),\n            resource: resource\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    unfreezeBalance(address = this.tronWeb.defaultAddress.hex, resource = \"BANDWIDTH\", callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if(!callback)\n            return this.injectPromise(this.unfreezeBalance, address, resource);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n        \n        this.tronWeb.fullNode.request('wallet/unfreezebalance', {\n            owner_address: this.tronWeb.address.toHex(address),\n            resource: resource\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    withdrawBlockRewards(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.withdrawBlockRewards, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n        \n        this.tronWeb.fullNode.request('wallet/withdrawbalance', {\n            owner_address: this.tronWeb.address.toHex(address)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    applyForSR(address = this.tronWeb.defaultAddress.hex, url = false, callback = false) {\n        if(utils.isValidURL(address)) {\n            callback = url || false;\n            url = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.applyForSR, address, url);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isValidURL(url))\n            return callback('Invalid url provided');\n        \n        this.tronWeb.fullNode.request('wallet/createwitness', {\n            owner_address: this.tronWeb.address.toHex(address),\n            url: this.tronWeb.fromUtf8(url)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    vote(votes = {}, voterAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.vote, votes, voterAddress);\n\n        if(!utils.isObject(votes) || !Object.keys(votes).length)\n            return callback('Invalid votes object provided');\n\n        if(!this.tronWeb.isAddress(voterAddress))\n            return callback('Invalid voter address provided');\n\n        let invalid = false;\n\n        votes = Object.entries(votes).map(([ srAddress, voteCount ]) => {\n            if(invalid)\n                return;\n\n            if(!this.tronWeb.isAddress(srAddress)) {\n                callback('Invalid SR address provided: ' + srAddress);\n                return invalid = true;\n            }\n\n            if(!utils.isInteger(voteCount) || voteCount <= 0) {\n                callback('Invalid vote count provided for SR: ' + srAddress);\n                return invalid = true;\n            }\n\n            return {\n                vote_address: this.tronWeb.address.toHex(srAddress),\n                vote_count: parseInt(voteCount)\n            };\n        });\n\n        if(invalid)\n            return;\n\n        this.tronWeb.fullNode.request('wallet/votewitnessaccount', {\n            owner_address: this.tronWeb.address.toHex(voterAddress),\n            votes\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    createSmartContract(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.createSmartContract, options, issuerAddress);\n\n        let {\n            abi = false,\n            bytecode = false,\n            feeLimit = 1_000_000_000,\n            callValue = 0,\n            userFeePercentage = 0,\n            parameters = [],\n            name = \"\",\n        } = options;\n        \n\n        if(abi && utils.isString(abi)) {\n            try {\n                abi = JSON.parse(abi);\n            } catch{\n                return callback('Invalid options.abi provided');\n            }\n        }\n\n        if(!utils.isArray(abi))\n            return callback('Invalid options.abi provided');\n\n\n        const payable = abi.some(func => {\n            return func.type == 'constructor' && func.payable;\n        });\n\n        if(!utils.isHex(bytecode))\n            return callback('Invalid options.bytecode provided');\n\n        if(!utils.isInteger(feeLimit) || feeLimit <= 0 || feeLimit > 1_000_000_000)\n            return callback('Invalid options.feeLimit provided');\n\n        if(!utils.isInteger(callValue) || callValue < 0)\n            return callback('Invalid options.callValue provided');\n\n        if(payable && callValue == 0)\n            return callback('When contract is payable, options.callValue must be a positive integer');\n\n        if(!payable && callValue > 0)\n            return callback('When contract is not payable, options.callValue must be 0');\n\n        if(!utils.isInteger(userFeePercentage) || userFeePercentage < 0 || userFeePercentage > 100)\n            return callback('Invalid options.userFeePercentage provided');\n\n        if(!utils.isArray(parameters))\n            return callback('Invalid parameters provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        var constructorParams = abi.find(\n            (it) => {\n                return it.type === 'constructor';\n            }\n        );\n\n        if(typeof constructorParams !== 'undefined' && constructorParams) {\n            const abiCoder = new Ethers.utils.AbiCoder();\n            const types = [];\n            const values = [];\n            constructorParams = constructorParams.inputs;\n\n            if(parameters.length != constructorParams.length)\n                return callback(`constructor needs ${constructorParams.length} but ${parameters.length} provided`);\n\n            for(let i = 0; i < parameters.length; i++) {\n                let type = constructorParams[i].type;\n                let value = parameters[i];\n\n                if(!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if(type == 'address')\n                    value = this.tronWeb.address.toHex(value).replace(/^(41)/, '0x');\n                    \n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        this.tronWeb.fullNode.request('wallet/deploycontract', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            consume_user_resource_percent: userFeePercentage,\n            abi: JSON.stringify(abi),\n            bytecode,\n            parameter: parameters,\n            name\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    triggerSmartContract(\n        contractAddress, \n        functionSelector,\n        feeLimit = 1_000_000_000,\n        callValue = 0,\n        parameters = [], \n        issuerAddress = this.tronWeb.defaultAddress.hex, \n        callback = false\n    ) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(parameters)) {\n            callback = parameters;\n            parameters = [];\n        }\n\n        if(utils.isFunction(callValue)) {\n            callback = callValue;\n            callValue = 0;\n        }\n\n        if(utils.isFunction(feeLimit)) {\n            callback = feeLimit;\n            feeLimit = 1_000_000_000;\n        }\n\n        if(!callback) {\n            return this.injectPromise(\n                this.triggerSmartContract, \n                contractAddress, \n                functionSelector, \n                feeLimit,\n                callValue, \n                parameters,\n                issuerAddress\n            );\n        }\n\n        if(!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if(!utils.isString(functionSelector) || !functionSelector.length)\n            return callback('Invalid function selector provided');\n\n        if(!utils.isInteger(callValue) || callValue < 0)\n            return callback('Invalid call value provided');\n\n        if(!utils.isInteger(feeLimit) || feeLimit <= 0 || feeLimit > 1_000_000_000)\n            return callback('Invalid fee limit provided');\n\n        if(!utils.isArray(parameters))\n            return callback('Invalid parameters provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        functionSelector = functionSelector.replace('/\\s*/g', '');\n\n        if(parameters.length) {\n            const abiCoder = new Ethers.utils.AbiCoder();\n            const types = [];\n            const values = [];\n\n            for(let i = 0; i < parameters.length; i++) {\n                let { type, value } = parameters[i];\n\n                if(!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if(type == 'address')\n                    value = this.tronWeb.address.toHex(value).replace(/^(41)/, '0x');\n                    \n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        this.tronWeb.fullNode.request('wallet/triggersmartcontract', {\n            contract_address: this.tronWeb.address.toHex(contractAddress),\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            function_selector: functionSelector,\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            parameter: parameters\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            if(!transaction.result.result)\n                return callback(transaction);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    createToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.createToken, options, issuerAddress);\n\n        const {\n            name = false,\n            abbreviation = false,\n            description = false,\n            url = false,\n            totalSupply = 0,\n            trxRatio = 1, // How much TRX will `tokenRatio` cost?\n            tokenRatio = 1, // How many tokens will `trxRatio` afford?\n            saleStart = Date.now(),\n            saleEnd = false,            \n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0, // Out of `totalFreeBandwidth`, the amount each token holder get\n            frozenAmount = 0,\n            frozenDuration = 0\n        } = options;\n\n        if(!utils.isString(name) || !name.length)\n            return callback('Invalid token name provided');\n\n        if(!utils.isString(abbreviation) || !abbreviation.length)\n            return callback('Invalid token abbreviation provided');\n\n        if(!utils.isInteger(totalSupply) || totalSupply <= 0)\n            return callback('Invalid supply amount provided');\n\n        if(!utils.isInteger(trxRatio) || trxRatio <= 0)\n            return callback('TRX ratio must be a positive integer');\n\n        if(!utils.isInteger(tokenRatio) || tokenRatio <= 0)\n            return callback('Token ratio must be a positive integer');\n\n        if(!utils.isInteger(saleStart) || saleStart < Date.now())\n            return callback('Invalid sale start timestamp provided');\n\n        if(!utils.isInteger(saleEnd) || saleEnd <= saleStart)\n            return callback('Invalid sale end timestamp provided');\n\n        if(!utils.isString(description) || !description.length)\n            return callback('Invalid token description provided');\n\n        if(!utils.isString(url) || !url.length || !utils.isValidURL(url))\n            return callback('Invalid token url provided');\n\n        if(!utils.isInteger(freeBandwidth) || freeBandwidth < 0)\n            return callback('Invalid free bandwidth amount provided');\n\n        if(!utils.isInteger(freeBandwidthLimit) || freeBandwidthLimit < 0 || (freeBandwidth && !freeBandwidthLimit))\n            return callback('Invalid free bandwidth limit provided');\n\n        if(!utils.isInteger(frozenAmount) || frozenAmount < 0 || (!frozenDuration && frozenAmount))\n            return callback('Invalid frozen supply provided');\n\n        if(!utils.isInteger(frozenDuration) || frozenDuration < 0 || (frozenDuration && !frozenAmount))\n            return callback('Invalid frozen duration provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        this.tronWeb.fullNode.request('wallet/createassetissue', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            name: this.tronWeb.fromUtf8(name),\n            abbr: this.tronWeb.fromUtf8(abbreviation),\n            description: this.tronWeb.fromUtf8(description),\n            url: this.tronWeb.fromUtf8(url),\n            total_supply: parseInt(totalSupply),\n            trx_num: parseInt(trxRatio),\n            num: parseInt(tokenRatio),\n            start_time: parseInt(saleStart),\n            end_time: parseInt(saleEnd),\n            free_asset_net_limit: parseInt(freeBandwidth),\n            public_free_asset_net_limit: parseInt(freeBandwidthLimit),\n            frozen_supply: {\n                frozen_amount: parseInt(frozenAmount),\n                frozen_days: parseInt(frozenDuration)\n            }\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    updateAccount(accountName = false, address = this.tronWeb.defaultAddress.hex, callback = false)\n    {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback) {\n            return this.injectPromise(this.updateAccount, accountName, address);\n        }\n\n        if (!utils.isString(accountName) || !accountName.length) {\n            return callback('Name must be a string');\n        }\n\n        if(!this.tronWeb.isAddress(address)) {\n            return callback('Invalid origin address provided');\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateaccount', {\n            account_name: stringUtf8toHex(accountName),\n            owner_address: this.tronWeb.address.toHex(address),\n        }, 'post').then(transaction => {\n\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    updateToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.updateToken, options, issuerAddress);\n\n        const {\n            description = false,\n            url = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0 // Out of `totalFreeBandwidth`, the amount each token holder get\n        } = options;\n\n        if(!utils.isInteger(freeBandwidth) || freeBandwidth < 0)\n            return callback('Invalid free bandwidth amount provided');\n\n        if(!utils.isInteger(freeBandwidthLimit) || freeBandwidthLimit < 0 || (freeBandwidth && !freeBandwidthLimit))\n            return callback('Invalid free bandwidth limit provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        this.tronWeb.fullNode.request('wallet/updateasset', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            description: this.tronWeb.fromUtf8(description),\n            url: this.tronWeb.fromUtf8(url),\n            new_limit: parseInt(freeBandwidth),\n            new_public_limit: parseInt(freeBandwidthLimit)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    purchaseAsset(...args) {\n        return this.purchaseToken(...args);\n    }\n\n    createAsset(...args) {\n        return this.createToken(...args);\n    }\n\n    updateAsset(...args) {\n        return this.updateToken(...args);\n    }\n\n    /**\n     * Creates a proposal to modify the network.\n     * Can only be created by a current Super Representative.\n     */\n    createProposal(parameters = false, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!parameters)\n            return callback('Invalid proposal parameters provided');\n\n        if(!callback)\n            return this.injectPromise(this.createProposal, parameters, issuerAddress);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuerAddress provided');\n\n        if(!utils.isObject(parameters))\n            return callback('Invalid parameters provided');\n\n        this.tronWeb.fullNode.request('wallet/proposalcreate', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            parameters: parameters\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Deletes a network modification proposal that the owner issued.\n     * Only current Super Representative can vote on a proposal.\n     */\n    deleteProposal(proposalID = false, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.deleteProposal, proposalID, issuerAddress);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuerAddress provided');\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/proposaldelete', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            proposal_id: parseInt(proposalID)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds a vote to an issued network modification proposal.\n     * Only current Super Representative can vote on a proposal.\n     */\n    voteProposal(proposalID = false, hasApproval = false, voterAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.voteProposal, proposalID, hasApproval, voterAddress);\n\n        if(!this.tronWeb.isAddress(voterAddress))\n            return callback('Invalid voterAddress address provided');\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        if(!utils.isBoolean(hasApproval))\n            return callback('Invalid hasApproval provided');\n\n        this.tronWeb.fullNode.request('wallet/proposalapprove', {\n            owner_address: this.tronWeb.address.toHex(voterAddress),\n            proposal_id: parseInt(proposalID),\n            is_add_approval: isApproval.toString()\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds tokens into a bancor style exchange.\n     */\n    injectExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.injectExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmount) || tokenAmount < 1)\n            return callback('Invalid tokenAmount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangeinject', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant:parseInt(tokenAmount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Withdraws tokens from a bancor style exchange.\n     */\n    withdrawExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.withdrawExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmount) || tokenAmount < 1)\n            return callback('Invalid tokenAmount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangewithdraw', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant:parseInt(tokenAmount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Trade tokens on a bancor style exchange.\n     */\n    tradeExchangeTokens(exchangeID = false, \n        tokenName = false, \n        tokenAmountSold = 0, \n        tokenAmountExpected = 0, \n        ownerAddress = this.tronWeb.defaultAddress.hex, \n        callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.tradeExchangeTokens, exchangeID, tokenName, tokenAmountSold, tokenAmountExpected, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmountSold) || tokenAmountSold < 1)\n            return callback('Invalid tokenAmountSold provided');\n\n        if(!utils.isInteger(tokenAmountExpected) || tokenAmountExpected < 1)\n            return callback('Invalid tokenAmountExpected provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangewithdraw', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant:parseInt(tokenAmountSold),\n            expected:parseInt(tokenAmountExpected)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport * as Ethers from 'ethers';\n\nconst TRX_MESSAGE_HEADER = '\\x19TRON Signed Message:\\n32';\nconst ETH_MESSAGE_HEADER = '\\x19Ethereum Signed Message:\\n32';\n\nexport default class Trx {\n    constructor(tronWeb = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    parseToken(token) {\n        return {\n            ...token,\n            name: this.tronWeb.toUtf8(token.name),\n            abbr: token.abbr && this.tronWeb.toUtf8(token.abbr),\n            description: token.description && this.tronWeb.toUtf8(token.description),\n            url: token.url && this.tronWeb.toUtf8(token.url)\n        };\n    }\n\n    getCurrentBlock(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getCurrentBlock);\n\n        this.tronWeb.fullNode.request('wallet/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlock(block = this.tronWeb.defaultBlock, callback = false) {\n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlock, block);\n\n        if(block === false)\n            return callback('No block identifier provided');\n\n        if(block == 'earliest')\n            block = 0;\n\n        if(block == 'latest')\n            return this.getCurrentBlock(callback);\n\n        if(isNaN(block) && utils.isHex(block))\n            return this.getBlockByHash(block, callback);\n\n        this.getBlockByNumber(block, callback);\n    }\n\n    getBlockByHash(blockHash, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getBlockByHash, blockHash);\n\n        this.tronWeb.fullNode.request('wallet/getblockbyid', { \n            value: blockHash \n        }, 'post').then(block => {\n            if(!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockByNumber(blockID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getBlockByNumber, blockID);\n\n        if(!utils.isInteger(blockID) || blockID < 0)\n            return callback('Invalid block number provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbynum', { \n            num: parseInt(blockID) \n        }, 'post').then(block => {\n            if(!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockTransactionCount(block = this.tronWeb.defaultBlock, callback = false) {\n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlockTransactionCount, block);\n\n        this.getBlock(block).then(({ transactions = [] }) => {\n            callback(null, transactions.length);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionFromBlock(block = this.tronWeb.defaultBlock, index = 0, callback = false) {\n        if(utils.isFunction(index)) {\n            callback = index;\n            index = 0;\n        }\n        \n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionFromBlock, block, index);\n\n        if(!utils.isInteger(index) || index < 0)\n            return callback('Invalid transaction index provided');\n\n        this.getBlock(block).then(({ transactions = false }) => {\n            if(!transactions || transactions.length < index)\n                return callback('Transaction not found in block');\n\n            callback(null, transactions[index]);\n        }).catch(err => callback(err));\n    }\n\n    getTransaction(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTransaction, transactionID);\n\n        this.tronWeb.fullNode.request('wallet/gettransactionbyid', { \n            value: transactionID \n        }, 'post').then(transaction => {\n            if(!Object.keys(transaction).length)\n                return callback('Transaction not found');\n                \n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionInfo(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTransactionInfo, transactionID);\n\n        this.tronWeb.solidityNode.request('walletsolidity/gettransactioninfobyid', { \n            value: transactionID \n        }, 'post').then(transaction => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionsToAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;          \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsToAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'to', limit, offset, callback);\n    }\n\n    getTransactionsFromAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;           \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsFromAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'from', limit, offset, callback);\n    }\n\n    async getTransactionsRelated(address = this.tronWeb.defaultAddress.hex, direction = 'all', limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;         \n        }\n\n        if(utils.isFunction(direction)) {\n            callback = direction;\n            direction = 'all';\n        }\n\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsRelated, address, direction, limit, offset);\n\n        if(![ 'to', 'from', 'all' ].includes(direction))\n            return callback('Invalid direction provided: Expected \"to\", \"from\" or \"all\"');\n        \n        if(direction == 'all') {\n            try {\n                const from = await this.getTransactionsRelated(address, 'from', limit, offset);\n                const to = await this.getTransactionsRelated(address, 'to', limit, offset);\n\n                return callback(null, [\n                    ...from.map(tx => (tx.direction = 'from', tx)),\n                    ...to.map(tx => (tx.direction = 'to', tx))\n                ].sort((a, b) => b.raw_data.timestamp - a.raw_data.timestamp));\n            } catch(ex) {\n                return callback(ex);\n            }\n        }\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if(!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request(`walletextension/gettransactions${direction}this`, {\n            account: {\n                address\n            },\n            offset,\n            limit\n        }, 'post').then(({ transaction }) => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getAccount, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBalance, address);\n\n        this.getAccount(address).then(({ balance = 0 }) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getBandwidth(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBandwidth, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccountnet', {\n            address\n        }, 'post').then(({ freeNetUsed = 0, freeNetLimit = 0, NetUsed = 0, NetLimit = 0 }) => {\n            callback(null, (freeNetLimit - freeNetUsed) + (NetLimit - NetUsed));\n        }).catch(err => callback(err));\n    }\n\n    getTokensIssuedByAddress(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTokensIssuedByAddress, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyaccount', {\n            address\n        }, 'post').then(({ assetIssue = false }) => {\n            if(!assetIssue)\n                return callback(null, {});\n\n            const tokens = assetIssue.map(token => {\n                return this.parseToken(token);\n            }).reduce((tokens, token) => {\n                return tokens[token.name] = token, tokens;\n            }, {});\n\n            callback(null, tokens);\n        }).catch(err => callback(err));\n    }\n\n    getTokenFromID(tokenID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTokenFromID, tokenID);\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if(!token.name)\n                return callback('Token does not exist');\n                \n            callback(null, this.parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    listNodes(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listNodes);\n\n        this.tronWeb.fullNode.request('wallet/listnodes').then(({ nodes = [] }) => {\n            callback(null, nodes.map(({ address: { host, port } }) => (\n                `${this.tronWeb.toUtf8(host)}:${port}`\n            )));\n        }).catch(err => callback(err));\n    }\n\n    getBlockRange(start = 0, end = 30, callback = false) {\n        if(utils.isFunction(end)) {\n            callback = end;\n            end = 30;            \n        }\n\n        if(utils.isFunction(start)) {\n            callback = start;\n            start = 0;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlockRange, start, end);\n\n        if(!utils.isInteger(start) || start < 0)\n            return callback('Invalid start of range provided');\n\n        if(!utils.isInteger(end) || end <= start)\n            return callback('Invalid end of range provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbylimitnext', { \n            startNum: parseInt(start),\n            endNum: parseInt(end) + 1\n        }, 'post').then(({ block = [] }) => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    listSuperRepresentatives(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listSuperRepresentatives);\n\n        this.tronWeb.fullNode.request('wallet/listwitnesses').then(({ witnesses = [] }) => {\n            callback(null, witnesses);\n        }).catch(err => callback(err));\n    }\n\n    listTokens(limit = 0, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 0;  \n        }\n        \n        if(!callback)\n            return this.injectPromise(this.listTokens, limit, offset);\n\n        if(!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if(!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        if(!limit) {\n            return this.tronWeb.fullNode.request('wallet/getassetissuelist').then(({ assetIssue = [] }) => {\n                callback(null, assetIssue.map(token => this.parseToken(token)));\n            }).catch(err => callback(err));\n        }\n\n        this.tronWeb.fullNode.request('wallet/getpaginatedassetissuelist', {\n            offset: parseInt(offset),\n            limit: parseInt(limit)\n        }, 'post').then(({ assetIssue = [] }) => {\n            callback(null, assetIssue.map(token => this.parseToken(token)));\n        }).catch(err => callback(err));\n    }\n\n    timeUntilNextVoteCycle(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.timeUntilNextVoteCycle);\n\n        this.tronWeb.fullNode.request('wallet/getnextmaintenancetime').then(({ num = -1 }) => {\n            if(num == -1)\n                return callback('Failed to get time until next vote cycle');\n\n            callback(null, Math.floor(num / 1000));\n        }).catch(err => callback(err));\n    }\n\n    getContract(contractAddress, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getContract, contractAddress);\n\n        if(!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        contractAddress = this.tronWeb.address.toHex(contractAddress);\n\n        this.tronWeb.fullNode.request('wallet/getcontract', {\n            value: contractAddress\n        }).then(contract => {\n            if(contract.Error)\n                return callback('Contract does not exist');\n\n            callback(null, contract);\n        }).catch(err => callback(err));\n    }\n\n    async verifyMessage(message = false, signature = false, address = this.tronWeb.defaultAddress.base58, useTronHeader = true, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.base58;\n            useTronHeader = true;\n        }\n\n        if(utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.verifyMessage, message, signature, address, useTronHeader);\n\n        if(!utils.isHex(message))\n            return callback('Expected hex message input');\n\n        if(message.substr(0, 2) == '0x')\n            message = message.substring(2);\n\n        if(signature.substr(0, 2) == '0x')\n            signature = signature.substr(2);\n\n        const messageBytes = [\n            ...Ethers.utils.toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n            ...utils.code.hexStr2byteArray(message)\n        ];\n\n        const messageDigest = Ethers.utils.keccak256(messageBytes);\n        const recovered = Ethers.utils.recoverAddress(messageDigest, {\n            recoveryParam: signature.substring(128, 130) == '1c' ? 1 : 0,\n            r: '0x' + signature.substring(0, 64),\n            s: '0x' + signature.substring(64, 128)\n        });\n\n        const tronAddress = '41' + recovered.substr(2);\n        const base58Address = this.tronWeb.address.fromHex(tronAddress);\n\n        if(base58Address == this.tronWeb.address.fromHex(address))\n            return callback(null, true);\n\n        callback('Signature does not match');\n    }\n\n    async sign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, useTronHeader = true, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n            useTronHeader = true;\n        }\n\n        if(utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sign, transaction, privateKey, useTronHeader);\n\n        // Message signing\n        if(utils.isString(transaction)) {\n            if(transaction.substring(0, 2) == '0x')\n                transaction = transaction.substring(2);\n\n            if(!utils.isHex(transaction))\n                return callback('Expected hex message input');\n\n            try {\n                const signingKey = new Ethers.utils.SigningKey(privateKey);\n                const messageBytes = [\n                    ...Ethers.utils.toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n                    ...utils.code.hexStr2byteArray(transaction)\n                ];\n\n                const messageDigest = Ethers.utils.keccak256(messageBytes);\n                const signature = signingKey.signDigest(messageDigest);\n\n                const signatureHex = [\n                    '0x',\n                    signature.r.substring(2),\n                    signature.s.substring(2),\n                    Number(signature.v).toString(16)\n                ].join('');\n\n                return callback(null, signatureHex);\n            } catch(ex) {\n                callback(ex);\n            }\n        }\n\n        if(!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if(transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            const address = this.tronWeb.address.toHex(\n                this.tronWeb.address.fromPrivateKey(privateKey)\n            ).toLowerCase();\n\n            if(address !== transaction.raw_data.contract[0].parameter.value.owner_address.toLowerCase())\n                return callback('Private key does not match address in transaction');\n\n            return callback(null,\n                utils.crypto.signTransaction(privateKey, transaction)\n            );\n        } catch(ex) {\n            callback(ex);\n        }\n    }\n\n    sendRawTransaction(signedTransaction = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.sendRawTransaction, signedTransaction);\n\n        if(!utils.isObject(signedTransaction))\n            return callback('Invalid transaction provided');\n\n        if(!signedTransaction.signature || !utils.isArray(signedTransaction.signature))\n            return callback('Transaction is not signed');\n\n        this.tronWeb.fullNode.request(\n            'wallet/broadcasttransaction', \n            signedTransaction,\n            'post'\n        ).then(result => {\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    async sendTransaction(to = false, amount = false, options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sendTransaction, to, amount, options);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendTrx(to, amount, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    async sendToken(to = false, amount = false, tokenID = false, options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, options);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isString(tokenID))\n            return callback('Invalid token ID provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendToken(to, amount, tokenID, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Modify account name\n     * Note: Username is allowed to edit only once.\n     *\n     * @param privateKey - Account private Key\n     * @param accountName - name of the account\n     * @param callback\n     *\n     * @return modified Transaction Object\n     */\n    async updateAccount(accountName = false, privateKey = this.tronWeb.defaultPrivateKey,  callback = false)\n    {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if(!callback) {\n            return this.injectPromise(this.updateAccount, accountName, privateKey);\n        }\n\n        if (!utils.isString(accountName) || !accountName.length) {\n            return callback('Name must be a string');\n        }\n\n        try {\n            const address = this.tronWeb.address.fromPrivateKey(privateKey);\n            const updateAccount = await this.tronWeb.transactionBuilder.updateAccount(accountName, address);\n            const signedTransaction = await this.sign(updateAccount, privateKey);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    signMessage(...args) {\n        return this.sign(...args);\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    send(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    sendTrx(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    broadcast(...args) {\n        return this.sendRawTransaction(...args);\n    }\n\n    signTransaction(...args) {\n        return this.sign(...args);\n    }\n\n    /**\n     * Gets a network modification proposal by ID.\n     */\n    getProposal(proposalID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getProposal, proposalID);\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/getproposalbyid', { \n            id: parseInt(proposalID),\n        }, 'post').then(proposal => {\n            callback(null, proposal);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listProposals(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listProposals);\n\n        this.tronWeb.fullNode.request('wallet/listproposals', {}, 'post').then(({ proposals = [] }) => {\n            callback(null, proposals);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all parameters available for network modification proposals.\n     */\n    getChainParameters(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getChainParameters);\n\n        this.tronWeb.fullNode.request('wallet/getchainparameters', {}, 'post').then(({ chainParameter = [] }) => {\n            callback(null, chainParameter);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the account resources\n     */\n    getAccountResources(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getAccountResources, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/getaccountresource', { \n            address: this.tronWeb.address.toHex(address),\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the exchange ID.\n     */\n    getExchangeByID(exchangeID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getExchangeByID, exchangeID);\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        this.tronWeb.fullNode.request('wallet/getexchangebyid', {\n            value: exchangeID,\n        }, 'post').then(exchange => {\n            callback(null, exchange);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists the exchanges\n     */\n    listExchanges(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchanges', {}, 'post').then(({ exchanges = [] }) => {\n            callback(null, exchanges);\n        }, 'post').catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between tokens.\n     */\n    exchangeCreate(ownerAddress = false,\n                   firstTokenID, firstTokenBalance,\n                   secondTokenID, secondTokenBalance, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getAccountResources, address);\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid address provided');\n\n        if (!utils.isString(firstTokenID) || !firstTokenID.length\n            || !utils.isString(secondTokenID) || !secondTokenID.length)\n            return callback('Invalid token ID provided');\n\n        if (!utils.isInteger(firstTokenBalance) || firstTokenBalance <= 0\n            || !utils.isInteger(secondTokenBalance) || secondTokenBalance <= 0)\n            return callback('Invalid amount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            first_token_id: firstTokenID,\n            first_token_balance: firstTokenBalance,\n            second_token_id: secondTokenID,\n            second_token_balance: secondTokenBalance\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Exchanges a transaction.\n     */\n    exchangeTransaction(ownerAddress = false, exchangeID, tokenID, quant, expected, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getAccountResources, address);\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid address provided');\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if (!utils.isInteger(quant) || quant <= 0)\n            return callback('Invalid quantity provided');\n\n        if (!utils.isInteger(expected) || expected < 0)\n            return callback('Invalid expected provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangetransaction', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: exchangeID,\n            token_id: tokenID,\n            quant,\n            expected\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listExchangesPaginated(limit = 10, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n        if(!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchangespaginated', {\n            limit,\n            offset\n        }, 'post').then(({ exchanges = [] }) => {\n            callback(null, exchanges);\n        }).catch(err => callback(err));\n    }\n};\n","export default class Witness {\n    \n}","import utils from 'utils';\n\nconst getFunctionSelector = abi => {\n    return abi.name + '(' + getParamTypes(abi.inputs || []).join(',') + ')';\n}\n\nconst getParamTypes = params => {\n    return params.map(({ type }) => type);\n}\n\nconst decodeOutput = (abi, output) => {\n    const names = abi.map(({ name }) => name).filter(name => !!name);\n    const types = abi.map(({ type }) => type);\n\n    return utils.abi.decodeParams(names, types, output);\n};\n\nexport default class Method {\n    constructor(contract, abi) {\n        this.tronWeb = contract.tronWeb;\n        this.contract = contract;\n\n        this.abi = abi;\n        this.name = abi.name || (abi.name = abi.type);\n\n        this.inputs = abi.inputs || [];\n        this.outputs = abi.outputs || [];\n\n        this.functionSelector = getFunctionSelector(abi);\n        this.signature = this.tronWeb.sha3(this.functionSelector, false).slice(0, 8);\n        this.injectPromise = utils.promiseInjector(this);\n\n        this.defaultOptions = {\n            feeLimit: 1000000000,\n            callValue: 0,\n            from: this.tronWeb.defaultAddress.hex, // Only used for send()\n            shouldPollResponse: false // Only used for sign()\n        };\n    }\n\n    decodeInput(data) {\n        return decodeOutput(this.inputs, '0x' + data);\n    }\n\n    onMethod(...args) {\n        const types = getParamTypes(this.inputs);\n\n        args.forEach((arg, index) => {\n            if(types[index] == 'address')\n                args[index] = this.tronWeb.address.toHex(arg).replace(/^(41)/, '0x')\n        });\n\n        return {\n            call: (...methodArgs) => this._call(types, args, ...methodArgs),\n            send: (...methodArgs) => this._send(types, args, ...methodArgs),\n            watch: (...methodArgs) => this._watch(...methodArgs)\n        }\n    }\n\n    async _call(types, args, options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!callback)\n            return this.injectPromise(this._call, types, args, options);\n\n        if(types.length !== args.length)\n            return callback('Invalid argument count provided');\n\n        if(!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if(!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const { stateMutability } = this.abi;\n\n        if(![ 'pure', 'view' ].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use send()`);\n\n        options = { ...this.defaultOptions, ...options };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        this.tronWeb.transactionBuilder.triggerSmartContract(\n            this.contract.address,\n            this.functionSelector,\n            options.feeLimit,\n            options.callValue,\n            parameters,\n            this.tronWeb.address.toHex(options.from),\n        (err, transaction) => {\n            if(err)\n                return callback(err);\n\n            if(!utils.hasProperty(transaction, 'constant_result'))\n                return callback('Failed to execute');\n\n            try {\n                let output = decodeOutput(this.outputs, '0x' + transaction.constant_result[0]);\n\n                if(output.length === 1)\n                    output = output[0];\n\n                return callback(null, output);\n            } catch(ex) {\n                return callback(ex);\n            }\n        });\n    }\n\n    async _send(types, args, options = {}, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!callback)\n            return this.injectPromise(this._send, types, args, options, privateKey);\n\n        if(types.length !== args.length)\n            throw new Error('Invalid argument count provided');\n\n        if(!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if(!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const { stateMutability } = this.abi;\n\n        if([ 'pure', 'view' ].includes(stateMutability.toLowerCase()))\n                return callback(`Methods with state mutability \"${stateMutability}\" must use call()`);\n\n        // If a function isn't payable, dont provide a callValue.\n        if(![ 'payable' ].includes(stateMutability.toLowerCase()))\n                options.callValue = 0;\n\n        options = { ...this.defaultOptions, ...options };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        try {\n            const address = privateKey ? this.tronWeb.address.fromPrivateKey(privateKey) : this.tronWeb.defaultAddress.base58;\n            const transaction = await this.tronWeb.transactionBuilder.triggerSmartContract(\n                this.contract.address,\n                this.functionSelector,\n                options.feeLimit,\n                options.callValue,\n                parameters,\n                this.tronWeb.address.toHex(address)\n            );\n\n            if(!transaction.result || !transaction.result.result)\n                return callback('Unknown error: ' + JSON.stringify(transaction, null, 2));\n\n            // If privateKey is false, this won't be signed here. We assume sign functionality will be replaced.\n            const signedTransaction = await this.tronWeb.trx.sign(transaction.transaction, privateKey);\n\n            if(!signedTransaction.signature) {\n                if (!privateKey) {\n                    return callback('Transaction was not signed properly');\n                } else {\n                    return callback('Invalid private key provided');\n                }\n            }\n\n            const broadcast = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if(!broadcast.result)\n                return callback('Unknown error: ' + JSON.stringify(broadcast, null, 2));\n\n            if(!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if(index == 20) {\n                    return callback({\n                        error: 'Cannot find result in solidity node',\n                        transaction: signedTransaction\n                    });\n                }\n\n                const output = await this.tronWeb.trx.getTransactionInfo(signedTransaction.txID);\n\n                if(!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if(output.result && output.result == 'FAILED') {\n                    return callback({\n                        error: this.tronWeb.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if(!utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                let decoded = decodeOutput(this.outputs, '0x' + output.contractResult[0]);\n\n                if(decoded.length === 1)\n                    decoded = decoded[0];\n\n                return callback(null, decoded);\n            }\n\n            checkResult();\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    async _watch(callback = false) {\n        if(!utils.isFunction(callback))\n            throw new Error('Expected callback to be provided');\n\n        if(!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if(this.abi.type.toLowerCase() !== 'event')\n            return callback('Invalid method type for event watching');\n\n        if(!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        let listener = false;\n        let lastBlock = false;\n        const sinceTimestamp = new Date().getTime();\n\n        const getEvents = async () => {\n            try {\n                const events = await this.tronWeb.getEventResult(this.contract.address, sinceTimestamp, this.name);\n                const [ latestEvent ] = events.sort((a, b) => b.block - a.block);\n                const newEvents = events.filter((event, index) => {\n                    const duplicate = events.slice(0, index).some(priorEvent => (\n                        JSON.stringify(priorEvent) == JSON.stringify(event)\n                    ));\n\n                    if(duplicate)\n                        return false;\n\n                    if(!lastBlock)\n                        return true;\n\n                    return event.block > lastBlock;\n                });\n\n                if(latestEvent)\n                    lastBlock = latestEvent.block;\n\n                return newEvents;\n            } catch(ex) {\n                return Promise.reject(ex);\n            }\n        };\n\n        const bindListener = () => {\n            if(listener)\n                clearInterval(listener);\n\n            listener = setInterval(() => {\n                getEvents().then(events => events.forEach(event => {\n                    callback(null, utils.parseEvent(event, this.abi))\n                })).catch(err => callback(err));\n            }, 3000);\n        };\n\n        await getEvents();\n        bindListener();\n\n        return {\n            start: bindListener(),\n            stop: () => {\n                if(!listener)\n                    return;\n\n                clearInterval(listener);\n                listener = false;\n            }\n        }\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport Method from './method';\n\nexport default class Contract {\n    constructor(tronWeb = false, abi = [], address = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n\n        this.address = address;\n        this.abi = abi;\n\n        this.eventListener = false;\n        this.bytecode = false;\n        this.deployed = false;\n        this.lastBlock = false;\n\n        this.methods = {};\n        this.methodInstances = {};\n        this.props = [];\n\n        if(this.tronWeb.isAddress(address))\n            this.deployed = true;\n        else this.address = false;\n\n        this.loadAbi(abi);\n    }\n\n    async _getEvents() {\n        const events = await this.tronWeb.getEventResult(this.address);\n        const [ latestEvent ] = events.sort((a, b) => b.block - a.block);\n        const newEvents = events.filter((event, index) => {\n            const duplicate = events.slice(0, index).some(priorEvent => (\n                JSON.stringify(priorEvent) == JSON.stringify(event)\n            ));\n\n            if(duplicate)\n                return false;\n\n            if(!this.lastBlock)\n                return true;\n\n            return event.block > this.lastBlock;\n        });\n\n        if(latestEvent)\n            this.lastBlock = latestEvent.block;\n\n        return newEvents;\n    }\n\n    async _startEventListener(callback) {\n        if(this.eventListener)\n            clearInterval(this.eventListener);\n\n        if(!this.tronWeb.eventServer)\n            throw new Error('Event server is not configured');\n\n        if(!this.address)\n            throw new Error('Contract is not configured with an address');\n\n        this.eventCallback = callback;\n        await this._getEvents();\n\n        this.eventListener = setInterval(() => {\n            this._getEvents().then(newEvents => newEvents.forEach(event => {\n                this.eventCallback && this.eventCallback(event)\n            })).catch(err => {\n                console.error('Failed to get event list', err);\n            });\n        }, 3000);\n    }\n\n    _stopEventListener() {\n        if(!this.eventListener)\n            return;\n\n        clearInterval(this.eventListener);\n        this.eventListener = false;\n        this.eventCallback = false;\n    }\n\n    hasProperty(property) {\n        return this.hasOwnProperty(property) || this.__proto__.hasOwnProperty(property);\n    }\n\n    loadAbi(abi) {\n        this.abi = abi;\n        this.methods = {};\n\n        this.props.forEach(prop => delete this[prop]);\n\n        abi.forEach(func => {\n            // Don't build a method for constructor function. That's handled through contract create.\n            if (func.type.toLowerCase() === 'constructor')\n                return;\n\n            const method = new Method(this, func);\n            const methodCall = method.onMethod.bind(method);\n\n            const {\n                name,\n                functionSelector,\n                signature\n            } = method;\n\n            this.methods[name] = methodCall;\n            this.methods[functionSelector] = methodCall;\n            this.methods[signature] = methodCall;\n\n            this.methodInstances[name] = method;\n            this.methodInstances[functionSelector] = method;\n            this.methodInstances[signature] = method;\n\n            if(!this.hasProperty(name)) {\n                this[name] = methodCall;\n                this.props.push(name);\n            }\n\n            if(!this.hasProperty(functionSelector)) {\n                this[functionSelector] = methodCall;\n                this.props.push(functionSelector);\n            }\n\n            if(!this.hasProperty(signature)) {\n                this[signature] = methodCall;\n                this.props.push(signature);\n            }\n        });\n    }\n\n    decodeInput(data) {\n\n        const methodName = data.substring(0, 8);\n        const inputData = data.substring(8);\n\n        if (!this.methodInstances[methodName])\n            throw new Error('Contract method ' + methodName + \" not found\");\n\n        const methodInstance = this.methodInstances[methodName];\n\n        return {\n            name: methodInstance.name,\n            params: this.methodInstances[methodName].decodeInput(inputData),\n        }\n    }\n\n    async new(options, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.new, options, privateKey);\n\n        try {\n            const address = this.tronWeb.address.fromPrivateKey(privateKey);\n            const transaction = await this.tronWeb.transactionBuilder.createSmartContract(options, address);\n            const signedTransaction = await this.tronWeb.trx.sign(transaction, privateKey);\n            const contract = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if(!contract.result)\n                return callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            return this.at(signedTransaction.contract_address, callback);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    async at(contractAddress, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.at, contractAddress);\n\n        try {\n            const contract = await this.tronWeb.trx.getContract(contractAddress);\n\n            if(!contract.contract_address)\n                callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            this.address = contract.contract_address;\n            this.bytecode = contract.bytecode;\n            this.deployed = true;\n\n            this.loadAbi(contract.abi.entrys);\n\n            callback(null, this);\n        } catch(ex) {\n            if(ex.toString().includes('does not exist'))\n                return callback('Contract has not been deployed on the network');\n\n            return callback(ex);\n        }\n    }\n\n    events(callback = false) {\n        if(!utils.isFunction(callback))\n            throw new Error('Callback function expected');\n\n        const self = this;\n\n        return {\n            start(startCallback = false) {\n                if(!startCallback) {\n                    self._startEventListener(callback);\n                    return this;\n                }\n\n                self._startEventListener(callback).then(() => {\n                    startCallback();\n                }).catch(err => {\n                    startCallback(err)\n                });\n\n                return this;\n            },\n            stop() {\n                self._stopEventListener();\n            }\n        };\n    }\n}\n","import providers from 'lib/providers';\nimport utils from 'utils';\nimport axios from 'axios';\nimport BigNumber from 'bignumber.js';\nimport EventEmitter from 'eventemitter3';\n\nimport TransactionBuilder from 'lib/transactionBuilder';\nimport Trx from 'lib/trx';\nimport Witness from 'lib/witness';\nimport Contract from 'lib/contract';\n\nimport { keccak256 } from 'js-sha3';\n\nexport default class TronWeb extends EventEmitter {\n    static providers = providers;\n    static BigNumber = BigNumber;\n    \n    constructor(fullNode, solidityNode, eventServer = false, privateKey = false) {\n        super();\n\n        if(utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if(utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n        this.setEventServer(eventServer);\n        \n        this.providers = providers;\n        this.BigNumber = BigNumber;\n\n        this.defaultBlock = false;\n        this.defaultPrivateKey = false;\n        this.defaultAddress = {\n            hex: false,\n            base58: false\n        };\n        \n        [\n            'sha3', 'toHex', 'toUtf8', 'fromUtf8',\n            'toAscii', 'fromAscii', 'toDecimal', 'fromDecimal',\n            'toSun', 'fromSun', 'toBigNumber', 'isAddress',\n            'compile', 'createAccount', 'address'\n        ].forEach(key => {\n            this[key] = TronWeb[key];\n        });\n\n        if(privateKey)\n            this.setPrivateKey(privateKey);\n\n        this.transactionBuilder = new TransactionBuilder(this);\n        this.trx = new Trx(this);\n        this.witness = new Witness(this);\n        this.utils = utils;\n\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    setDefaultBlock(blockID = false) {\n        if(blockID === false || blockID == 'latest' || blockID == 'earliest' || blockID === 0)\n            return this.defaultBlock = blockID;\n\n        if(!utils.isInteger(blockID) || !blockID)\n            throw new Error('Invalid block ID provided');\n\n        this.defaultBlock = Math.abs(blockID);\n    }\n\n    setPrivateKey(privateKey) {\n        try {\n            this.setAddress(\n                this.address.fromPrivateKey(privateKey)\n            );\n        } catch {\n            throw new Error('Invalid private key provided');\n        }\n\n        this.defaultPrivateKey = privateKey;\n        this.emit('privateKeyChanged', privateKey);\n    }\n\n    setAddress(address) {\n        if(!this.isAddress(address))\n            throw new Error('Invalid address provided');\n\n        const hex = this.address.toHex(address);\n        const base58 = this.address.fromHex(address);\n\n        if(this.defaultPrivateKey && this.address.fromPrivateKey(this.defaultPrivateKey) !== base58)\n           this.defaultPrivateKey = false;\n\n        this.defaultAddress = {\n            hex,\n            base58\n        };\n\n        this.emit('addressChanged', { hex, base58 });\n    }\n\n    isValidProvider(provider) {\n        return Object.values(providers).some(knownProvider => provider instanceof knownProvider);\n    }\n\n    isEventServerConnected() {\n        if (!this.eventServer)\n            return false;\n\n        return axios.get(this.eventServer.replace(/\\/+$/,'') + '/healthcheck').then(() => {\n            return true;\n        }).catch(() => {\n            return axios.get(this.eventServer.replace(/\\/+$/,'') + '/events?size=1').then(({data}) => {\n                return Array.isArray(data);\n            }).catch(() => false);\n        });\n    }\n\n    setFullNode(fullNode) {\n        if(utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if(!this.isValidProvider(fullNode))\n            throw new Error('Invalid full node provided');\n\n        this.fullNode = fullNode;\n        this.fullNode.setStatusPage('wallet/getnowblock');\n    }\n\n    setSolidityNode(solidityNode) {\n        if(utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if(!this.isValidProvider(solidityNode))\n            throw new Error('Invalid solidity node provided');\n\n        this.solidityNode = solidityNode;\n        this.solidityNode.setStatusPage('walletsolidity/getnowblock');\n    }\n\n    setEventServer(eventServer = false) {\n        if(eventServer !== false && !utils.isValidURL(eventServer))\n            throw new Error('Invalid URL provided for event server');\n\n        this.eventServer = eventServer;\n    }\n\n    currentProviders() {\n        return {\n            fullNode: this.fullNode,\n            solidityNode: this.solidityNode,\n            eventServer: this.eventServer\n        };\n    }\n\n    currentProvider() {\n        return this.currentProviders();\n    }\n\n    getEventResult(contractAddress = false, sinceTimestamp = 0, eventName = false, blockNumber = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getEventResult, contractAddress, sinceTimestamp, eventName, blockNumber);\n\n        if(!this.eventServer)\n            callback('No event server configured');\n\n        const routeParams = [];\n\n        if(!this.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if(eventName && !contractAddress)\n            return callback('Usage of event name filtering requires a contract address');\n        \n        if(blockNumber && !eventName)\n            return callback('Usage of block number filtering requires an event name');\n\n        if(contractAddress)\n            routeParams.push(this.address.fromHex(contractAddress));\n\n        if(eventName)\n            routeParams.push(eventName);\n\n        if(blockNumber)\n            routeParams.push(blockNumber);\n\n        return axios(`${this.eventServer}/event/contract/${routeParams.join('/')}?since=${sinceTimestamp}`).then(({ data = false }) => {\n            if(!data)\n                return callback('Unknown error occurred');\n\n            if(!utils.isArray(data))\n                return callback(data);\n\n            return callback(null, \n                data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err)); \n    }\n\n    getEventByTransacionID(transactionID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getEventByTransacionID, transactionID);\n\n        if(!this.eventServer)\n            callback('No event server configured');\n\n        return axios(`${this.eventServer}/event/transaction/${transactionID}`).then(({ data = false }) => {\n            if(!data)\n                return callback('Unknown error occurred');\n\n            if(!utils.isArray(data))\n                return callback(data);\n\n            return callback(null, \n                data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n    contract(abi = [], address = false) {\n        return new Contract(this, abi, address);\n    }\n\n    static get address() {\n        return {\n            fromHex(address) {\n                if(!utils.isHex(address))\n                    return address;\n\n                return utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address)\n                );\n            },\n            toHex(address) {\n                if(utils.isHex(address))\n                    return address.toLowerCase().replace(/^0x/,'41');\n\n                return utils.code.byteArray2hexStr(\n                    utils.crypto.decodeBase58Address(address)\n                ).toLowerCase();\n            },\n            fromPrivateKey(privateKey) {\n                try {\n                    return utils.crypto.pkToAddress(privateKey);\n                } catch { return false; }\n            }\n        }\n    }\n\n    static sha3(string, prefix = true) {\n        return (prefix ? '0x' : '') + keccak256(string);\n    }\n\n    static toHex(val) {\n        if(utils.isBoolean(val))\n            return TronWeb.fromDecimal(+val);\n\n        if(utils.isBigNumber(val))\n            return TronWeb.fromDecimal(val);\n\n        if(typeof val === 'object')\n            return TronWeb.fromUtf8(JSON.stringify(val));\n\n        if(utils.isString(val)) {\n            if (/^(-|)0x/.test(val))\n                return val;\n\n            if(!isFinite(val))\n                return TronWeb.fromUtf8(val);\n        }\n\n        return TronWeb.fromDecimal(val);\n    }\n\n    static toUtf8(hex) {\n        hex = hex.replace(/^0x/,'');\n        return Buffer.from(hex, 'hex').toString('utf8');\n    }\n\n    static fromUtf8(string) {\n        return '0x' + Buffer.from(string, 'utf8').toString('hex');\n    }\n\n    static toAscii(hex) {\n        hex = hex.replace(/^0x/,'');\n        return Buffer.from(hex, 'hex').toString('ascii');\n    }\n\n    static fromAscii(string, padding) {\n        return '0x' + Buffer.from(string, 'ascii').toString('hex').padEnd(padding, '0');\n    }\n\n    static toDecimal(value) {\n        return TronWeb.toBigNumber(value).toNumber();\n    }\n\n    static fromDecimal(value) {\n        const number = TronWeb.toBigNumber(value);\n        const result = number.toString(16);\n\n        return number.isLessThan(0) ? '-0x' + result.substr(1) : '0x' + result;\n    }\n\n    static fromSun(sun) {\n        const trx = TronWeb.toBigNumber(sun).div(1_000_000);        \n        return utils.isBigNumber(sun) ? trx : trx.toString(10);\n    }\n\n    static toSun(trx) {\n        const sun = TronWeb.toBigNumber(trx).times(1_000_000);        \n        return utils.isBigNumber(trx) ? sun : sun.toString(10);\n    }\n\n    static toBigNumber(amount = 0) {\n        if(utils.isBigNumber(amount))\n            return amount;\n\n        if(utils.isString(amount) && (amount.indexOf('0x') === 0 || amount.indexOf('-0x') === 0))\n            return new BigNumber(amount.replace('0x', ''), 16);\n\n        return new BigNumber(amount.toString(10), 10);\n    }\n\n    static isAddress(address = false) {\n        if(!utils.isString(address))\n            return false;\n\n        // Convert HEX to Base58\n        if(address.length === 42) {\n            return TronWeb.isAddress(\n                utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address)\n                )\n            );\n        }\n\n        return utils.crypto.isAddressValid(address);\n    }\n\n    // TODO\n    static compile(solditySource) {\n\n    }\n\n    static async createAccount(callback = false) {\n        const account = utils.accounts.generateAccount();\n\n        if(callback)\n            callback(null, account);\n\n        return account;\n    }\n\n    async isConnected(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.isConnected);\n\n        callback(null, {\n            fullNode: await this.fullNode.isConnected(),\n            solidityNode: await this.solidityNode.isConnected(),\n            eventServer: await this.isEventServerConnected()\n        });\n    }\n};\n"],"sourceRoot":""}