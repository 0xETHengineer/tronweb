{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@babel/runtime/helpers/asyncToGenerator\"","webpack:///external \"source-map-support/register\"","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///external \"@babel/runtime/helpers/objectSpread\"","webpack:///external \"@babel/runtime/helpers/assertThisInitialized\"","webpack:///external \"@babel/runtime/helpers/toConsumableArray\"","webpack:///external \"bignumber.js\"","webpack:///external \"@babel/runtime/helpers/slicedToArray\"","webpack:///external \"axios\"","webpack:///external \"ethers\"","webpack:///external \"js-sha3\"","webpack:///external \"elliptic\"","webpack:///external \"@babel/runtime/helpers/defineProperty\"","webpack:///external \"@babel/runtime/helpers/typeof\"","webpack:///external \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack:///external \"@babel/runtime/helpers/getPrototypeOf\"","webpack:///external \"@babel/runtime/helpers/inherits\"","webpack:///external \"jssha\"","webpack:///external \"validator\"","webpack:///external \"eventemitter3\"","webpack:///./src/utils/base64.js","webpack:///./src/utils/bytes.js","webpack:///./src/utils/address.js","webpack:///./src/utils/code.js","webpack:///./src/utils/base58.js","webpack:///./src/utils/crypto.js","webpack:///./src/utils/accounts.js","webpack:///./src/utils/abi.js","webpack:///./src/utils/index.js","webpack:///./src/lib/providers/index.js","webpack:///./src/lib/providers/HttpProvider.js","webpack:///./src/lib/transactionBuilder.js","webpack:///./src/lib/trx.js","webpack:///./src/lib/witness.js","webpack:///./src/lib/contract/method.js","webpack:///./src/lib/contract/index.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","Base64","_this","this","_keyStr","encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","length","charCodeAt","isNaN","charAt","encodeIgnoreUtf8","inputBytes","decode","replace","indexOf","String","fromCharCode","_utf8_decode","decodeToByteArray","_out2ByteArray","utftext","byteArray","Array","c1","c2","_utf8_encode","string","c3","byte2hexStr","byte","str","bytesToString","arr","one","toString","v","match","bytesLength","store","slice","st","parseInt","hextoString","hex","split","out","tmp","concat","base64DecodeFromString","string64","byteArray2hexStr","ADDRESS_SIZE","ADDRESS_PREFIX","ADDRESS_PREFIX_BYTE","bin2String","array","apply","toConsumableArray_default","arrayEquals","array1","array2","stringToBytes","len","bytes","push","code_bytesToString","code_hextoString","hexChar2byte","isHexChar","hexStr2byteArray","j","k","code_byte2hexStr","code_byteArray2hexStr","reduce","code_base64DecodeFromString","base64EncodeToString","strToDate","tempStrs","dateStrs","year","month","day","timeStrs","hour","minute","second","Date","isNumber","getStringType","ALPHABET","ALPHABET_MAP","base58_i","BASE","encode58","buffer","digits","carry","reverse","map","digit","join","decode58","Error","getBase58CheckAddress","addressBytes","checkSum","SHA256","decodeBase58Address","base58Sting","address","offset","checkSum1","signTransaction","priKeyBytes","transaction","signature","ECKeySign","txID","arrayToBase64String","a","btoa","crypto_signBytes","privateKey","contents","getRowBytesFromTransactionBase64","base64Data","bytesDecode","proto","protocol","Transaction","deserializeBinary","getRawData","serializeBinary","genPriKey","priKeyHex","external_elliptic_","genKeyPair","getPrivate","computeAddress","pubBytes","hash","external_js_sha3_","substring","getAddressFromPriKey","getPubKeyFromPriKey","decode58Check","addressStr","decodeCheck","decodeData","hash1","isAddressValid","base58Str","getBase58CheckAddressFromPriKeyBase64String","priKeyBase64String","getHexStrAddressFromPriKeyBase64String","getAddressFromPriKeyBase64String","pubkey","keyFromPrivate","getPublic","x","y","xHex","yHex","hashBytes","sign","id","recoveryParam","rHex","sHex","msgBytes","shaObj","external_jssha_default","msgHex","update","getHash","passwordToAddress","password","pkToAddress","generateAccount","pubKeyBytes","publicKey","base58","abi_abiCoder","external_ethers_default","utils","AbiCoder","decodeParams","names","types","obj","arg","index","substr","toLowerCase","isValidURL","url","external_validator_default","isURL","protocols","isObject","isArray","isJson","JSON","parse","ex","isBoolean","bool","isBigNumber","number","external_bignumber_js_default","constructor","isString","isFunction","isHex","isInteger","Number","hasProperty","hasProperties","_len","arguments","properties","_key","includes","injectPromise","func","_len2","args","_key2","Promise","resolve","reject","err","res","promiseInjector","scope","_this2","_len3","_key3","mapEvent","event","block","block_number","timestamp","block_timestamp","contract","contract_address","event_name","transaction_id","result","parseEvent","_ref","abi","inputs","type","_abi$index","src_utils","objectSpread_default","code","code_namespaceObject","accounts","accounts_namespaceObject","base58_namespaceObject","bytes_namespaceObject","crypto","crypto_namespaceObject","abi_namespaceObject","providers","HttpProvider","host","timeout","undefined","user","headers","statusPage","classCallCheck_default","instance","external_axios_default","baseURL","auth","request","then","data","catch","payload","method","params","transactionBuilder_TransactionBuilder","TransactionBuilder","tronWeb","src_TronWeb","to","amount","from","defaultAddress","callback","isAddress","toHex","fullNode","to_address","owner_address","sendTrx","tokenID","fromUtf8","asset_name","sendToken","issuerAddress","buyer","purchaseToken","duration","resource","frozen_balance","frozen_duration","freezeBalance","unfreezeBalance","withdrawBlockRewards","applyForSR","votes","voterAddress","vote","keys","invalid","entries","_ref2","slicedToArray_default","srAddress","voteCount","vote_address","vote_count","options","createSmartContract","_options$abi","_options$bytecode","bytecode","_options$feeLimit","feeLimit","_options$callValue","callValue","_options$userFeePerce","userFeePercentage","_options$parameters","parameters","_unused","payable","some","constructorParams","find","it","abiCoder","values","fee_limit","call_value","consume_user_resource_percent","stringify","parameter","contractAddress","functionSelector","triggerSmartContract","_parameters$i","function_selector","message","toUtf8","_this3","createToken","_options$name","_options$abbreviation","abbreviation","_options$description","description","_options$url","_options$totalSupply","totalSupply","_options$trxRatio","trxRatio","_options$tokenRatio","tokenRatio","_options$saleStart","saleStart","now","_options$saleEnd","saleEnd","_options$freeBandwidt","freeBandwidth","_options$freeBandwidt2","freeBandwidthLimit","_options$frozenAmount","frozenAmount","_options$frozenDurati","frozenDuration","abbr","total_supply","trx_num","num","start_time","end_time","free_asset_net_limit","public_free_asset_net_limit","frozen_supply","frozen_amount","frozen_days","_this4","updateToken","_options$description2","_options$url2","_options$freeBandwidt3","_options$freeBandwidt4","new_limit","new_public_limit","_this5","createProposal","_this6","proposalID","proposal_id","deleteProposal","_this7","hasApproval","is_add_approval","isApproval","voteProposal","_this8","exchangeID","tokenName","tokenAmount","ownerAddress","exchange_id","token_id","fromAscii","quant","injectExchangeTokens","_this9","withdrawExchangeTokens","_this10","tokenAmountSold","tokenAmountExpected","expected","tradeExchangeTokens","trx_Trx","Trx","token","getCurrentBlock","defaultBlock","getBlockByHash","getBlockByNumber","getBlock","blockHash","blockID","getBlockTransactionCount","_ref$transactions","transactions","_ref2$transactions","getTransactionFromBlock","transactionID","getTransaction","getTransactionInfo","solidityNode","limit","getTransactionsRelated","getTransactionsToAddress","getTransactionsFromAddress","direction","tx","sort","b","raw_data","_context","t0","account","_ref3","getAccount","getBalance","_ref4","_ref4$balance","balance","_ref5","_ref5$freeNetUsed","freeNetUsed","_ref5$freeNetLimit","freeNetLimit","_ref5$NetUsed","NetUsed","_ref5$NetLimit","NetLimit","getBandwidth","_ref6","_ref6$assetIssue","assetIssue","tokens","parseToken","getTokensIssuedByAddress","getTokenFromID","listNodes","_ref7","_ref7$nodes","nodes","_ref8","_ref8$address","port","start","end","startNum","endNum","_ref9","_ref9$block","getBlockRange","listSuperRepresentatives","_ref10","_ref10$witnesses","witnesses","_ref12","_ref12$assetIssue","_ref11","_ref11$assetIssue","listTokens","timeUntilNextVoteCycle","_ref13","_ref13$num","Math","floor","getContract","defaultPrivateKey","fromPrivateKey","_context2","signedTransaction","sendRawTransaction","sendTransaction","transactionBuilder","_context3","_context4","proposal","getProposal","listProposals","_ref14","_ref14$proposals","proposals","getChainParameters","_ref15","_ref15$chainParameter","chainParameter","resources","getAccountResources","exchange","getExchangeByID","listExchanges","_ref16","_ref16$exchanges","exchanges","firstTokenID","firstTokenBalance","secondTokenID","secondTokenBalance","first_token_id","first_token_balance","second_token_id","second_token_balance","_ref17","_ref17$exchanges","witness_Witness","getFunctionSelector","getParamTypes","method_decodeOutput","filter","method_Method","Method","outputs","sha3","defaultOptions","shouldPollResponse","forEach","methodArgs","_call","send","_send","watch","_watch","deployed","stateMutability","constant_result","trx","broadcast","checkResult","_callee2","decoded","_args2","regenerator_default","wrap","prev","next","abrupt","error","sent","setTimeout","resMessage","contractResult","stop","eventServer","listener","lastBlock","sinceTimestamp","getTime","getEvents","_callee4","events","_events$sort","_events$sort2","latestEvent","newEvents","getEventResult","priorEvent","bindListener","clearInterval","setInterval","contract_Contract","Contract","eventListener","methods","props","loadAbi","eventCallback","_getEvents","console","__proto__","prop","methodCall","onMethod","new","at","entrys","self","startCallback","_startEventListener","_stopEventListener","TronWeb","possibleConstructorReturn_default","getPrototypeOf_default","setFullNode","setSolidityNode","setEventServer","BigNumber","setPrivateKey","assertThisInitialized_default","witness","abs","setAddress","emit","fromHex","provider","knownProvider","isValidProvider","setStatusPage","currentProviders","eventName","blockNumber","routeParams","_ref2$data","response","_ref3$data","getEventByTransacionID","isConnected","isEventServerConnected","val","fromDecimal","typeof_default","test","isFinite","Buffer","padding","padEnd","toBigNumber","toNumber","isLessThan","sun","div","times","solditySource","_unused2","external_eventemitter3_default"],"mappings":"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","file":"TronWeb.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 22);\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"source-map-support/register\");","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","module.exports = require(\"@babel/runtime/helpers/objectSpread\");","module.exports = require(\"@babel/runtime/helpers/assertThisInitialized\");","module.exports = require(\"@babel/runtime/helpers/toConsumableArray\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"@babel/runtime/helpers/slicedToArray\");","module.exports = require(\"axios\");","module.exports = require(\"ethers\");","module.exports = require(\"js-sha3\");","module.exports = require(\"elliptic\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"@babel/runtime/helpers/typeof\");","module.exports = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"@babel/runtime/helpers/getPrototypeOf\");","module.exports = require(\"@babel/runtime/helpers/inherits\");","module.exports = require(\"jssha\");","module.exports = require(\"validator\");","module.exports = require(\"eventemitter3\");","export function Base64() {\n    this._keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n    this.encode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n        \n        while (i < input.length) {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.encodeIgnoreUtf8 = inputBytes => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n        \n        while (i < inputBytes.length) {\n            chr1 = inputBytes[i++];\n            chr2 = inputBytes[i++];\n            chr3 = inputBytes[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.decode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = _keyStr.indexOf(input.charAt(i++));\n            enc2 = _keyStr.indexOf(input.charAt(i++));\n            enc3 = _keyStr.indexOf(input.charAt(i++));\n            enc4 = _keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n                \n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n        \n        return this._utf8_decode(output);\n    }\n\n    this.decodeToByteArray = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = _keyStr.indexOf(input.charAt(i++));\n            enc2 = _keyStr.indexOf(input.charAt(i++));\n            enc3 = _keyStr.indexOf(input.charAt(i++));\n            enc4 = _keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n        \n        return this._out2ByteArray(output);\n    }\n\n    this._out2ByteArray = utftext => {\n        const byteArray = new Array(utftext.length);\n\n        let i = 0;\n        let c = c1 = c2 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n            byteArray[i] = c;\n            i++;\n        }\n\n        return byteArray;\n    }\n\n    this._utf8_encode = string => {\n        string = string.replace(/\\r\\n/g, \"\\n\");\n        let utftext = \"\";\n\n        for (let n = 0; n < string.length; n++) {\n            const c = string.charCodeAt(n);\n\n            if (c < 128) {\n                utftext += String.fromCharCode(c);\n            } else if ((c > 127) && (c < 2048)) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            } else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n        }\n\n        return utftext;\n    }\n\n    this._utf8_decode = utftext => {\n        let string = \"\";\n        let i = 0;\n        let c = c1 = c2 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n\n            if (c < 128) {\n                string += String.fromCharCode(c);\n                i++;\n            } else if ((c > 191) && (c < 224)) {\n                c2 = utftext.charCodeAt(i + 1);\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                i += 2;\n            } else {\n                c2 = utftext.charCodeAt(i + 1);\n                c3 = utftext.charCodeAt(i + 2);\n\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\n                i += 3;\n            }\n        }\n\n        return string;\n    }\n}","import { Base64 } from './base64';\n\nexport function byte2hexStr(byte) {\n    const hexByteMap = '0123456789ABCDEF';\n\n    let str = '';\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n        \n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length === 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else {\n            str += String.fromCharCode(arr[i]);\n        }\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.split('');\n    let out = '';\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        let tmp = `0x${ arr[i * 2] }${ arr[i * 2 + 1] }`;\n        out += String.fromCharCode(tmp);\n    }\n\n    return out;\n}\n\nexport function base64DecodeFromString(string64) {\n    return new Base64().decodeToByteArray(string64);\n}\n\nexport function byteArray2hexStr(byteArray) {\n    let str = '';\n\n    for (let i = 0; i < (byteArray.length); i++)\n        str += byte2hexStr(byteArray[i]);\n        \n    return str;\n}","export const ADDRESS_SIZE = 34;\nexport const ADDRESS_PREFIX = \"41\";\nexport const ADDRESS_PREFIX_BYTE = 0x41;\n","import { Base64 } from './base64';\n\nexport function bin2String(array) {\n    return String.fromCharCode(...array);\n}\n\nexport function arrayEquals(array1, array2) {\n    if (array1.length != array2.length)\n        return false;\n        \n    let i;\n\n    for (i = 0; i < array1.length; i++) {\n        if (array1[i] != array2[i])\n            return false;\n    }\n\n    return true;\n}\n\nexport function stringToBytes(str) {\n    const bytes = new Array();\n    let len;\n    let c;\n\n    len = str.length;\n\n    for (let i = 0; i < len; i++) {\n        c = str.charCodeAt(i);\n\n        if (c >= 0x010000 && c <= 0x10FFFF) {\n            bytes.push(((c >> 18) & 0x07) | 0xF0);\n            bytes.push(((c >> 12) & 0x3F) | 0x80);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000800 && c <= 0x00FFFF) {\n            bytes.push(((c >> 12) & 0x0F) | 0xE0);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000080 && c <= 0x0007FF) {\n            bytes.push(((c >> 6) & 0x1F) | 0xC0);\n            bytes.push((c & 0x3F) | 0x80);\n        } else bytes.push(c & 0xFF);\n    }\n\n    return bytes;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n        \n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length == 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else str += String.fromCharCode(arr[i]);\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.split(\"\");\n    let out = \"\";\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        const tmp = `0x${arr[i * 2]}${arr[i * 2 + 1]}`;\n        const charValue = String.fromCharCode(tmp);\n\n        out += charValue;\n    }\n\n    return out\n}\n\nexport function hexChar2byte(c) {\n    let d = 0;\n\n    if (c >= 'A' && c <= 'F')\n        d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    else if (c >= 'a' && c <= 'f')\n        d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10;\n    else if (c >= '0' && c <= '9')\n        d = c.charCodeAt(0) - '0'.charCodeAt(0);\n        \n    return d;\n}\n\nexport function isHexChar(c) {\n    if ((c >= 'A' && c <= 'F') ||\n        (c >= 'a' && c <= 'f') ||\n        (c >= '0' && c <= '9')) {\n        return 1;\n    }\n\n    return 0;\n}\n\nexport function hexStr2byteArray(str) {\n    const byteArray = Array();\n    let d = 0;\n    let j = 0;\n    let k = 0;\n\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charAt(i);\n\n        if (isHexChar(c)) {\n            d <<= 4;\n            d += hexChar2byte(c);\n            j++;\n\n            if (0 === (j % 2)) {\n                byteArray[k++] = d;\n                d = 0;\n            }\n        }\n    }\n\n    return byteArray;\n}\n\nexport function byte2hexStr(byte) {\n    const hexByteMap = \"0123456789ABCDEF\";\n    let str = \"\";\n\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function byteArray2hexStr(byteArray) {\n    return byteArray.reduce((string, byte) => {\n        return string + byte2hexStr(byte);\n    }, '');\n}\n\nexport function base64DecodeFromString(string64) {\n    const b = new Base64();\n    const decodeBytes = b.decodeToByteArray(string64);\n\n    return decodeBytes;\n}\n\nexport function base64EncodeToString(bytes) {\n    const b = new Base64();\n    const string64 = b.encodeIgnoreUtf8(bytes);\n\n    return string64\n}\n\n//yyyy-MM-DD HH-mm-ss\nexport function strToDate(str) {\n    const tempStrs = str.split(\" \");\n    const dateStrs = tempStrs[0].split(\"-\");\n    const year = parseInt(dateStrs[0], 10);\n    const month = parseInt(dateStrs[1], 10) - 1;\n    const day = parseInt(dateStrs[2], 10);\n\n    if (tempStrs.length > 1) {\n        const timeStrs = tempStrs[1].split(\"-\");\n        const hour = parseInt(timeStrs[0], 10);\n        const minute = parseInt(timeStrs[1], 10) - 1;\n        const second = parseInt(timeStrs[2], 10);\n\n        return new Date(year, month, day, hour, minute, second);\n    }\n\n    return new Date(year, month, day);\n}\n\nexport function isNumber(c) {\n    if (c >= '0' && c <= '9')\n        return 1;\n        \n    return 0;\n}\n\n//return 1: address  --- 20Bytes HexString\n//return 2: blockNumber ------ Decimal number\n//return 3: assetName ------ String\n//return other: error\nexport function getStringType(str) {\n    if (null == str)\n        return -1;\n\n    if (typeof (str) != 'string')\n        return -1;\n\n    if (str.length == 0 || str == \"\")\n        return -1;\n\n    let i = 0;\n\n    if (str.length == 40) {\n        for (; i < 40; i++) {\n            var c = str.charAt(i);\n\n            if (!isHexChar(c))\n                break;\n        }\n    }\n\n    if (i == 40)\n        return 1; //40 Hex, Address\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (!isNumber(c))\n            break;\n    }\n\n    if (i == str.length)\n        return 2; //Alll Decimal number, BlockNumber\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (c > ' ')\n            return 3; //At least one visible character\n    }\n\n    return -1;\n}","const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nconst ALPHABET_MAP = {};\n\nfor (let i = 0; i < ALPHABET.length; i++)\n    ALPHABET_MAP[ALPHABET.charAt(i)] = i;\n\nconst BASE = 58;\n\nexport function encode58(buffer) {\n    if (buffer.length === 0) \n        return '';\n\n    let i;\n    let j;\n\n    const digits = [0];\n\n    for (i = 0; i < buffer.length; i++) {\n        for (j = 0; j < digits.length; j++) \n            digits[j] <<= 8;\n\n        digits[0] += buffer[i];\n        let carry = 0;\n\n        for (j = 0; j < digits.length; ++j) {\n            digits[j] += carry;\n            carry = (digits[j] / BASE) | 0;\n            digits[j] %= BASE\n        }\n\n        while (carry) {\n            digits.push(carry % BASE);\n            carry = (carry / BASE) | 0\n        }\n    }\n\n    for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++) \n        digits.push(0);\n\n    return digits.reverse().map(digit => ALPHABET[digit]).join('');\n}\n\nexport function decode58(string) {\n    if (string.length === 0) \n        return [];\n\n    let i;\n    let j;\n\n    const bytes = [0];\n\n    for (i = 0; i < string.length; i++) {\n        const c = string[i];\n\n        if (!(c in ALPHABET_MAP))\n            throw new Error('Non-base58 character');\n\n        for (j = 0; j < bytes.length; j++) \n            bytes[j] *= BASE;\n\n        bytes[0] += ALPHABET_MAP[c];\n        let carry = 0;\n\n        for (j = 0; j < bytes.length; ++j) {\n            bytes[j] += carry;\n            carry = bytes[j] >> 8;\n            bytes[j] &= 0xff;\n        }\n\n        while (carry) {\n            bytes.push(carry & 0xff);\n            carry >>= 8;\n        }\n    }\n\n    for (i = 0; string[i] === '1' && i < string.length - 1; i++)\n        bytes.push(0);\n\n    return bytes.reverse();\n}","import jsSHA from 'jssha';\n\nimport { ADDRESS_PREFIX, ADDRESS_PREFIX_BYTE } from './address';\nimport { base64EncodeToString } from './code';\nimport { base64DecodeFromString, hexStr2byteArray } from './code';\nimport { encode58, decode58 } from './base58';\nimport { keccak256 } from 'js-sha3';\nimport { ADDRESS_SIZE } from './address';\nimport { byte2hexStr, byteArray2hexStr } from './bytes';\nimport { ec as EC } from 'elliptic';\n\nexport function getBase58CheckAddress(addressBytes) {\n    const hash0 = SHA256(addressBytes);\n    const hash1 = SHA256(hash0);\n\n    let checkSum = hash1.slice(0, 4);\n    checkSum = addressBytes.concat(checkSum);\n\n    return encode58(checkSum);\n}\n\nexport function decodeBase58Address(base58Sting) {\n    if (typeof (base58Sting) != 'string')\n        return false;\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    let address = decode58(base58Sting);\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    const len = address.length;\n    const offset = len - 4;\n    const checkSum = address.slice(offset);\n\n    address = address.slice(0, offset);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return address;\n    }\n\n    return hexStr2byteArray('000000000000000000000000000000000000000000');\n}\n\nexport function signTransaction(priKeyBytes, transaction) {\n    if (typeof priKeyBytes === 'string')\n        priKeyBytes = hexStr2byteArray(priKeyBytes);\n\n    const txID = transaction.txID;\n    const signature = ECKeySign(hexStr2byteArray(txID), priKeyBytes);\n\n    transaction.signature = [ signature ];\n    return transaction;\n}\n\nexport function arrayToBase64String(a) {\n    return btoa(String.fromCharCode(...a));\n}\n\nexport function signBytes(privateKey, contents) {\n    if (typeof privateKey === 'string')\n        privateKey = hexStr2byteArray(privateKey);\n\n    const hashBytes = SHA256(contents);\n    const signBytes = ECKeySign(hashBytes, privateKey);\n\n    return signBytes;\n}\n\nexport function getRowBytesFromTransactionBase64(base64Data) {\n    const bytesDecode = base64DecodeFromString(base64Data);\n    const transaction = proto.protocol.Transaction.deserializeBinary(bytesDecode);\n    const raw = transaction.getRawData();\n\n    return raw.serializeBinary();\n}\n\nexport function genPriKey() {\n    const ec = new EC('secp256k1');\n    const key = ec.genKeyPair();\n    const priKey = key.getPrivate();\n\n    let priKeyHex = priKey.toString('hex');\n\n    while (priKeyHex.length < 64) {\n        priKeyHex = `0${priKeyHex}`;\n    }\n\n    return hexStr2byteArray(priKeyHex);\n}\n\nexport function computeAddress(pubBytes) {\n    if (pubBytes.length === 65)\n        pubBytes = pubBytes.slice(1);\n\n    const hash = keccak256(pubBytes).toString();\n    const addressHex = ADDRESS_PREFIX + hash.substring(24);\n\n    return hexStr2byteArray(addressHex);\n}\n\nexport function getAddressFromPriKey(priKeyBytes) {\n    let pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    return computeAddress(pubBytes);\n}\n\nexport function decode58Check(addressStr) {\n    const decodeCheck = decode58(addressStr);\n\n    if (decodeCheck.length <= 4)\n        return false;\n\n    const decodeData = decodeCheck.slice(0, decodeCheck.length - 4);\n    const hash0 = SHA256(decodeData);\n    const hash1 = SHA256(hash0);\n\n    if (hash1[0] === decodeCheck[decodeData.length] &&\n        hash1[1] === decodeCheck[decodeData.length + 1] &&\n        hash1[2] === decodeCheck[decodeData.length + 2] &&\n        hash1[3] === decodeCheck[decodeData.length + 3]) {\n        return decodeData;\n    }\n\n    return false;\n}\n\nexport function isAddressValid(base58Str) {\n    if (typeof (base58Str) !== 'string')\n        return false;\n        \n    if (base58Str.length !== ADDRESS_SIZE)\n        return false;\n\n    let address = decode58(base58Str);\n\n    if (address.length !== 25)\n        return false;\n        \n    if (address[0] !== ADDRESS_PREFIX_BYTE)\n        return false;\n        \n    const checkSum = address.slice(21);\n    address = address.slice(0, 21);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return true\n    }\n\n    return false;\n}\n\nexport function getBase58CheckAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n\n    return getBase58CheckAddress(addressBytes);\n}\n\nexport function getHexStrAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressHex = byteArray2hexStr(addressBytes);\n\n    return addressHex;\n}\n\nexport function getAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressBase64 = base64EncodeToString(addressBytes);\n\n    return addressBase64;\n}\n\nexport function getPubKeyFromPriKey(priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const pubkey = key.getPublic();\n    const x = pubkey.x;\n    const y = pubkey.y;\n\n    let xHex = x.toString('hex');\n\n    while (xHex.length < 64) {\n        xHex = `0${xHex}`;\n    }\n\n    let yHex = y.toString('hex');\n\n    while (yHex.length < 64) {\n        yHex = `0${yHex}`;\n    }\n\n    const pubkeyHex = `04${xHex}${yHex}`;\n    const pubkeyBytes = hexStr2byteArray(pubkeyHex);\n\n    return pubkeyBytes;\n}\n\nexport function ECKeySign(hashBytes, priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const signature = key.sign(hashBytes);\n    const r = signature.r;\n    const s = signature.s;\n    const id = signature.recoveryParam;\n\n    let rHex = r.toString('hex');\n\n    while (rHex.length < 64) {\n        rHex = `0${rHex}`;\n    }\n\n    let sHex = s.toString('hex');\n\n    while (sHex.length < 64) {\n        sHex = `0${sHex}`;\n    }\n\n    const idHex = byte2hexStr(id);\n    const signHex = rHex + sHex + idHex;\n\n    return signHex;\n}\n\nexport function SHA256(msgBytes) {\n    const shaObj = new jsSHA('SHA-256', 'HEX');\n    const msgHex = byteArray2hexStr(msgBytes);\n\n    shaObj.update(msgHex);\n    const hashHex = shaObj.getHash('HEX');\n\n    return hexStr2byteArray(hashHex);\n}\n\nexport function passwordToAddress(password) {\n    const com_priKeyBytes = base64DecodeFromString(password);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n\nexport function pkToAddress(privateKey) {\n    const com_priKeyBytes = hexStr2byteArray(privateKey);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}","import { byteArray2hexStr } from './bytes';\nimport { \n    getBase58CheckAddress,\n    genPriKey,\n    getAddressFromPriKey,\n    getPubKeyFromPriKey\n} from './crypto';\n\nexport function generateAccount() {\n    const priKeyBytes = genPriKey();\n    const pubKeyBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = getAddressFromPriKey(priKeyBytes);\n    \n    const privateKey = byteArray2hexStr(priKeyBytes);\n    const publicKey = byteArray2hexStr(pubKeyBytes);\n\n    return {\n        privateKey,\n        publicKey,\n        address: {\n            base58: getBase58CheckAddress(addressBytes),\n            hex: byteArray2hexStr(addressBytes)\n        }\n    }\n}","import Ethers from 'ethers';\n\nconst abiCoder = new Ethers.utils.AbiCoder();\n\nexport function decodeParams(names, types, output) {\n\n    if (!output) {\n        output = types;\n        types = names;\n        names = [];\n    }\n\n    return abiCoder.decode(types, output).reduce((obj, arg, index) => {\n        if(types[index] == 'address')\n            arg = '41' + arg.substr(2).toLowerCase();\n\n        if(names.length)\n            obj[names[index]] = arg;\n        else obj.push(arg);\n\n        return obj;\n    }, names.length ? {} : []);\n}\n","import * as accounts from './accounts';\nimport * as base58 from './base58';\nimport * as bytes from './bytes';\nimport * as crypto from './crypto';\nimport * as code from './code';\nimport * as abi from './abi';\n\nimport validator from 'validator';\nimport BigNumber from 'bignumber.js';\n\nconst utils = {\n    isValidURL(url) {\n        return validator.isURL(url.toString(), {\n            protocols: [ 'http', 'https' ]\n        });\n    },\n\n    isObject(obj) {\n        return obj === Object(obj) && Object.prototype.toString.call(obj) !== '[object Array]';\n    },\n\n    isArray(array) {\n        return Array.isArray(array);\n    },\n\n    isJson(string) {\n        try {\n            return !!JSON.parse(string);\n        } catch (ex) {\n            return false;\n        }\n    },\n\n    isBoolean(bool) {\n        return typeof bool === 'boolean';\n    },\n\n    isBigNumber(number) {\n        return number && (number instanceof BigNumber || (number.constructor && number.constructor.name === 'BigNumber'));\n    },\n\n    isString(string) {\n        return typeof string === 'string' || (string && string.constructor && string.constructor.name === 'String');\n    },\n\n    isFunction(obj) {\n        return typeof obj === 'function';\n    },\n\n    isHex(string) {\n        return typeof string === 'string' && !isNaN(parseInt(string, 16));\n    },\n\n    isInteger(number) {\n        return Number.isInteger(\n            Number(number)\n        );\n    },\n\n    hasProperty(obj, property) {\n        return Object.prototype.hasOwnProperty.call(obj, property);\n    },\n\n    hasProperties(obj, ...properties) {\n        return properties.length && !properties.map(property => {\n            return this.hasProperty(obj, property)\n        }).includes(false);\n    },\n\n    injectPromise(func, ...args) {\n        return new Promise((resolve, reject) => {\n            func(...args, (err, res) => {\n                if(err)\n                    reject(err);\n                else resolve(res);\n            });\n        });\n    },\n\n    promiseInjector(scope) {\n        return (func, ...args) => {\n            return this.injectPromise(func.bind(scope), ...args);\n        }\n    },\n\n    mapEvent(event) {\n        return {\n            block: event.block_number,\n            timestamp: event.block_timestamp,\n            contract: event.contract_address,\n            name: event.event_name,\n            transaction: event.transaction_id,\n            result: event.result\n        };\n    },\n\n    parseEvent(event, { inputs: abi }) {\n        if(!event.result)\n            return event;\n\n        if (this.isObject(event.result)) {\n            for (var i = 0; i < abi.length; i++) {\n                let obj = abi[i];\n                if (obj.type == 'address' && obj.name in event.result)\n                    event.result[obj.name] = '41' + event.result[obj.name].substr(2).toLowerCase();\n            }\n        } else if (this.isArray(event.result)) {\n            event.result = event.result.reduce((obj, result, index) => {\n                const {\n                    name,\n                    type\n                } = abi[index];\n\n                if(type == 'address')\n                    result = '41' + result.substr(2).toLowerCase();\n\n                obj[name] = result;\n\n                return obj;\n            }, {});\n        }\n\n        return event;\n    }\n}\n\nexport default {\n    ...utils,\n    code,\n    accounts,\n    base58,\n    bytes,\n    crypto,\n    abi\n};\n","import HttpProvider from './HttpProvider';\n\nexport default {\n    HttpProvider\n};","import axios from 'axios';\nimport utils from 'utils';\n\nexport default class HttpProvider {\n    constructor(host, timeout = 30000, user = false, password = false, headers = {}, statusPage = '/') {\n        if(!utils.isValidURL(host))\n            throw new Error('Invalid URL provided to HttpProvider');\n\n        if(isNaN(timeout) || timeout < 0)\n            throw new Error('Invalid timeout duration provided');\n\n        if(!utils.isObject(headers))\n            throw new Error('Invalid headers object provided');\n\n        host = host.replace(/\\/+$/,'');\n\n        this.host = host;\n        this.timeout = timeout;\n        this.user = user;\n        this.password = password;\n        this.headers = headers;\n        this.statusPage = statusPage;\n\n        this.instance = axios.create({            \n            baseURL: host,\n            timeout: timeout,\n            headers: headers,\n            auth: user && {\n                user,\n                password\n            },\n        });\n    }\n\n    setStatusPage(statusPage = '/') {\n        this.statusPage = statusPage;\n    }\n\n    async isConnected(statusPage = this.statusPage) {\n        return this.request(statusPage).then(data => {\n            return utils.hasProperties(data, 'blockID', 'block_header');\n        }).catch(() => false);\n    }\n\n    request(url, payload = {}, method = 'get') {\n        method = method.toLowerCase();\n\n        return this.instance.request({\n            data: method == 'post' && payload,\n            params: method =='get' && payload,\n            url,\n            method\n        }).then(({ data }) => data);\n    }\n};\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport Ethers from 'ethers';\n\nexport default class TransactionBuilder {\n    constructor(tronWeb = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    sendTrx(to = false, amount = 0, from = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.sendTrx, to, amount, from);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!this.tronWeb.isAddress(from))\n            return callback('Invalid origin address provided');\n\n        to = this.tronWeb.address.toHex(to);\n        from = this.tronWeb.address.toHex(from);\n\n        if(to === from)\n            return callback('Cannot transfer TRX to the same account');\n\n        this.tronWeb.fullNode.request('wallet/createtransaction', {\n            to_address: to,\n            owner_address: from,\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    sendToken(to = false, amount = 0, tokenID = false, from = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, from);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if(!this.tronWeb.isAddress(from))\n            return callback('Invalid origin address provided');\n\n        to = this.tronWeb.address.toHex(to);\n        tokenID = this.tronWeb.fromUtf8(tokenID);\n        from = this.tronWeb.address.toHex(from);\n\n        if(to === from)\n            return callback('Cannot transfer tokens to the same account');\n\n        this.tronWeb.fullNode.request('wallet/transferasset', {\n            to_address: to,\n            owner_address: from,\n            asset_name: tokenID,\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    purchaseToken(issuerAddress = false, tokenID = false, amount = 0, buyer = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(buyer)) {\n            callback = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.purchaseToken, issuerAddress, tokenID, amount, buyer);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!this.tronWeb.isAddress(buyer))\n            return callback('Invalid buyer address provided');\n\n        this.tronWeb.fullNode.request('wallet/participateassetissue', {\n            to_address: this.tronWeb.address.toHex(issuerAddress),\n            owner_address: this.tronWeb.address.toHex(buyer),\n            asset_name: this.tronWeb.fromUtf8(tokenID),\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    freezeBalance(address = this.tronWeb.defaultAddress.hex, amount = 0, duration = 3, resource = \"BANDWIDTH\", callback = false) {\n        if(utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n            \n        if(!callback)\n            return this.injectPromise(this.freezeBalance, address, amount, duration, resource);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isInteger(duration) || duration < 3)\n            return callback('Invalid duration provided, minimum of 3 days');\n\n        this.tronWeb.fullNode.request('wallet/freezebalance', {\n            owner_address: this.tronWeb.address.toHex(address),\n            frozen_balance: parseInt(amount),\n            frozen_duration: parseInt(duration),\n            resource: resource\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    unfreezeBalance(address = this.tronWeb.defaultAddress.hex, resource = \"BANDWIDTH\", callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if(!callback)\n            return this.injectPromise(this.unfreezeBalance, address, resource);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n        \n        this.tronWeb.fullNode.request('wallet/unfreezebalance', {\n            owner_address: this.tronWeb.address.toHex(address),\n            resource: resource\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    withdrawBlockRewards(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.withdrawBlockRewards, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n        \n        this.tronWeb.fullNode.request('wallet/withdrawbalance', {\n            owner_address: this.tronWeb.address.toHex(address)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    applyForSR(address = this.tronWeb.defaultAddress.hex, url = false, callback = false) {\n        if(utils.isValidURL(address)) {\n            callback = url || false;\n            url = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.applyForSR, address, url);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isValidURL(url))\n            return callback('Invalid url provided');\n        \n        this.tronWeb.fullNode.request('wallet/createwitness', {\n            owner_address: this.tronWeb.address.toHex(address),\n            url: this.tronWeb.fromUtf8(url)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    vote(votes = {}, voterAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.vote, votes, voterAddress);\n\n        if(!utils.isObject(votes) || !Object.keys(votes).length)\n            return callback('Invalid votes object provided');\n\n        if(!this.tronWeb.isAddress(voterAddress))\n            return callback('Invalid voter address provided');\n\n        let invalid = false;\n\n        votes = Object.entries(votes).map(([ srAddress, voteCount ]) => {\n            if(invalid)\n                return;\n\n            if(!this.tronWeb.isAddress(srAddress)) {\n                callback('Invalid SR address provided: ' + srAddress);\n                return invalid = true;\n            }\n\n            if(!utils.isInteger(voteCount) || voteCount <= 0) {\n                callback('Invalid vote count provided for SR: ' + srAddress);\n                return invalid = true;\n            }\n\n            return {\n                vote_address: this.tronWeb.address.toHex(srAddress),\n                vote_count: parseInt(voteCount)\n            };\n        });\n\n        if(invalid)\n            return;\n\n        this.tronWeb.fullNode.request('wallet/votewitnessaccount', {\n            owner_address: this.tronWeb.address.toHex(voterAddress),\n            votes\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    createSmartContract(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.createSmartContract, options, issuerAddress);\n\n        let {\n            abi = false,\n            bytecode = false,\n            feeLimit = 1_000_000_000,\n            callValue = 0,\n            userFeePercentage = 0,\n            parameters = []\n        } = options;\n        \n\n        if(abi && utils.isString(abi)) {\n            try {\n                abi = JSON.parse(abi);\n            } catch{\n                return callback('Invalid options.abi provided');\n            }\n        }\n\n        if(!utils.isArray(abi))\n            return callback('Invalid options.abi provided');\n\n\n        const payable = abi.some(func => {\n            return func.type == 'constructor' && func.payable;\n        });\n\n        if(!utils.isHex(bytecode))\n            return callback('Invalid options.bytecode provided');\n\n        if(!utils.isInteger(feeLimit) || feeLimit <= 0 || feeLimit > 1_000_000_000)\n            return callback('Invalid options.feeLimit provided');\n\n        if(!utils.isInteger(callValue) || callValue < 0)\n            return callback('Invalid options.callValue provided');\n\n        if(payable && callValue == 0)\n            return callback('When contract is payable, options.callValue must be a positive integer');\n\n        if(!payable && callValue > 0)\n            return callback('When contract is not payable, options.callValue must be 0');\n\n        if(!utils.isInteger(userFeePercentage) || userFeePercentage < 0 || userFeePercentage > 100)\n            return callback('Invalid options.userFeePercentage provided');\n\n        if(!utils.isArray(parameters))\n            return callback('Invalid parameters provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        var constructorParams = abi.find(\n            (it) => {\n                return it.type === 'constructor';\n            }\n        );\n\n        if(typeof constructorParams !== 'undefined' && constructorParams) {\n            const abiCoder = new Ethers.utils.AbiCoder();\n            const types = [];\n            const values = [];\n            constructorParams = constructorParams.inputs;\n\n            if(parameters.length != constructorParams.length)\n                return callback(`constructor needs ${constructorParams.length} but ${parameters.length} provided`);\n\n            for(let i = 0; i < parameters.length; i++) {\n                let type = constructorParams[i].type;\n                let value = parameters[i];\n\n                if(!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if(type == 'address')\n                    value = this.tronWeb.address.toHex(value).replace(/^(41)/, '0x');\n                    \n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        this.tronWeb.fullNode.request('wallet/deploycontract', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            consume_user_resource_percent: userFeePercentage,\n            abi: JSON.stringify(abi),\n            bytecode,\n            parameter: parameters\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    triggerSmartContract(\n        contractAddress, \n        functionSelector,\n        feeLimit = 1_000_000_000,\n        callValue = 0,\n        parameters = [], \n        issuerAddress = this.tronWeb.defaultAddress.hex, \n        callback = false\n    ) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(parameters)) {\n            callback = parameters;\n            parameters = [];\n        }\n\n        if(utils.isFunction(callValue)) {\n            callback = callValue;\n            callValue = 0;\n        }\n\n        if(utils.isFunction(feeLimit)) {\n            callback = feeLimit;\n            feeLimit = 1_000_000_000;\n        }\n\n        if(!callback) {\n            return this.injectPromise(\n                this.triggerSmartContract, \n                contractAddress, \n                functionSelector, \n                feeLimit,\n                callValue, \n                parameters,\n                issuerAddress\n            );\n        }\n\n        if(!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if(!utils.isString(functionSelector) || !functionSelector.length)\n            return callback('Invalid function selector provided');\n\n        if(!utils.isInteger(callValue) || callValue < 0)\n            return callback('Invalid call value provided');\n\n        if(!utils.isInteger(feeLimit) || feeLimit <= 0 || feeLimit > 1_000_000_000)\n            return callback('Invalid fee limit provided');\n\n        if(!utils.isArray(parameters))\n            return callback('Invalid parameters provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        functionSelector = functionSelector.replace('/\\s*/g', '');\n\n        if(parameters.length) {\n            const abiCoder = new Ethers.utils.AbiCoder();\n            const types = [];\n            const values = [];\n\n            for(let i = 0; i < parameters.length; i++) {\n                let { type, value } = parameters[i];\n\n                if(!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if(type == 'address')\n                    value = this.tronWeb.address.toHex(value).replace(/^(41)/, '0x');\n                    \n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        this.tronWeb.fullNode.request('wallet/triggersmartcontract', {\n            contract_address: this.tronWeb.address.toHex(contractAddress),\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            function_selector: functionSelector,\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            parameter: parameters\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            if(!transaction.result.result)\n                return callback(transaction);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    createToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.createToken, options, issuerAddress);\n\n        const {\n            name = false,\n            abbreviation = false,\n            description = false,\n            url = false,\n            totalSupply = 0,\n            trxRatio = 1, // How much TRX will `tokenRatio` cost?\n            tokenRatio = 1, // How many tokens will `trxRatio` afford?\n            saleStart = Date.now(),\n            saleEnd = false,            \n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0, // Out of `totalFreeBandwidth`, the amount each token holder get\n            frozenAmount = 0,\n            frozenDuration = 0\n        } = options;\n\n        if(!utils.isString(name) || !name.length)\n            return callback('Invalid token name provided');\n\n        if(!utils.isString(abbreviation) || !abbreviation.length)\n            return callback('Invalid token abbreviation provided');\n\n        if(!utils.isInteger(totalSupply) || totalSupply <= 0)\n            return callback('Invalid supply amount provided');\n\n        if(!utils.isInteger(trxRatio) || trxRatio <= 0)\n            return callback('TRX ratio must be a positive integer');\n\n        if(!utils.isInteger(tokenRatio) || tokenRatio <= 0)\n            return callback('Token ratio must be a positive integer');\n\n        if(!utils.isInteger(saleStart) || saleStart < Date.now())\n            return callback('Invalid sale start timestamp provided');\n\n        if(!utils.isInteger(saleEnd) || saleEnd <= saleStart)\n            return callback('Invalid sale end timestamp provided');\n\n        if(!utils.isString(description) || !description.length)\n            return callback('Invalid token description provided');\n\n        if(!utils.isString(url) || !url.length || !utils.isValidURL(url))\n            return callback('Invalid token url provided');\n\n        if(!utils.isInteger(freeBandwidth) || freeBandwidth < 0)\n            return callback('Invalid free bandwidth amount provided');\n\n        if(!utils.isInteger(freeBandwidthLimit) || freeBandwidthLimit < 0 || (freeBandwidth && !freeBandwidthLimit))\n            return callback('Invalid free bandwidth limit provided');\n\n        if(!utils.isInteger(frozenAmount) || frozenAmount < 0 || (!frozenDuration && frozenAmount))\n            return callback('Invalid frozen supply provided');\n\n        if(!utils.isInteger(frozenDuration) || frozenDuration < 0 || (frozenDuration && !frozenAmount))\n            return callback('Invalid frozen duration provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        this.tronWeb.fullNode.request('wallet/createassetissue', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            name: this.tronWeb.fromUtf8(name),\n            abbr: this.tronWeb.fromUtf8(abbreviation),\n            description: this.tronWeb.fromUtf8(description),\n            url: this.tronWeb.fromUtf8(url),\n            total_supply: parseInt(totalSupply),\n            trx_num: parseInt(trxRatio),\n            num: parseInt(tokenRatio),\n            start_time: parseInt(saleStart),\n            end_time: parseInt(saleEnd),\n            free_asset_net_limit: parseInt(freeBandwidth),\n            public_free_asset_net_limit: parseInt(freeBandwidthLimit),\n            frozen_supply: {\n                frozen_amount: parseInt(frozenAmount),\n                frozen_days: parseInt(frozenDuration)\n            }\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    updateToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.updateToken, options, issuerAddress);\n\n        const {\n            description = false,\n            url = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0 // Out of `totalFreeBandwidth`, the amount each token holder get\n        } = options;\n\n        if(!utils.isInteger(freeBandwidth) || freeBandwidth < 0)\n            return callback('Invalid free bandwidth amount provided');\n\n        if(!utils.isInteger(freeBandwidthLimit) || freeBandwidthLimit < 0 || (freeBandwidth && !freeBandwidthLimit))\n            return callback('Invalid free bandwidth limit provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        this.tronWeb.fullNode.request('wallet/updateasset', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            description: this.tronWeb.fromUtf8(description),\n            url: this.tronWeb.fromUtf8(url),\n            new_limit: parseInt(freeBandwidth),\n            new_public_limit: parseInt(freeBandwidthLimit)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    purchaseAsset(...args) {\n        return this.purchaseToken(...args);\n    }\n\n    createAsset(...args) {\n        return this.createToken(...args);\n    }\n\n    updateAsset(...args) {\n        return this.updateToken(...args);\n    }\n\n    /**\n     * Creates a proposal to modify the network.\n     * Can only be created by a current Super Representative.\n     */\n    createProposal(parameters = false, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!parameters)\n            return callback('Invalid proposal parameters provided');\n\n        if(!callback)\n            return this.injectPromise(this.createProposal, parameters, issuerAddress);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuerAddress provided');\n\n        if(!utils.isObject(parameters))\n            return callback('Invalid parameters provided');\n\n        this.tronWeb.fullNode.request('wallet/proposalcreate', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            parameters: parameters\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Deletes a network modification proposal that the owner issued.\n     * Only current Super Representative can vote on a proposal.\n     */\n    deleteProposal(proposalID = false, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.deleteProposal, proposalID, issuerAddress);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuerAddress provided');\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/proposaldelete', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            proposal_id: parseInt(proposalID)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds a vote to an issued network modification proposal.\n     * Only current Super Representative can vote on a proposal.\n     */\n    voteProposal(proposalID = false, hasApproval = false, voterAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.voteProposal, proposalID, hasApproval, voterAddress);\n\n        if(!this.tronWeb.isAddress(voterAddress))\n            return callback('Invalid voterAddress address provided');\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        if(!utils.isBoolean(hasApproval))\n            return callback('Invalid hasApproval provided');\n\n        this.tronWeb.fullNode.request('wallet/proposalapprove', {\n            owner_address: this.tronWeb.address.toHex(voterAddress),\n            proposal_id: parseInt(proposalID),\n            is_add_approval: isApproval.toString()\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds tokens into a bancor style exchange.\n     */\n    injectExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.injectExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmount) || tokenAmount < 1)\n            return callback('Invalid tokenAmount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangeinject', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant:parseInt(tokenAmount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Withdraws tokens from a bancor style exchange.\n     */\n    withdrawExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.withdrawExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmount) || tokenAmount < 1)\n            return callback('Invalid tokenAmount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangewithdraw', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant:parseInt(tokenAmount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Trade tokens on a bancor style exchange.\n     */\n    tradeExchangeTokens(exchangeID = false, \n        tokenName = false, \n        tokenAmountSold = 0, \n        tokenAmountExpected = 0, \n        ownerAddress = this.tronWeb.defaultAddress.hex, \n        callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.tradeExchangeTokens, exchangeID, tokenName, tokenAmountSold, tokenAmountExpected, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmountSold) || tokenAmountSold < 1)\n            return callback('Invalid tokenAmountSold provided');\n\n        if(!utils.isInteger(tokenAmountExpected) || tokenAmountExpected < 1)\n            return callback('Invalid tokenAmountExpected provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangewithdraw', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant:parseInt(tokenAmountSold),\n            expected:parseInt(tokenAmountExpected)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n}","import TronWeb from 'index';\nimport utils from 'utils';\n\nexport default class Trx {\n    constructor(tronWeb = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    parseToken(token) {\n        return {\n            ...token,\n            name: this.tronWeb.toUtf8(token.name),\n            abbr: token.abbr && this.tronWeb.toUtf8(token.abbr),\n            description: token.description && this.tronWeb.toUtf8(token.description),\n            url: token.url && this.tronWeb.toUtf8(token.url)\n        };\n    }\n\n    getCurrentBlock(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getCurrentBlock);\n\n        this.tronWeb.fullNode.request('wallet/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlock(block = this.tronWeb.defaultBlock, callback = false) {\n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlock, block);\n\n        if(block === false)\n            return callback('No block identifier provided');\n\n        if(block == 'earliest')\n            block = 0;\n\n        if(block == 'latest')\n            return this.getCurrentBlock(callback);\n\n        if(isNaN(block) && utils.isHex(block))\n            return this.getBlockByHash(block, callback);\n\n        this.getBlockByNumber(block, callback);\n    }\n\n    getBlockByHash(blockHash, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getBlockByHash, blockHash);\n\n        this.tronWeb.fullNode.request('wallet/getblockbyid', { \n            value: blockHash \n        }, 'post').then(block => {\n            if(!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockByNumber(blockID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getBlockByNumber, blockID);\n\n        if(!utils.isInteger(blockID) || blockID < 0)\n            return callback('Invalid block number provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbynum', { \n            num: parseInt(blockID) \n        }, 'post').then(block => {\n            if(!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockTransactionCount(block = this.tronWeb.defaultBlock, callback = false) {\n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlockTransactionCount, block);\n\n        this.getBlock(block).then(({ transactions = [] }) => {\n            callback(null, transactions.length);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionFromBlock(block = this.tronWeb.defaultBlock, index = 0, callback = false) {\n        if(utils.isFunction(index)) {\n            callback = index;\n            index = 0;\n        }\n        \n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionFromBlock, block, index);\n\n        if(!utils.isInteger(index) || index < 0)\n            return callback('Invalid transaction index provided');\n\n        this.getBlock(block).then(({ transactions = false }) => {\n            if(!transactions || transactions.length < index)\n                return callback('Transaction not found in block');\n\n            callback(null, transactions[index]);\n        }).catch(err => callback(err));\n    }\n\n    getTransaction(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTransaction, transactionID);\n\n        this.tronWeb.fullNode.request('wallet/gettransactionbyid', { \n            value: transactionID \n        }, 'post').then(transaction => {\n            if(!Object.keys(transaction).length)\n                return callback('Transaction not found');\n                \n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionInfo(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTransactionInfo, transactionID);\n\n        this.tronWeb.solidityNode.request('walletsolidity/gettransactioninfobyid', { \n            value: transactionID \n        }, 'post').then(transaction => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionsToAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;          \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsToAddress, address, limit, offset);\n\n        return this.getTransactionsRelated(address, 'to', limit, offset, callback);\n    }\n\n    getTransactionsFromAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;           \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsFromAddress, address, limit, offset);\n\n        return this.getTransactionsRelated(address, 'from', limit, offset, callback);\n    }\n\n    async getTransactionsRelated(address = this.tronWeb.defaultAddress.hex, direction = 'all', limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;         \n        }\n\n        if(utils.isFunction(direction)) {\n            callback = direction;\n            direction = 'all';\n        }\n\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsRelated, address, direction, limit, offset);\n\n        if(![ 'to', 'from', 'all' ].includes(direction))\n            return callback('Invalid direction provided: Expected \"to\", \"from\" or \"all\"');\n        \n        if(direction == 'all') {\n            try {\n                const from = await this.getTransactionsRelated(address, 'from', limit, offset);\n                const to = await this.getTransactionsRelated(address, 'to', limit, offset);\n\n                return callback(null, [\n                    ...from.map(tx => (tx.direction = 'from', tx)),\n                    ...to.map(tx => (tx.direction = 'to', tx))\n                ].sort((a, b) => b.raw_data.timestamp - a.raw_data.timestamp));\n            } catch(ex) {\n                return callback(ex);\n            }\n        }\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if(!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request(`walletextension/gettransactions${direction}this`, {\n            account: {\n                address\n            },\n            offset,\n            limit\n        }, 'post').then(({ transaction }) => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getAccount, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBalance, address);\n\n        this.getAccount(address).then(({ balance = 0 }) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getBandwidth(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBandwidth, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccountnet', {\n            address\n        }, 'post').then(({ freeNetUsed = 0, freeNetLimit = 0, NetUsed = 0, NetLimit = 0 }) => {\n            callback(null, (freeNetLimit - freeNetUsed) + (NetLimit - NetUsed));\n        }).catch(err => callback(err));\n    }\n\n    getTokensIssuedByAddress(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTokensIssuedByAddress, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyaccount', {\n            address\n        }, 'post').then(({ assetIssue = false }) => {\n            if(!assetIssue)\n                return callback(null, {});\n\n            const tokens = assetIssue.map(token => {\n                return this.parseToken(token);\n            }).reduce((tokens, token) => {\n                return tokens[token.name] = token, tokens;\n            }, {});\n\n            callback(null, tokens);\n        }).catch(err => callback(err));\n    }\n\n    getTokenFromID(tokenID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTokenFromID, tokenID);\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if(!token.name)\n                return callback('Token does not exist');\n                \n            callback(null, this.parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    listNodes(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listNodes);\n\n        this.tronWeb.fullNode.request('wallet/listnodes').then(({ nodes = [] }) => {\n            callback(null, nodes.map(({ address: { host, port } }) => (\n                `${this.tronWeb.toUtf8(host)}:${port}`\n            )));\n        }).catch(err => callback(err));\n    }\n\n    getBlockRange(start = 0, end = 30, callback = false) {\n        if(utils.isFunction(end)) {\n            callback = end;\n            end = 30;            \n        }\n\n        if(utils.isFunction(start)) {\n            callback = start;\n            start = 0;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlockRange, start, end);\n\n        if(!utils.isInteger(start) || start < 0)\n            return callback('Invalid start of range provided');\n\n        if(!utils.isInteger(end) || end <= start)\n            return callback('Invalid end of range provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbylimitnext', { \n            startNum: parseInt(start),\n            endNum: parseInt(end) + 1\n        }, 'post').then(({ block = [] }) => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    listSuperRepresentatives(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listSuperRepresentatives);\n\n        this.tronWeb.fullNode.request('wallet/listwitnesses').then(({ witnesses = [] }) => {\n            callback(null, witnesses);\n        }).catch(err => callback(err));\n    }\n\n    listTokens(limit = 0, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 0;  \n        }\n        \n        if(!callback)\n            return this.injectPromise(this.listTokens, limit, offset);\n\n        if(!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if(!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        if(!limit) {\n            return this.tronWeb.fullNode.request('wallet/getassetissuelist').then(({ assetIssue = [] }) => {\n                callback(null, assetIssue.map(token => this.parseToken(token)));\n            }).catch(err => callback(err));\n        }\n\n        this.tronWeb.fullNode.request('wallet/getpaginatedassetissuelist', {\n            offset: parseInt(offset),\n            limit: parseInt(limit)\n        }, 'post').then(({ assetIssue = [] }) => {\n            callback(null, assetIssue.map(token => this.parseToken(token)));\n        }).catch(err => callback(err));\n    }\n\n    timeUntilNextVoteCycle(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.timeUntilNextVoteCycle);\n\n        this.tronWeb.fullNode.request('wallet/getnextmaintenancetime').then(({ num = -1 }) => {\n            if(num == -1)\n                return callback('Failed to get time until next vote cycle');\n\n            callback(null, Math.floor(num / 1000));\n        }).catch(err => callback(err));\n    }\n\n    getContract(contractAddress, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getContract, contractAddress);\n\n        if(!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        contractAddress = this.tronWeb.address.toHex(contractAddress);\n\n        this.tronWeb.fullNode.request('wallet/getcontract', {\n            value: contractAddress\n        }).then(contract => {\n            if(contract.Error)\n                return callback('Contract does not exist');\n\n            callback(null, contract);\n        }).catch(err => callback(err));\n    }\n\n    async sign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sign, transaction, privateKey);\n\n        if(!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if(transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            const address = this.tronWeb.address.toHex(\n                this.tronWeb.address.fromPrivateKey(privateKey)\n            ).toLowerCase();\n\n            if(address !== transaction.raw_data.contract[0].parameter.value.owner_address.toLowerCase())\n                return callback('Private key does not match address in transaction');\n\n            return callback(null,\n                utils.crypto.signTransaction(privateKey, transaction)\n            );\n        } catch(ex) {\n            callback(ex);\n        }\n    }\n\n    sendRawTransaction(signedTransaction = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.sendRawTransaction, signedTransaction);\n\n        if(!utils.isObject(signedTransaction))\n            return callback('Invalid transaction provided');\n\n        if(!signedTransaction.signature || !utils.isArray(signedTransaction.signature))\n            return callback('Transaction is not signed');\n\n        this.tronWeb.fullNode.request(\n            'wallet/broadcasttransaction', \n            signedTransaction,\n            'post'\n        ).then(result => {\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    async sendTransaction(to = false, amount = false, options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sendTransaction, to, amount, options);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendTrx(to, amount, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    async sendToken(to = false, amount = false, tokenID = false, options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, options);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isString(tokenID))\n            return callback('Invalid token ID provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendToken(to, amount, tokenID, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    send(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    sendTrx(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    broadcast(...args) {\n        return this.sendRawTransaction(...args);\n    }\n\n    signTransaction(...args) {\n        return this.sign(...args);\n    }\n\n    /**\n     * Gets a network modification proposal by ID.\n     */\n    getProposal(proposalID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getProposal, proposalID);\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/getproposalbyid', { \n            id: parseInt(proposalID),\n        }, 'post').then(proposal => {\n            callback(null, proposal);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listProposals(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listProposals);\n\n        this.tronWeb.fullNode.request('wallet/listproposals', {}, 'post').then(({ proposals = [] }) => {\n            callback(null, proposals);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all parameters available for network modification proposals.\n     */\n    getChainParameters(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getChainParameters);\n\n        this.tronWeb.fullNode.request('wallet/getchainparameters', {}, 'post').then(({ chainParameter = [] }) => {\n            callback(null, chainParameter);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    getAccountResources(address = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getAccountResources, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/getaccountresource', { \n            address: this.tronWeb.address.toHex(address),\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    getExchangeByID(exchangeID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getExchangeByID, address);\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        this.tronWeb.fullNode.request('wallet/getexchangebyid', { \n            address: this.tronWeb.address.toHex(address),\n        }, 'post').then(exchange => {\n            callback(null, exchange);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listExchanges(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchanges', {}, 'post').then(({ exchanges = [] }) => {\n            callback(null, exchanges);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between tokens.\n     */\n    exchangeCreate(ownerAddress = false,\n                   firstTokenID, firstTokenBalance,\n                   secondTokenID, secondTokenBalance, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getAccountResources, address);\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid address provided');\n\n        if (!utils.isString(firstTokenID) || !firstTokenID.length\n            || !utils.isString(secondTokenID) || !secondTokenID.length)\n            return callback('Invalid token ID provided');\n\n        if (!utils.isInteger(firstTokenBalance) || firstTokenBalance <= 0\n            || !utils.isInteger(secondTokenBalance) || secondTokenBalance <= 0)\n            return callback('Invalid amount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            first_token_id: firstTokenID,\n            first_token_balance: firstTokenBalance,\n            second_token_id: secondTokenID,\n            second_token_balance: secondTokenBalance\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Exchanges a transaction.\n     */\n    exchangeTransaction(ownerAddress = false, exchangeID, tokenID, quant, expected, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getAccountResources, address);\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid address provided');\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if (!utils.isInteger(quant) || quant <= 0)\n            return callback('Invalid quantity provided');\n\n        if (!utils.isInteger(expected) || expected < 0)\n            return callback('Invalid expected provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangetransaction', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: exchangeID,\n            token_id: tokenID,\n            quant,\n            expected\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listExchangesPaginated(limit = 10, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n        if(!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchangespaginated', {\n            limit,\n            offset\n        }, 'post').then(({ exchanges = [] }) => {\n            callback(null, exchanges);\n        }).catch(err => callback(err));\n    }\n};\n","export default class Witness {\n    \n}","import utils from 'utils';\n\nconst getFunctionSelector = abi => {\n    return abi.name + '(' + getParamTypes(abi.inputs || []).join(',') + ')';\n}\n\nconst getParamTypes = params => {\n    return params.map(({ type }) => type);\n}\n\nconst decodeOutput = (abi, output) => {\n    const names = abi.map(({ name }) => name).filter(name => !!name);\n    const types = abi.map(({ type }) => type);\n\n    return utils.abi.decodeParams(names, types, output);\n};\n\nexport default class Method {\n    constructor(contract, abi) {\n        this.tronWeb = contract.tronWeb;\n        this.contract = contract;\n\n        this.abi = abi;        \n        this.name = abi.name || (abi.name = abi.type);\n\n        this.inputs = abi.inputs || [];\n        this.outputs = abi.outputs || [];\n\n        this.signature = this.tronWeb.sha3(abi.name, false).slice(0, 8);\n        this.functionSelector = getFunctionSelector(abi);\n        this.injectPromise = utils.promiseInjector(this);\n\n        this.defaultOptions = {\n            feeLimit: 1000000000,\n            callValue: 0,\n            from: this.tronWeb.defaultAddress.hex, // Only used for send()\n            shouldPollResponse: false // Only used for sign()\n        };\n    }\n\n    onMethod(...args) {\n        const types = getParamTypes(this.inputs);\n\n        args.forEach((arg, index) => {\n            if(types[index] == 'address')\n                args[index] = this.tronWeb.address.toHex(arg).replace(/^(41)/, '0x')\n        });\n\n        return {\n            call: (...methodArgs) => this._call(types, args, ...methodArgs),\n            send: (...methodArgs) => this._send(types, args, ...methodArgs),\n            watch: (...methodArgs) => this._watch(...methodArgs)\n        }\n    }\n\n    async _call(types, args, options = {}, callback = false) {                \n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n            \n        if(!callback)\n            return this.injectPromise(this._call, types, args, options);\n\n        if(types.length !== args.length)\n            return callback('Invalid argument count provided');\n\n        if(!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if(!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const { stateMutability } = this.abi;\n\n        if(![ 'pure', 'view' ].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use send()`);\n\n        options = { ...this.defaultOptions, ...options };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        this.tronWeb.transactionBuilder.triggerSmartContract(\n            this.contract.address,\n            this.functionSelector,\n            options.feeLimit,\n            options.callValue,\n            parameters,\n            this.tronWeb.address.toHex(options.from),\n        (err, transaction) => {\n            if(err) \n                return callback(err);\n\n            if(!utils.hasProperty(transaction, 'constant_result'))\n                return callback('Failed to execute');\n\n            try {\n                let output = decodeOutput(this.outputs, '0x' + transaction.constant_result[0]);\n                \n                if(output.length === 1)\n                    output = output[0];\n\n                return callback(null, output);\n            } catch(ex) {\n                return callback(ex);\n            }\n        });\n    }\n\n    async _send(types, args, options = {}, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n            \n        if(!callback)\n            return this.injectPromise(this._send, types, args, options, privateKey);\n\n        if(types.length !== args.length)\n            throw new Error('Invalid argument count provided');\n\n        if(!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if(!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const { stateMutability } = this.abi;\n\n        if([ 'pure', 'view' ].includes(stateMutability.toLowerCase()))\n                return callback(`Methods with state mutability \"${stateMutability}\" must use call()`);\n\n        // If a function isn't payable, dont provide a callValue.\n        if(![ 'payable' ].includes(stateMutability.toLowerCase()))\n                options.callValue = 0;\n   \n        options = { ...this.defaultOptions, ...options };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        try {\n            const address = privateKey ? this.tronWeb.address.fromPrivateKey(privateKey) : this.tronWeb.defaultAddress.base58;\n            const transaction = await this.tronWeb.transactionBuilder.triggerSmartContract(\n                this.contract.address,\n                this.functionSelector,\n                options.feeLimit,\n                options.callValue,\n                parameters,\n                this.tronWeb.address.toHex(address)\n            );\n\n            if(!transaction.result || !transaction.result.result)\n                return callback('Unknown error: ' + JSON.stringify(transaction, null, 2));\n\n            // If privateKey is false, this won't be signed here. We assume sign functionality will be replaced.\n            const signedTransaction = await this.tronWeb.trx.sign(transaction.transaction, privateKey);\n\n            if(!signedTransaction.signature) {\n                if (!privateKey) {\n                    return callback('Transaction was not signed properly');\n                } else {\n                    return callback('Invalid private key provided');\n                }\n            }\n\n            const broadcast = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if(!broadcast.result)\n                return callback('Unknown error: ' + JSON.stringify(broadcast, null, 2));\n\n            if(!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if(index == 20) {\n                    return callback({ \n                        error: 'Cannot find result in solidity node', \n                        transaction: signedTransaction\n                    });\n                }\n                \n                const output = await this.tronWeb.trx.getTransactionInfo(signedTransaction.txID);\n\n                if(!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if(output.result && output.result == 'FAILED') {\n                    return callback({\n                        error: this.tronWeb.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if(!utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                let decoded = decodeOutput(this.outputs, '0x' + output.contractResult[0]);\n\n                if(decoded.length === 1)\n                    decoded = decoded[0];\n\n                return callback(null, decoded);\n            }\n\n            checkResult();                    \n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    async _watch(callback = false) {\n        if(!utils.isFunction(callback))\n            throw new Error('Expected callback to be provided');\n        \n        if(!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if(this.abi.type.toLowerCase() !== 'event')\n            return callback('Invalid method type for event watching');\n\n        if(!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        let listener = false;\n        let lastBlock = false;\n        const sinceTimestamp = new Date().getTime();\n\n        const getEvents = async () => {\n            try {\n                const events = await this.tronWeb.getEventResult(this.contract.address, sinceTimestamp, this.name);\n                const [ latestEvent ] = events.sort((a, b) => b.block - a.block);\n                const newEvents = events.filter((event, index) => {\n                    const duplicate = events.slice(0, index).some(priorEvent => (\n                        JSON.stringify(priorEvent) == JSON.stringify(event)\n                    ));\n\n                    if(duplicate)\n                        return false;\n\n                    if(!lastBlock)\n                        return true;            \n\n                    return event.block > lastBlock;\n                });\n\n                if(latestEvent)\n                    lastBlock = latestEvent.block;\n\n                return newEvents;\n            } catch(ex) {\n                return Promise.reject(ex);\n            }\n        };\n\n        const bindListener = () => {\n            if(listener)\n                clearInterval(listener);\n\n            listener = setInterval(() => {\n                getEvents().then(events => events.forEach(event => {\n                    callback(null, utils.parseEvent(event, this.abi))\n                })).catch(err => callback(err));\n            }, 3000);\n        };\n\n        await getEvents();\n        bindListener();\n\n        return {\n            start: bindListener(),\n            stop: () => {\n                if(!listener)\n                    return;\n\n                clearInterval(listener);\n                listener = false;\n            }\n        }\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport Method from './method';\n\nexport default class Contract {\n    constructor(tronWeb = false, abi = [], address = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n\n        this.address = address;\n        this.abi = abi;\n\n        this.eventListener = false;\n        this.bytecode = false;        \n        this.deployed = false;\n        this.lastBlock = false;  \n\n        this.methods = {};\n        this.props = [];\n\n        if(this.tronWeb.isAddress(address))\n            this.deployed = true;\n        else this.address = false;\n\n        this.loadAbi(abi);\n    }\n\n    async _getEvents() {\n        const events = await this.tronWeb.getEventResult(this.address);\n        const [ latestEvent ] = events.sort((a, b) => b.block - a.block);\n        const newEvents = events.filter((event, index) => {\n            const duplicate = events.slice(0, index).some(priorEvent => (\n                JSON.stringify(priorEvent) == JSON.stringify(event)\n            ));\n\n            if(duplicate)\n                return false;\n            \n            if(!this.lastBlock)\n                return true;            \n\n            return event.block > this.lastBlock;\n        });\n\n        if(latestEvent)\n            this.lastBlock = latestEvent.block;\n\n        return newEvents;\n    }\n\n    async _startEventListener(callback) {\n        if(this.eventListener)\n            clearInterval(this.eventListener);\n\n        if(!this.tronWeb.eventServer)\n            throw new Error('Event server is not configured');\n\n        if(!this.address)\n            throw new Error('Contract is not configured with an address');\n\n        this.eventCallback = callback;\n        await this._getEvents();\n\n        this.eventListener = setInterval(() => {\n            this._getEvents().then(newEvents => newEvents.forEach(event => {\n                this.eventCallback && this.eventCallback(event)\n            })).catch(err => {\n                console.error('Failed to get event list', err);\n            });\n        }, 3000);\n    }\n\n    _stopEventListener() {\n        if(!this.eventListener)\n            return;\n\n        clearInterval(this.eventListener);\n        this.eventListener = false;\n        this.eventCallback = false;\n    }\n\n    hasProperty(property) {\n        return this.hasOwnProperty(property) || this.__proto__.hasOwnProperty(property);\n    }\n\n    loadAbi(abi) {\n        this.abi = abi;\n        this.methods = {};\n\n        this.props.forEach(prop => delete this[prop]);\n\n        abi.forEach(func => {\n            // Don't build a method for constructor function. That's handled through contract create.\n            if (func.type.toLowerCase() === 'constructor')\n                return;\n\n            const method = new Method(this, func);\n            const methodCall = method.onMethod.bind(method);\n\n            const {\n                name,\n                functionSelector,\n                signature\n            } = method;\n\n            this.methods[name] = methodCall;\n            this.methods[functionSelector] = methodCall;\n            this.methods[signature] = methodCall;\n\n            if(!this.hasProperty(name)) {\n                this[name] = methodCall;\n                this.props.push(name);\n            }\n\n            if(!this.hasProperty(functionSelector)) {\n                this[functionSelector] = methodCall;\n                this.props.push(functionSelector);\n            }\n\n            if(!this.hasProperty(signature)) {\n                this[signature] = methodCall;\n                this.props.push(signature);\n            }\n        });\n    }\n\n    async new(options, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.new, options, privateKey);\n\n        try {\n            const address = this.tronWeb.address.fromPrivateKey(privateKey);\n            const transaction = await this.tronWeb.transactionBuilder.createSmartContract(options, address);\n            const signedTransaction = await this.tronWeb.trx.sign(transaction, privateKey);\n            const contract = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if(!contract.result)\n                return callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            return this.at(signedTransaction.contract_address, callback);\n        } catch(ex) {\n            return callback(ex);\n        }        \n    }\n\n    async at(contractAddress, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.at, contractAddress);\n\n        try {\n            const contract = await this.tronWeb.trx.getContract(contractAddress);\n\n            if(!contract.contract_address)\n                callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            this.address = contract.contract_address;\n            this.bytecode = contract.bytecode;\n            this.deployed = true;\n\n            this.loadAbi(contract.abi.entrys);\n\n            callback(null, this);\n        } catch(ex) {\n            if(ex.toString().includes('does not exist'))\n                return callback('Contract has not been deployed on the network');\n\n            return callback(ex);\n        }        \n    }\n\n    events(callback = false) {\n        if(!utils.isFunction(callback))\n            throw new Error('Callback function expected');\n\n        const self = this;\n\n        return {\n            start(startCallback = false) {\n                if(!startCallback) {\n                    self._startEventListener(callback);\n                    return this;\n                }\n\n                self._startEventListener(callback).then(() => {\n                    startCallback();\n                }).catch(err => {\n                    startCallback(err)\n                });\n\n                return this;\n            },\n            stop() {\n                self._stopEventListener();\n            }\n        };\n    }\n}","import providers from 'lib/providers';\nimport utils from 'utils';\nimport axios from 'axios';\nimport BigNumber from 'bignumber.js';\nimport EventEmitter from 'eventemitter3';\n\nimport TransactionBuilder from 'lib/transactionBuilder';\nimport Trx from 'lib/trx';\nimport Witness from 'lib/witness';\nimport Contract from 'lib/contract';\n\nimport { keccak256 } from 'js-sha3';\n\nexport default class TronWeb extends EventEmitter {\n    static providers = providers;\n    static BigNumber = BigNumber;\n    \n    constructor(fullNode, solidityNode, eventServer = false, privateKey = false) {\n        super();\n\n        if(utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if(utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n        this.setEventServer(eventServer);\n        \n        this.providers = providers;\n        this.BigNumber = BigNumber;\n\n        this.defaultBlock = false;\n        this.defaultPrivateKey = false;\n        this.defaultAddress = {\n            hex: false,\n            base58: false\n        };\n        \n        [\n            'sha3', 'toHex', 'toUtf8', 'fromUtf8',\n            'toAscii', 'fromAscii', 'toDecimal', 'fromDecimal',\n            'toSun', 'fromSun', 'toBigNumber', 'isAddress',\n            'compile', 'createAccount', 'address'\n        ].forEach(key => {\n            this[key] = TronWeb[key];\n        });\n\n        if(privateKey)\n            this.setPrivateKey(privateKey);\n\n        this.transactionBuilder = new TransactionBuilder(this);\n        this.trx = new Trx(this);\n        this.witness = new Witness(this);\n        this.utils = utils;\n\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    setDefaultBlock(blockID = false) {\n        if(blockID === false || blockID == 'latest' || blockID == 'earliest' || blockID === 0)\n            return this.defaultBlock = blockID;\n\n        if(!utils.isInteger(blockID) || !blockID)\n            throw new Error('Invalid block ID provided');\n\n        this.defaultBlock = Math.abs(blockID);\n    }\n\n    setPrivateKey(privateKey) {\n        try {\n            this.setAddress(\n                this.address.fromPrivateKey(privateKey)\n            );\n        } catch {\n            throw new Error('Invalid private key provided');\n        }\n\n        this.defaultPrivateKey = privateKey;\n        this.emit('privateKeyChanged', privateKey);\n    }\n\n    setAddress(address) {\n        if(!this.isAddress(address))\n            throw new Error('Invalid address provided');\n\n        const hex = this.address.toHex(address);\n        const base58 = this.address.fromHex(address);\n\n        if(this.defaultPrivateKey && this.address.fromPrivateKey(this.defaultPrivateKey) !== base58)\n           this.defaultPrivateKey = false;\n\n        this.defaultAddress = {\n            hex,\n            base58\n        };\n\n        this.emit('addressChanged', { hex, base58 });\n    }\n\n    isValidProvider(provider) {\n        return Object.values(providers).some(knownProvider => provider instanceof knownProvider);\n    }\n\n    isEventServerConnected() {\n        if(!this.eventServer)\n            return false;\n\n        return axios.get(this.eventServer).then(({ data }) => {\n            return utils.hasProperty(data, '_links');\n        }).catch(() => false);\n    }\n\n    setFullNode(fullNode) {\n        if(utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if(!this.isValidProvider(fullNode))\n            throw new Error('Invalid full node provided');\n\n        this.fullNode = fullNode;\n        this.fullNode.setStatusPage('wallet/getnowblock');\n    }\n\n    setSolidityNode(solidityNode) {\n        if(utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if(!this.isValidProvider(solidityNode))\n            throw new Error('Invalid solidity node provided');\n\n        this.solidityNode = solidityNode;\n        this.solidityNode.setStatusPage('walletsolidity/getnowblock');\n    }\n\n    setEventServer(eventServer = false) {\n        if(eventServer !== false && !utils.isValidURL(eventServer))\n            throw new Error('Invalid URL provided for event server');\n\n        this.eventServer = eventServer;\n    }\n\n    currentProviders() {\n        return {\n            fullNode: this.fullNode,\n            solidityNode: this.solidityNode,\n            eventServer: this.eventServer\n        };\n    }\n\n    currentProvider() {\n        return this.currentProviders();\n    }\n\n    getEventResult(contractAddress = false, sinceTimestamp = 0, eventName = false, blockNumber = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getEventResult, contractAddress, sinceTimestamp, eventName, blockNumber);\n\n        if(!this.eventServer)\n            callback('No event server configured');\n\n        const routeParams = [];\n\n        if(!this.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if(eventName && !contractAddress)\n            return callback('Usage of event name filtering requires a contract address');\n        \n        if(blockNumber && !eventName)\n            return callback('Usage of block number filtering requires an event name');\n\n        if(contractAddress)\n            routeParams.push(this.address.fromHex(contractAddress));\n\n        if(eventName)\n            routeParams.push(eventName);\n\n        if(blockNumber)\n            routeParams.push(blockNumber);\n\n        return axios(`${this.eventServer}/event/contract/${routeParams.join('/')}?since=${sinceTimestamp}`).then(({ data = false }) => {\n            if(!data)\n                return callback('Unknown error occurred');\n\n            if(!utils.isArray(data))\n                return callback(data);\n\n            return callback(null, \n                data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err)); \n    }\n\n    getEventByTransacionID(transactionID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getEventByTransacionID, transactionID);\n\n        if(!this.eventServer)\n            callback('No event server configured');\n\n        return axios(`${this.eventServer}/event/transaction/${transactionID}`).then(({ data = false }) => {\n            if(!data)\n                return callback('Unknown error occurred');\n\n            if(!utils.isArray(data))\n                return callback(data);\n\n            return callback(null, \n                data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n    contract(abi = [], address = false) {\n        return new Contract(this, abi, address);\n    }\n\n    static get address() {\n        return {\n            fromHex(address) {\n                if(!utils.isHex(address))\n                    return address;\n\n                return utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address)\n                );\n            },\n            toHex(address) {\n                if(utils.isHex(address))\n                    return address.toLowerCase();\n\n                return utils.code.byteArray2hexStr(\n                    utils.crypto.decodeBase58Address(address)\n                ).toLowerCase();\n            },\n            fromPrivateKey(privateKey) {\n                try {\n                    return utils.crypto.pkToAddress(privateKey);\n                } catch { return false; }\n            }\n        }\n    }\n\n    static sha3(string, prefix = true) {\n        return (prefix ? '0x' : '') + keccak256(string);\n    }\n\n    static toHex(val) {\n        if(utils.isBoolean(val))\n            return TronWeb.fromDecimal(+val);\n\n        if(utils.isBigNumber(val))\n            return TronWeb.fromDecimal(val);\n\n        if(typeof val === 'object')\n            return TronWeb.fromUtf8(JSON.stringify(val));\n\n        if(utils.isString(val)) {\n            if (/^(-|)0x/.test(val))\n                return val;\n            // if(val.indexOf('-0x') === 0)\n            //     return TronWeb.fromDecimal(val); // << this returns val\n            //\n            // if(val.indexOf('0x') === 0)\n            //     return val;\n\n            if(!isFinite(val))\n                return TronWeb.fromUtf8(val);\n        }\n\n        return TronWeb.fromDecimal(val);\n    }\n\n    static toUtf8(hex) {\n        hex = hex.replace(/^0x/,'');\n        return Buffer.from(hex, 'hex').toString('utf8');\n    }\n\n    static fromUtf8(string) {\n        return '0x' + Buffer.from(string, 'utf8').toString('hex');\n    }\n\n    static toAscii(hex) {\n        hex = hex.replace(/^0x/,'');\n        return Buffer.from(hex, 'hex').toString('ascii');\n    }\n\n    static fromAscii(string, padding) {\n        return '0x' + Buffer.from(string, 'ascii').toString('hex').padEnd(padding, '0');\n    }\n\n    static toDecimal(value) {\n        return TronWeb.toBigNumber(value).toNumber();\n    }\n\n    static fromDecimal(value) {\n        const number = TronWeb.toBigNumber(value);\n        const result = number.toString(16);\n\n        return number.isLessThan(0) ? '-0x' + result.substr(1) : '0x' + result;\n    }\n\n    static fromSun(sun) {\n        const trx = TronWeb.toBigNumber(sun).div(1_000_000);        \n        return utils.isBigNumber(sun) ? trx : trx.toString(10);\n    }\n\n    static toSun(trx) {\n        const sun = TronWeb.toBigNumber(trx).times(1_000_000);        \n        return utils.isBigNumber(trx) ? sun : sun.toString(10);\n    }\n\n    static toBigNumber(amount = 0) {\n        if(utils.isBigNumber(amount))\n            return amount;\n\n        if(utils.isString(amount) && (amount.indexOf('0x') === 0 || amount.indexOf('-0x') === 0))\n            return new BigNumber(amount.replace('0x', ''), 16);\n\n        return new BigNumber(amount.toString(10), 10);\n    }\n\n    static isAddress(address = false) {\n        if(!utils.isString(address))\n            return false;\n\n        // Convert HEX to Base58\n        if(address.length === 42) {\n            return TronWeb.isAddress(\n                utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address)\n                )\n            );\n        }\n\n        return utils.crypto.isAddressValid(address);\n    }\n\n    // TODO\n    static compile(solditySource) {\n\n    }\n\n    static async createAccount(callback = false) {\n        const account = utils.accounts.generateAccount();\n\n        if(callback)\n            callback(null, account);\n\n        return account;\n    }\n\n    async isConnected(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.isConnected);\n\n        callback(null, {\n            fullNode: await this.fullNode.isConnected(),\n            solidityNode: await this.solidityNode.isConnected(),\n            eventServer: await this.isEventServerConnected()\n        });\n    }\n};\n"],"sourceRoot":""}