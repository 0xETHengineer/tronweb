{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@babel/runtime/helpers/asyncToGenerator\"","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///external \"@babel/runtime/helpers/objectSpread\"","webpack:///external \"ethers\"","webpack:///external \"@babel/runtime/helpers/toConsumableArray\"","webpack:///external \"bignumber.js\"","webpack:///external \"@babel/runtime/helpers/assertThisInitialized\"","webpack:///external \"@babel/runtime/helpers/slicedToArray\"","webpack:///external \"js-sha3\"","webpack:///external \"elliptic\"","webpack:///external \"@babel/runtime/helpers/defineProperty\"","webpack:///external \"@babel/runtime/helpers/typeof\"","webpack:///external \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack:///external \"@babel/runtime/helpers/getPrototypeOf\"","webpack:///external \"@babel/runtime/helpers/inherits\"","webpack:///external \"axios\"","webpack:///external \"jssha\"","webpack:///external \"validator\"","webpack:///external \"eventemitter3\"","webpack:///./src/utils/base64.js","webpack:///./src/utils/bytes.js","webpack:///./src/utils/address.js","webpack:///./src/utils/code.js","webpack:///./src/utils/base58.js","webpack:///./src/utils/crypto.js","webpack:///./src/utils/accounts.js","webpack:///./src/utils/abi.js","webpack:///./src/utils/index.js","webpack:///./src/lib/providers/index.js","webpack:///./src/lib/providers/HttpProvider.js","webpack:///./src/lib/transactionBuilder.js","webpack:///./src/lib/trx.js","webpack:///./src/lib/contract/method.js","webpack:///./src/lib/contract/index.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","Base64","_this","this","_keyStr","encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","length","charCodeAt","isNaN","charAt","encodeIgnoreUtf8","inputBytes","decode","replace","indexOf","String","fromCharCode","_utf8_decode","decodeToByteArray","_out2ByteArray","utftext","byteArray","Array","c1","c2","_utf8_encode","string","c3","byte2hexStr","byte","Error","str","bytesToString","arr","one","toString","v","match","bytesLength","store","slice","st","parseInt","hextoString","hex","split","out","tmp","concat","base64DecodeFromString","string64","byteArray2hexStr","base64EncodeToString","bytes","ADDRESS_SIZE","ADDRESS_PREFIX","ADDRESS_PREFIX_BYTE","bin2String","array","apply","toConsumableArray_default","arrayEquals","array1","array2","stringToBytes","len","push","hexChar2byte","isHexChar","hexStr2byteArray","j","k","strToDate","tempStrs","dateStrs","year","month","day","timeStrs","hour","minute","second","Date","isNumber","getStringType","ALPHABET","ALPHABET_MAP","base58_i","BASE","encode58","buffer","digits","carry","reverse","map","digit","join","decode58","getBase58CheckAddress","addressBytes","checkSum","SHA256","decodeBase58Address","base58Sting","address","offset","checkSum1","signTransaction","priKeyBytes","transaction","signature","ECKeySign","txID","arrayToBase64String","a","btoa","crypto_signBytes","privateKey","contents","getRowBytesFromTransactionBase64","base64Data","bytesDecode","proto","protocol","Transaction","deserializeBinary","getRawData","serializeBinary","genPriKey","priKeyHex","external_elliptic_","genKeyPair","getPrivate","computeAddress","pubBytes","hash","external_js_sha3_","substring","getAddressFromPriKey","getPubKeyFromPriKey","decode58Check","addressStr","decodeCheck","decodeData","hash1","isAddressValid","base58Str","getBase58CheckAddressFromPriKeyBase64String","priKeyBase64String","getHexStrAddressFromPriKeyBase64String","getAddressFromPriKeyBase64String","pubkey","keyFromPrivate","getPublic","x","y","xHex","yHex","hashBytes","sign","id","recoveryParam","rHex","sHex","msgBytes","shaObj","external_jssha_default","msgHex","update","getHash","passwordToAddress","password","pkToAddress","generateAccount","pubKeyBytes","publicKey","base58","abi_abiCoder","external_ethers_","AbiCoder","decodeParams","names","types","ignoreMethodHash","reduce","obj","arg","index","substr","toLowerCase","encodeParams","values","src_TronWeb","toHex","utils","isValidURL","url","external_validator_default","isURL","protocols","isObject","isArray","isJson","JSON","parse","ex","isBoolean","bool","isBigNumber","number","external_bignumber_js_default","constructor","isString","isFunction","isHex","test","isInteger","Number","hasProperty","hasProperties","_len","arguments","properties","_key","includes","injectPromise","func","_len2","args","_key2","Promise","resolve","reject","err","res","promiseInjector","scope","_this2","_len3","_key3","mapEvent","event","block","block_number","timestamp","block_timestamp","contract","contract_address","event_name","transaction_id","result","resourceNode","resource_Node","parseEvent","_ref","abi","inputs","type","_abi$index","padLeft","padding","amount","src_utils","objectSpread_default","code","code_namespaceObject","accounts","accounts_namespaceObject","base58_namespaceObject","bytes_namespaceObject","crypto","crypto_namespaceObject","abi_namespaceObject","providers","HttpProvider","host","timeout","undefined","user","headers","statusPage","classCallCheck_default","instance","external_axios_default","baseURL","auth","request","then","data","catch","payload","method","params","transactionBuilder_TransactionBuilder","TransactionBuilder","tronWeb","to","from","defaultAddress","callback","isAddress","fullNode","to_address","owner_address","sendTrx","tokenID","fromUtf8","asset_name","sendToken","issuerAddress","buyer","purchaseToken","duration","resource","frozen_balance","frozen_duration","freezeBalance","unfreezeBalance","withdrawBlockRewards","applyForSR","votes","voterAddress","vote","keys","invalid","entries","_ref2","slicedToArray_default","srAddress","voteCount","vote_address","vote_count","options","createSmartContract","_options$abi","_options$bytecode","bytecode","_options$feeLimit","feeLimit","_options$callValue","callValue","_options$userFeePerce","userFeePercentage","_options$parameters","parameters","_options$name","_unused","payable","some","constructorParams","find","it","abiCoder","fee_limit","call_value","consume_user_resource_percent","stringify","parameter","contractAddress","functionSelector","triggerSmartContract","_parameters$i","function_selector","message","toUtf8","_this3","createToken","_options$name2","_options$abbreviation","abbreviation","_options$description","description","_options$url","_options$totalSupply","totalSupply","_options$trxRatio","trxRatio","_options$tokenRatio","tokenRatio","_options$saleStart","saleStart","now","_options$saleEnd","saleEnd","_options$freeBandwidt","freeBandwidth","_options$freeBandwidt2","freeBandwidthLimit","_options$frozenAmount","frozenAmount","_options$frozenDurati","frozenDuration","abbr","total_supply","trx_num","num","start_time","end_time","free_asset_net_limit","public_free_asset_net_limit","frozen_supply","frozen_amount","frozen_days","accountName","account_name","updateAccount","_this4","updateToken","_options$description2","_options$url2","_options$freeBandwidt3","_options$freeBandwidt4","new_limit","new_public_limit","_this5","createProposal","_this6","proposalID","proposal_id","deleteProposal","_this7","hasApproval","is_add_approval","isApproval","voteProposal","tokenName","tokenBalance","trxBalance","ownerAddress","console","log","first_token_id","first_token_balance","second_token_id","second_token_balance","resources","createTRXExchange","_this8","exchangeID","tokenAmount","exchange_id","token_id","quant","injectExchangeTokens","_this9","withdrawExchangeTokens","_this10","tokenAmountSold","tokenAmountExpected","fromAscii","expected","tradeExchangeTokens","trx_Trx","Trx","token","getCurrentBlock","defaultBlock","getBlockByHash","getBlockByNumber","getBlock","blockHash","blockID","getBlockTransactionCount","_ref$transactions","transactions","_ref2$transactions","getTransactionFromBlock","transactionID","getTransaction","getConfirmedTransaction","solidityNode","getTransactionInfo","limit","getTransactionsRelated","getTransactionsToAddress","getTransactionsFromAddress","direction","tx","sort","b","raw_data","_context","t0","account","_ref3","getAccount","getBalance","_ref4","_ref4$balance","balance","getUnconfirmedAccount","getUnconfirmedBalance","_ref5","_ref5$balance","_ref6","_ref6$freeNetUsed","freeNetUsed","_ref6$freeNetLimit","freeNetLimit","_ref6$NetUsed","NetUsed","_ref6$NetLimit","NetLimit","getBandwidth","_ref7","_ref7$assetIssue","assetIssue","tokens","parseToken","getTokensIssuedByAddress","getTokenFromID","listNodes","_ref8","_ref8$nodes","nodes","_ref9","_ref9$address","port","start","end","startNum","endNum","_ref10","_ref10$block","getBlockRange","listSuperRepresentatives","_ref11","_ref11$witnesses","witnesses","_ref13","_ref13$assetIssue","_ref12","_ref12$assetIssue","listTokens","timeUntilNextVoteCycle","_ref14","_ref14$num","Math","floor","getContract","useTronHeader","verifyMessage","messageBytes","toUtf8Bytes","messageDigest","keccak256","recovered","recoverAddress","tronAddress","fromHex","defaultPrivateKey","signingKey","SigningKey","signDigest","signatureHex","_context3","fromPrivateKey","t1","signedTransaction","sendRawTransaction","sendTransaction","transactionBuilder","_context4","_context5","_context6","_context7","_context8","proposal","getProposal","listProposals","_ref15","_ref15$proposals","proposals","getChainParameters","_ref16","_ref16$chainParameter","chainParameter","getAccountResources","exchange","getExchangeByID","listExchanges","_ref17","_ref17$exchanges","exchanges","_ref18","_ref18$exchanges","getFunctionSelector","getParamTypes","method_decodeOutput","filter","method_Method","Method","outputs","sha3","defaultOptions","shouldPollResponse","forEach","methodArgs","_call","send","_send","watch","_watch","deployed","stateMutability","constant_result","trx","broadcast","checkResult","_callee2","decoded","_args2","regenerator_default","wrap","_context2","prev","next","abrupt","error","sent","setTimeout","resMessage","contractResult","stop","eventServer","listener","lastBlock","sinceTimestamp","getTime","getEvents","_callee4","events","_events$sort","_events$sort2","latestEvent","newEvents","getEventResult","RegExp","priorEvent","bindListener","clearInterval","setInterval","contract_Contract","Contract","eventListener","methods","methodInstances","props","loadAbi","eventCallback","_getEvents","__proto__","prop","methodCall","onMethod","methodName","inputData","decodeInput","new","at","entrys","self","startCallback","_startEventListener","_stopEventListener","TronWeb","possibleConstructorReturn_default","getPrototypeOf_default","setFullNode","setSolidityNode","setEventServer","BigNumber","setPrivateKey","assertThisInitialized_default","abs","setAddress","emit","provider","knownProvider","isValidProvider","setStatusPage","isConnected","currentProviders","eventName","blockNumber","routeParams","response","getEventByTransactionID","val","fromDecimal","typeof_default","isFinite","Buffer","padEnd","toBigNumber","toNumber","isLessThan","sun","div","times","_unused2","external_eventemitter3_default"],"mappings":"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","file":"TronWeb.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 21);\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","module.exports = require(\"@babel/runtime/helpers/objectSpread\");","module.exports = require(\"ethers\");","module.exports = require(\"@babel/runtime/helpers/toConsumableArray\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"@babel/runtime/helpers/assertThisInitialized\");","module.exports = require(\"@babel/runtime/helpers/slicedToArray\");","module.exports = require(\"js-sha3\");","module.exports = require(\"elliptic\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"@babel/runtime/helpers/typeof\");","module.exports = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"@babel/runtime/helpers/getPrototypeOf\");","module.exports = require(\"@babel/runtime/helpers/inherits\");","module.exports = require(\"axios\");","module.exports = require(\"jssha\");","module.exports = require(\"validator\");","module.exports = require(\"eventemitter3\");","export function Base64() {\n    this._keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n    this.encode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n        \n        while (i < input.length) {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.encodeIgnoreUtf8 = inputBytes => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n        \n        while (i < inputBytes.length) {\n            chr1 = inputBytes[i++];\n            chr2 = inputBytes[i++];\n            chr3 = inputBytes[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.decode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = _keyStr.indexOf(input.charAt(i++));\n            enc2 = _keyStr.indexOf(input.charAt(i++));\n            enc3 = _keyStr.indexOf(input.charAt(i++));\n            enc4 = _keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n                \n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n        \n        return this._utf8_decode(output);\n    }\n\n    this.decodeToByteArray = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = _keyStr.indexOf(input.charAt(i++));\n            enc2 = _keyStr.indexOf(input.charAt(i++));\n            enc3 = _keyStr.indexOf(input.charAt(i++));\n            enc4 = _keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n        \n        return this._out2ByteArray(output);\n    }\n\n    this._out2ByteArray = utftext => {\n        const byteArray = new Array(utftext.length);\n\n        let i = 0;\n        let c = c1 = c2 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n            byteArray[i] = c;\n            i++;\n        }\n\n        return byteArray;\n    }\n\n    this._utf8_encode = string => {\n        string = string.replace(/\\r\\n/g, \"\\n\");\n        let utftext = \"\";\n\n        for (let n = 0; n < string.length; n++) {\n            const c = string.charCodeAt(n);\n\n            if (c < 128) {\n                utftext += String.fromCharCode(c);\n            } else if ((c > 127) && (c < 2048)) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            } else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n        }\n\n        return utftext;\n    }\n\n    this._utf8_decode = utftext => {\n        let string = \"\";\n        let i = 0;\n        let c = c1 = c2 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n\n            if (c < 128) {\n                string += String.fromCharCode(c);\n                i++;\n            } else if ((c > 191) && (c < 224)) {\n                c2 = utftext.charCodeAt(i + 1);\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                i += 2;\n            } else {\n                c2 = utftext.charCodeAt(i + 1);\n                c3 = utftext.charCodeAt(i + 2);\n\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\n                i += 3;\n            }\n        }\n\n        return string;\n    }\n}","import { Base64 } from './base64';\n\nexport function byte2hexStr(byte) {\n    if (typeof byte !== 'number')\n        throw new Error('Input must be a number');\n\n    if (byte < 0 || byte > 255)\n        throw new Error('Input must be a byte');\n\n    const hexByteMap = '0123456789ABCDEF';\n\n    let str = '';\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n\n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length === 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else {\n            str += String.fromCharCode(arr[i]);\n        }\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.replace(/^0x/,'').split('');\n    let out = '';\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        let tmp = `0x${ arr[i * 2] }${ arr[i * 2 + 1] }`;\n        out += String.fromCharCode(tmp);\n    }\n\n    return out;\n}\n\nexport function base64DecodeFromString(string64) {\n    return new Base64().decodeToByteArray(string64);\n}\n\nexport function byteArray2hexStr(byteArray) {\n    let str = '';\n\n    for (let i = 0; i < (byteArray.length); i++)\n        str += byte2hexStr(byteArray[i]);\n        \n    return str;\n}\n\nexport function base64EncodeToString(bytes) {\n    const b = new Base64();\n    const string64 = b.encodeIgnoreUtf8(bytes);\n\n    return string64\n}\n\n","export const ADDRESS_SIZE = 34;\nexport const ADDRESS_PREFIX = \"41\";\nexport const ADDRESS_PREFIX_BYTE = 0x41;\n","import { Base64 } from './base64';\nimport { byte2hexStr, bytesToString, hextoString, byteArray2hexStr, base64DecodeFromString, base64EncodeToString } from './bytes';\n\nexport function bin2String(array) {\n    return String.fromCharCode(...array);\n}\n\nexport function arrayEquals(array1, array2) {\n    if (array1.length != array2.length)\n        return false;\n        \n    let i;\n\n    for (i = 0; i < array1.length; i++) {\n        if (array1[i] != array2[i])\n            return false;\n    }\n\n    return true;\n}\n\nexport function stringToBytes(str) {\n    const bytes = new Array();\n    let len;\n    let c;\n\n    len = str.length;\n\n    for (let i = 0; i < len; i++) {\n        c = str.charCodeAt(i);\n\n        if (c >= 0x010000 && c <= 0x10FFFF) {\n            bytes.push(((c >> 18) & 0x07) | 0xF0);\n            bytes.push(((c >> 12) & 0x3F) | 0x80);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000800 && c <= 0x00FFFF) {\n            bytes.push(((c >> 12) & 0x0F) | 0xE0);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000080 && c <= 0x0007FF) {\n            bytes.push(((c >> 6) & 0x1F) | 0xC0);\n            bytes.push((c & 0x3F) | 0x80);\n        } else bytes.push(c & 0xFF);\n    }\n\n    return bytes;\n}\n\nexport { byte2hexStr, bytesToString, hextoString, byteArray2hexStr, base64DecodeFromString, base64EncodeToString }\n\nexport function hexChar2byte(c) {\n    let d = 0;\n\n    if (c >= 'A' && c <= 'F')\n        d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    else if (c >= 'a' && c <= 'f')\n        d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10;\n    else if (c >= '0' && c <= '9')\n        d = c.charCodeAt(0) - '0'.charCodeAt(0);\n        \n    return d;\n}\n\nexport function isHexChar(c) {\n    if ((c >= 'A' && c <= 'F') ||\n        (c >= 'a' && c <= 'f') ||\n        (c >= '0' && c <= '9')) {\n        return 1;\n    }\n\n    return 0;\n}\n\nexport function hexStr2byteArray(str) {\n    const byteArray = Array();\n    let d = 0;\n    let j = 0;\n    let k = 0;\n\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charAt(i);\n\n        if (isHexChar(c)) {\n            d <<= 4;\n            d += hexChar2byte(c);\n            j++;\n\n            if (0 === (j % 2)) {\n                byteArray[k++] = d;\n                d = 0;\n            }\n        }\n    }\n\n    return byteArray;\n}\n\n//yyyy-MM-DD HH-mm-ss\nexport function strToDate(str) {\n    const tempStrs = str.split(\" \");\n    const dateStrs = tempStrs[0].split(\"-\");\n    const year = parseInt(dateStrs[0], 10);\n    const month = parseInt(dateStrs[1], 10) - 1;\n    const day = parseInt(dateStrs[2], 10);\n\n    if (tempStrs.length > 1) {\n        const timeStrs = tempStrs[1].split(\"-\");\n        const hour = parseInt(timeStrs[0], 10);\n        const minute = parseInt(timeStrs[1], 10) - 1;\n        const second = parseInt(timeStrs[2], 10);\n\n        return new Date(year, month, day, hour, minute, second);\n    }\n\n    return new Date(year, month, day);\n}\n\nexport function isNumber(c) {\n    if (c >= '0' && c <= '9')\n        return 1;\n        \n    return 0;\n}\n\n//return 1: address  --- 20Bytes HexString\n//return 2: blockNumber ------ Decimal number\n//return 3: assetName ------ String\n//return other: error\nexport function getStringType(str) {\n    if (null == str)\n        return -1;\n\n    if (typeof (str) != 'string')\n        return -1;\n\n    if (str.length == 0 || str == \"\")\n        return -1;\n\n    let i = 0;\n\n    if (str.length == 40) {\n        for (; i < 40; i++) {\n            var c = str.charAt(i);\n\n            if (!isHexChar(c))\n                break;\n        }\n    }\n\n    if (i == 40)\n        return 1; //40 Hex, Address\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (!isNumber(c))\n            break;\n    }\n\n    if (i == str.length)\n        return 2; //Alll Decimal number, BlockNumber\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (c > ' ')\n            return 3; //At least one visible character\n    }\n\n    return -1;\n}\n","const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nconst ALPHABET_MAP = {};\n\nfor (let i = 0; i < ALPHABET.length; i++)\n    ALPHABET_MAP[ALPHABET.charAt(i)] = i;\n\nconst BASE = 58;\n\nexport function encode58(buffer) {\n    if (buffer.length === 0)\n        return '';\n\n    let i;\n    let j;\n\n    const digits = [0];\n\n    for (i = 0; i < buffer.length; i++) {\n        for (j = 0; j < digits.length; j++) \n            digits[j] <<= 8;\n\n        digits[0] += buffer[i];\n        let carry = 0;\n\n        for (j = 0; j < digits.length; ++j) {\n            digits[j] += carry;\n            carry = (digits[j] / BASE) | 0;\n            digits[j] %= BASE\n        }\n\n        while (carry) {\n            digits.push(carry % BASE);\n            carry = (carry / BASE) | 0\n        }\n    }\n\n    for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++) \n        digits.push(0);\n\n    return digits.reverse().map(digit => ALPHABET[digit]).join('');\n}\n\nexport function decode58(string) {\n    if (string.length === 0)\n        return [];\n\n    let i;\n    let j;\n\n    const bytes = [0];\n\n    for (i = 0; i < string.length; i++) {\n        const c = string[i];\n\n        if (!(c in ALPHABET_MAP))\n            throw new Error('Non-base58 character');\n\n        for (j = 0; j < bytes.length; j++) \n            bytes[j] *= BASE;\n\n        bytes[0] += ALPHABET_MAP[c];\n        let carry = 0;\n\n        for (j = 0; j < bytes.length; ++j) {\n            bytes[j] += carry;\n            carry = bytes[j] >> 8;\n            bytes[j] &= 0xff;\n        }\n\n        while (carry) {\n            bytes.push(carry & 0xff);\n            carry >>= 8;\n        }\n    }\n\n    for (i = 0; string[i] === '1' && i < string.length - 1; i++)\n        bytes.push(0);\n\n    return bytes.reverse();\n}\n","import jsSHA from 'jssha';\n\nimport { ADDRESS_PREFIX, ADDRESS_PREFIX_BYTE, ADDRESS_SIZE } from './address';\nimport { base64EncodeToString } from './code';\nimport { base64DecodeFromString, hexStr2byteArray } from './code';\nimport { encode58, decode58 } from './base58';\nimport { keccak256 } from 'js-sha3';\nimport { byte2hexStr, byteArray2hexStr } from './bytes';\nimport { ec as EC } from 'elliptic';\n\nexport function getBase58CheckAddress(addressBytes) {\n    const hash0 = SHA256(addressBytes);\n    const hash1 = SHA256(hash0);\n\n    let checkSum = hash1.slice(0, 4);\n    checkSum = addressBytes.concat(checkSum);\n\n    return encode58(checkSum);\n}\n\nexport function decodeBase58Address(base58Sting) {\n    if (typeof (base58Sting) != 'string')\n        return false;\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    let address = decode58(base58Sting);\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    const len = address.length;\n    const offset = len - 4;\n    const checkSum = address.slice(offset);\n\n    address = address.slice(0, offset);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return address;\n    }\n\n    throw new Error('Invalid address provided');\n}\n\nexport function signTransaction(priKeyBytes, transaction) {\n    if (typeof priKeyBytes === 'string')\n        priKeyBytes = hexStr2byteArray(priKeyBytes);\n\n    const txID = transaction.txID;\n    const signature = ECKeySign(hexStr2byteArray(txID), priKeyBytes);\n\n    transaction.signature = [ signature ];\n    return transaction;\n}\n\nexport function arrayToBase64String(a) {\n    return btoa(String.fromCharCode(...a));\n}\n\nexport function signBytes(privateKey, contents) {\n    if (typeof privateKey === 'string')\n        privateKey = hexStr2byteArray(privateKey);\n\n    const hashBytes = SHA256(contents);\n    const signBytes = ECKeySign(hashBytes, privateKey);\n\n    return signBytes;\n}\n\nexport function getRowBytesFromTransactionBase64(base64Data) {\n    const bytesDecode = base64DecodeFromString(base64Data);\n    const transaction = proto.protocol.Transaction.deserializeBinary(bytesDecode);\n    const raw = transaction.getRawData();\n\n    return raw.serializeBinary();\n}\n\nexport function genPriKey() {\n    const ec = new EC('secp256k1');\n    const key = ec.genKeyPair();\n    const priKey = key.getPrivate();\n\n    let priKeyHex = priKey.toString('hex');\n\n    while (priKeyHex.length < 64) {\n        priKeyHex = `0${priKeyHex}`;\n    }\n\n    return hexStr2byteArray(priKeyHex);\n}\n\nexport function computeAddress(pubBytes) {\n    if (pubBytes.length === 65)\n        pubBytes = pubBytes.slice(1);\n\n    const hash = keccak256(pubBytes).toString();\n    const addressHex = ADDRESS_PREFIX + hash.substring(24);\n\n    return hexStr2byteArray(addressHex);\n}\n\nexport function getAddressFromPriKey(priKeyBytes) {\n    let pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    return computeAddress(pubBytes);\n}\n\nexport function decode58Check(addressStr) {\n    const decodeCheck = decode58(addressStr);\n\n    if (decodeCheck.length <= 4)\n        return false;\n\n    const decodeData = decodeCheck.slice(0, decodeCheck.length - 4);\n    const hash0 = SHA256(decodeData);\n    const hash1 = SHA256(hash0);\n\n    if (hash1[0] === decodeCheck[decodeData.length] &&\n        hash1[1] === decodeCheck[decodeData.length + 1] &&\n        hash1[2] === decodeCheck[decodeData.length + 2] &&\n        hash1[3] === decodeCheck[decodeData.length + 3]) {\n        return decodeData;\n    }\n\n    return false;\n}\n\nexport function isAddressValid(base58Str) {\n    if (typeof (base58Str) !== 'string')\n        return false;\n        \n    if (base58Str.length !== ADDRESS_SIZE)\n        return false;\n\n    let address = decode58(base58Str);\n\n    if (address.length !== 25)\n        return false;\n        \n    if (address[0] !== ADDRESS_PREFIX_BYTE)\n        return false;\n        \n    const checkSum = address.slice(21);\n    address = address.slice(0, 21);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return true\n    }\n\n    return false;\n}\n\nexport function getBase58CheckAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n\n    return getBase58CheckAddress(addressBytes);\n}\n\nexport function getHexStrAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressHex = byteArray2hexStr(addressBytes);\n\n    return addressHex;\n}\n\nexport function getAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressBase64 = base64EncodeToString(addressBytes);\n\n    return addressBase64;\n}\n\nexport function getPubKeyFromPriKey(priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const pubkey = key.getPublic();\n    const x = pubkey.x;\n    const y = pubkey.y;\n\n    let xHex = x.toString('hex');\n\n    while (xHex.length < 64) {\n        xHex = `0${xHex}`;\n    }\n\n    let yHex = y.toString('hex');\n\n    while (yHex.length < 64) {\n        yHex = `0${yHex}`;\n    }\n\n    const pubkeyHex = `04${xHex}${yHex}`;\n    const pubkeyBytes = hexStr2byteArray(pubkeyHex);\n\n    return pubkeyBytes;\n}\n\nexport function ECKeySign(hashBytes, priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const signature = key.sign(hashBytes);\n    const r = signature.r;\n    const s = signature.s;\n    const id = signature.recoveryParam;\n\n    let rHex = r.toString('hex');\n\n    while (rHex.length < 64) {\n        rHex = `0${rHex}`;\n    }\n\n    let sHex = s.toString('hex');\n\n    while (sHex.length < 64) {\n        sHex = `0${sHex}`;\n    }\n\n    const idHex = byte2hexStr(id);\n    const signHex = rHex + sHex + idHex;\n\n    return signHex;\n}\n\nexport function SHA256(msgBytes) {\n    const shaObj = new jsSHA('SHA-256', 'HEX');\n    const msgHex = byteArray2hexStr(msgBytes);\n\n    shaObj.update(msgHex);\n    const hashHex = shaObj.getHash('HEX');\n\n    return hexStr2byteArray(hashHex);\n}\n\nexport function passwordToAddress(password) {\n    const com_priKeyBytes = base64DecodeFromString(password);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n\nexport function pkToAddress(privateKey) {\n    const com_priKeyBytes = hexStr2byteArray(privateKey);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n","import { byteArray2hexStr } from './bytes';\nimport { \n    getBase58CheckAddress,\n    genPriKey,\n    getAddressFromPriKey,\n    getPubKeyFromPriKey\n} from './crypto';\n\nexport function generateAccount() {\n    const priKeyBytes = genPriKey();\n    const pubKeyBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = getAddressFromPriKey(priKeyBytes);\n    \n    const privateKey = byteArray2hexStr(priKeyBytes);\n    const publicKey = byteArray2hexStr(pubKeyBytes);\n\n    return {\n        privateKey,\n        publicKey,\n        address: {\n            base58: getBase58CheckAddress(addressBytes),\n            hex: byteArray2hexStr(addressBytes)\n        }\n    }\n}","import * as Ethers from 'ethers';\nimport TronWeb from 'index';\n\nconst abiCoder = new Ethers.utils.AbiCoder();\n\nexport function decodeParams(names, types, output, ignoreMethodHash) {\n\n    if (!output || typeof output === 'boolean') {\n        ignoreMethodHash = output;\n        output = types;\n        types = names;\n        names = [];\n    }\n\n    if (ignoreMethodHash && output.replace(/^0x/,'').length % 64 === 8)\n        output = '0x' + output.replace(/^0x/,'').substring(8);\n\n    if (output.replace(/^0x/,'').length % 64)\n        throw new Error('The encoded string is not valid. Its length must be a multiple of 64.');\n\n    return abiCoder.decode(types, output).reduce((obj, arg, index) => {\n        if(types[index] == 'address')\n            arg = '41' + arg.substr(2).toLowerCase();\n\n        if(names.length)\n            obj[names[index]] = arg;\n        else obj.push(arg);\n\n        return obj;\n    }, names.length ? {} : []);\n}\n\nexport function encodeParams(types, values) {\n\n    for (let i =0;i<types.length;i++) {\n        if (types[i] === 'address') {\n            values[i] =  TronWeb.address.toHex(values[i]).replace(/^41/, '0x');\n        }\n    }\n\n    return abiCoder.encode(types, values);\n}\n","import * as accounts from './accounts';\nimport * as base58 from './base58';\nimport * as bytes from './bytes';\nimport * as crypto from './crypto';\nimport * as code from './code';\nimport * as abi from './abi';\n\nimport validator from 'validator';\nimport BigNumber from 'bignumber.js';\n\nconst utils = {\n    isValidURL(url) {\n        return validator.isURL(url.toString(), {\n            protocols: [ 'http', 'https' ]\n        });\n    },\n\n    isObject(obj) {\n        return obj === Object(obj) && Object.prototype.toString.call(obj) !== '[object Array]';\n    },\n\n    isArray(array) {\n        return Array.isArray(array);\n    },\n\n    isJson(string) {\n        try {\n            return !!JSON.parse(string);\n        } catch (ex) {\n            return false;\n        }\n    },\n\n    isBoolean(bool) {\n        return typeof bool === 'boolean';\n    },\n\n    isBigNumber(number) {\n        return number && (number instanceof BigNumber || (number.constructor && number.constructor.name === 'BigNumber'));\n    },\n\n    isString(string) {\n        return typeof string === 'string' || (string && string.constructor && string.constructor.name === 'String');\n    },\n\n    isFunction(obj) {\n        return typeof obj === 'function';\n    },\n\n    isHex(string) {\n        return (typeof string === 'string'\n            && !isNaN(parseInt(string, 16))\n            && /^(0x|)[a-fA-F0-9]+$/.test(string));\n    },\n\n    isInteger(number) {\n        return Number.isInteger(\n            Number(number)\n        );\n    },\n\n    hasProperty(obj, property) {\n        return Object.prototype.hasOwnProperty.call(obj, property);\n    },\n\n    hasProperties(obj, ...properties) {\n        return properties.length && !properties.map(property => {\n            return this.hasProperty(obj, property)\n        }).includes(false);\n    },\n\n    injectPromise(func, ...args) {\n        return new Promise((resolve, reject) => {\n            func(...args, (err, res) => {\n                if(err)\n                    reject(err);\n                else resolve(res);\n            });\n        });\n    },\n\n    promiseInjector(scope) {\n        return (func, ...args) => {\n            return this.injectPromise(func.bind(scope), ...args);\n        }\n    },\n\n    mapEvent(event) {\n        return {\n            block: event.block_number,\n            timestamp: event.block_timestamp,\n            contract: event.contract_address,\n            name: event.event_name,\n            transaction: event.transaction_id,\n            result: event.result,\n            resourceNode: event.resource_Node\n        };\n    },\n\n    parseEvent(event, { inputs: abi }) {\n        if(!event.result)\n            return event;\n\n        if (this.isObject(event.result)) {\n            for (var i = 0; i < abi.length; i++) {\n                let obj = abi[i];\n                if (obj.type == 'address' && obj.name in event.result)\n                    event.result[obj.name] = '41' + event.result[obj.name].substr(2).toLowerCase();\n            }\n        } else if (this.isArray(event.result)) {\n            event.result = event.result.reduce((obj, result, index) => {\n                const {\n                    name,\n                    type\n                } = abi[index];\n\n                if(type == 'address')\n                    result = '41' + result.substr(2).toLowerCase();\n\n                obj[name] = result;\n\n                return obj;\n            }, {});\n        }\n\n        return event;\n    },\n\n    padLeft(input, padding, amount) {\n        let res = input.toString();\n\n        while(res.length < amount)\n            res = padding + res;\n\n        return res;\n    }\n}\n\nexport default {\n    ...utils,\n    code,\n    accounts,\n    base58,\n    bytes,\n    crypto,\n    abi\n};\n","import HttpProvider from './HttpProvider';\n\nexport default {\n    HttpProvider\n};","import axios from 'axios';\nimport utils from 'utils';\n\nexport default class HttpProvider {\n    constructor(host, timeout = 30000, user = false, password = false, headers = {}, statusPage = '/') {\n        if(!utils.isValidURL(host))\n            throw new Error('Invalid URL provided to HttpProvider');\n\n        if(isNaN(timeout) || timeout < 0)\n            throw new Error('Invalid timeout duration provided');\n\n        if(!utils.isObject(headers))\n            throw new Error('Invalid headers object provided');\n\n        host = host.replace(/\\/+$/,'');\n\n        this.host = host;\n        this.timeout = timeout;\n        this.user = user;\n        this.password = password;\n        this.headers = headers;\n        this.statusPage = statusPage;\n\n        this.instance = axios.create({\n            baseURL: host,\n            timeout: timeout,\n            headers: headers,\n            auth: user && {\n                user,\n                password\n            },\n        });\n    }\n\n    setStatusPage(statusPage = '/') {\n        this.statusPage = statusPage;\n    }\n\n    async isConnected(statusPage = this.statusPage) {\n        return this.request(statusPage).then(data => {\n            return utils.hasProperties(data, 'blockID', 'block_header');\n        }).catch(() => false);\n    }\n\n    request(url, payload = {}, method = 'get') {\n        method = method.toLowerCase();\n\n        return this.instance.request({\n            data: method == 'post' && payload,\n            params: method =='get' && payload,\n            url,\n            method\n        }).then(({ data }) => data);\n    }\n};\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport * as Ethers from 'ethers';\n\nexport default class TransactionBuilder {\n    constructor(tronWeb = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    sendTrx(to = false, amount = 0, from = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.sendTrx, to, amount, from);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!this.tronWeb.isAddress(from))\n            return callback('Invalid origin address provided');\n\n        to = this.tronWeb.address.toHex(to);\n        from = this.tronWeb.address.toHex(from);\n\n        if(to === from)\n            return callback('Cannot transfer TRX to the same account');\n\n        this.tronWeb.fullNode.request('wallet/createtransaction', {\n            to_address: to,\n            owner_address: from,\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    sendToken(to = false, amount = 0, tokenID = false, from = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, from);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if(!this.tronWeb.isAddress(from))\n            return callback('Invalid origin address provided');\n\n        to = this.tronWeb.address.toHex(to);\n        tokenID = this.tronWeb.fromUtf8(tokenID);\n        from = this.tronWeb.address.toHex(from);\n\n        if(to === from)\n            return callback('Cannot transfer tokens to the same account');\n\n        this.tronWeb.fullNode.request('wallet/transferasset', {\n            to_address: to,\n            owner_address: from,\n            asset_name: tokenID,\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    purchaseToken(issuerAddress = false, tokenID = false, amount = 0, buyer = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(buyer)) {\n            callback = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.purchaseToken, issuerAddress, tokenID, amount, buyer);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!this.tronWeb.isAddress(buyer))\n            return callback('Invalid buyer address provided');\n\n        this.tronWeb.fullNode.request('wallet/participateassetissue', {\n            to_address: this.tronWeb.address.toHex(issuerAddress),\n            owner_address: this.tronWeb.address.toHex(buyer),\n            asset_name: this.tronWeb.fromUtf8(tokenID),\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, callback = false)\n    {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if(!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, address);\n\n        if(![ 'BANDWIDTH', 'ENERGY' ].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isInteger(duration) || duration < 3)\n            return callback('Invalid duration provided, minimum of 3 days');\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/freezebalance', {\n            owner_address: this.tronWeb.address.toHex(address),\n            frozen_balance: parseInt(amount),\n            frozen_duration: parseInt(duration),\n            resource: resource\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    unfreezeBalance(resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, callback = false)\n    {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if(!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, address);\n\n        if(![ 'BANDWIDTH', 'ENERGY' ].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/unfreezebalance', {\n            owner_address: this.tronWeb.address.toHex(address),\n            resource: resource\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    withdrawBlockRewards(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.withdrawBlockRewards, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n        \n        this.tronWeb.fullNode.request('wallet/withdrawbalance', {\n            owner_address: this.tronWeb.address.toHex(address)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    applyForSR(address = this.tronWeb.defaultAddress.hex, url = false, callback = false) {\n        if(utils.isValidURL(address)) {\n            callback = url || false;\n            url = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.applyForSR, address, url);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isValidURL(url))\n            return callback('Invalid url provided');\n        \n        this.tronWeb.fullNode.request('wallet/createwitness', {\n            owner_address: this.tronWeb.address.toHex(address),\n            url: this.tronWeb.fromUtf8(url)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    vote(votes = {}, voterAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.vote, votes, voterAddress);\n\n        if(!utils.isObject(votes) || !Object.keys(votes).length)\n            return callback('Invalid votes object provided');\n\n        if(!this.tronWeb.isAddress(voterAddress))\n            return callback('Invalid voter address provided');\n\n        let invalid = false;\n\n        votes = Object.entries(votes).map(([ srAddress, voteCount ]) => {\n            if(invalid)\n                return;\n\n            if(!this.tronWeb.isAddress(srAddress)) {\n                callback('Invalid SR address provided: ' + srAddress);\n                return invalid = true;\n            }\n\n            if(!utils.isInteger(voteCount) || voteCount <= 0) {\n                callback('Invalid vote count provided for SR: ' + srAddress);\n                return invalid = true;\n            }\n\n            return {\n                vote_address: this.tronWeb.address.toHex(srAddress),\n                vote_count: parseInt(voteCount)\n            };\n        });\n\n        if(invalid)\n            return;\n\n        this.tronWeb.fullNode.request('wallet/votewitnessaccount', {\n            owner_address: this.tronWeb.address.toHex(voterAddress),\n            votes\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    createSmartContract(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.createSmartContract, options, issuerAddress);\n\n        let {\n            abi = false,\n            bytecode = false,\n            feeLimit = 1_000_000_000,\n            callValue = 0,\n            userFeePercentage = 0,\n            parameters = [],\n            name = \"\",\n        } = options;\n        \n\n        if(abi && utils.isString(abi)) {\n            try {\n                abi = JSON.parse(abi);\n            } catch{\n                return callback('Invalid options.abi provided');\n            }\n        }\n\n        if(!utils.isArray(abi))\n            return callback('Invalid options.abi provided');\n\n\n        const payable = abi.some(func => {\n            return func.type == 'constructor' && func.payable;\n        });\n\n        if(!utils.isHex(bytecode))\n            return callback('Invalid options.bytecode provided');\n\n        if(!utils.isInteger(feeLimit) || feeLimit <= 0 || feeLimit > 1_000_000_000)\n            return callback('Invalid options.feeLimit provided');\n\n        if(!utils.isInteger(callValue) || callValue < 0)\n            return callback('Invalid options.callValue provided');\n\n        if(payable && callValue == 0)\n            return callback('When contract is payable, options.callValue must be a positive integer');\n\n        if(!payable && callValue > 0)\n            return callback('When contract is not payable, options.callValue must be 0');\n\n        if(!utils.isInteger(userFeePercentage) || userFeePercentage < 0 || userFeePercentage > 100)\n            return callback('Invalid options.userFeePercentage provided');\n\n        if(!utils.isArray(parameters))\n            return callback('Invalid parameters provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        var constructorParams = abi.find(\n            (it) => {\n                return it.type === 'constructor';\n            }\n        );\n\n        if(typeof constructorParams !== 'undefined' && constructorParams) {\n            const abiCoder = new Ethers.utils.AbiCoder();\n            const types = [];\n            const values = [];\n            constructorParams = constructorParams.inputs;\n\n            if(parameters.length != constructorParams.length)\n                return callback(`constructor needs ${constructorParams.length} but ${parameters.length} provided`);\n\n            for(let i = 0; i < parameters.length; i++) {\n                let type = constructorParams[i].type;\n                let value = parameters[i];\n\n                if(!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if(type == 'address')\n                    value = this.tronWeb.address.toHex(value).replace(/^(41)/, '0x');\n                    \n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        this.tronWeb.fullNode.request('wallet/deploycontract', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            consume_user_resource_percent: userFeePercentage,\n            abi: JSON.stringify(abi),\n            bytecode,\n            parameter: parameters,\n            name\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    triggerSmartContract(\n        contractAddress, \n        functionSelector,\n        feeLimit = 1_000_000_000,\n        callValue = 0,\n        parameters = [], \n        issuerAddress = this.tronWeb.defaultAddress.hex, \n        callback = false\n    ) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(parameters)) {\n            callback = parameters;\n            parameters = [];\n        }\n\n        if(utils.isFunction(callValue)) {\n            callback = callValue;\n            callValue = 0;\n        }\n\n        if(utils.isFunction(feeLimit)) {\n            callback = feeLimit;\n            feeLimit = 1_000_000_000;\n        }\n\n        if(!callback) {\n            return this.injectPromise(\n                this.triggerSmartContract, \n                contractAddress, \n                functionSelector, \n                feeLimit,\n                callValue, \n                parameters,\n                issuerAddress\n            );\n        }\n\n        if(!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if(!utils.isString(functionSelector) || !functionSelector.length)\n            return callback('Invalid function selector provided');\n\n        if(!utils.isInteger(callValue) || callValue < 0)\n            return callback('Invalid call value provided');\n\n        if(!utils.isInteger(feeLimit) || feeLimit <= 0 || feeLimit > 1_000_000_000)\n            return callback('Invalid fee limit provided');\n\n        if(!utils.isArray(parameters))\n            return callback('Invalid parameters provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        functionSelector = functionSelector.replace('/\\s*/g', '');\n\n        if(parameters.length) {\n            const abiCoder = new Ethers.utils.AbiCoder();\n            const types = [];\n            const values = [];\n\n            for(let i = 0; i < parameters.length; i++) {\n                let { type, value } = parameters[i];\n\n                if(!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if(type == 'address')\n                    value = this.tronWeb.address.toHex(value).replace(/^(41)/, '0x');\n                    \n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        this.tronWeb.fullNode.request('wallet/triggersmartcontract', {\n            contract_address: this.tronWeb.address.toHex(contractAddress),\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            function_selector: functionSelector,\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            parameter: parameters\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            if(!transaction.result.result)\n                return callback(transaction);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    createToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.createToken, options, issuerAddress);\n\n        const {\n            name = false,\n            abbreviation = false,\n            description = false,\n            url = false,\n            totalSupply = 0,\n            trxRatio = 1, // How much TRX will `tokenRatio` cost?\n            tokenRatio = 1, // How many tokens will `trxRatio` afford?\n            saleStart = Date.now(),\n            saleEnd = false,            \n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0, // Out of `totalFreeBandwidth`, the amount each token holder get\n            frozenAmount = 0,\n            frozenDuration = 0\n        } = options;\n\n        if(!utils.isString(name) || !name.length)\n            return callback('Invalid token name provided');\n\n        if(!utils.isString(abbreviation) || !abbreviation.length)\n            return callback('Invalid token abbreviation provided');\n\n        if(!utils.isInteger(totalSupply) || totalSupply <= 0)\n            return callback('Invalid supply amount provided');\n\n        if(!utils.isInteger(trxRatio) || trxRatio <= 0)\n            return callback('TRX ratio must be a positive integer');\n\n        if(!utils.isInteger(tokenRatio) || tokenRatio <= 0)\n            return callback('Token ratio must be a positive integer');\n\n        if(!utils.isInteger(saleStart) || saleStart < Date.now())\n            return callback('Invalid sale start timestamp provided');\n\n        if(!utils.isInteger(saleEnd) || saleEnd <= saleStart)\n            return callback('Invalid sale end timestamp provided');\n\n        if(!utils.isString(description) || !description.length)\n            return callback('Invalid token description provided');\n\n        if(!utils.isString(url) || !url.length || !utils.isValidURL(url))\n            return callback('Invalid token url provided');\n\n        if(!utils.isInteger(freeBandwidth) || freeBandwidth < 0)\n            return callback('Invalid free bandwidth amount provided');\n\n        if(!utils.isInteger(freeBandwidthLimit) || freeBandwidthLimit < 0 || (freeBandwidth && !freeBandwidthLimit))\n            return callback('Invalid free bandwidth limit provided');\n\n        if(!utils.isInteger(frozenAmount) || frozenAmount < 0 || (!frozenDuration && frozenAmount))\n            return callback('Invalid frozen supply provided');\n\n        if(!utils.isInteger(frozenDuration) || frozenDuration < 0 || (frozenDuration && !frozenAmount))\n            return callback('Invalid frozen duration provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        this.tronWeb.fullNode.request('wallet/createassetissue', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            name: this.tronWeb.fromUtf8(name),\n            abbr: this.tronWeb.fromUtf8(abbreviation),\n            description: this.tronWeb.fromUtf8(description),\n            url: this.tronWeb.fromUtf8(url),\n            total_supply: parseInt(totalSupply),\n            trx_num: parseInt(trxRatio),\n            num: parseInt(tokenRatio),\n            start_time: parseInt(saleStart),\n            end_time: parseInt(saleEnd),\n            free_asset_net_limit: parseInt(freeBandwidth),\n            public_free_asset_net_limit: parseInt(freeBandwidthLimit),\n            frozen_supply: {\n                frozen_amount: parseInt(frozenAmount),\n                frozen_days: parseInt(frozenDuration)\n            }\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    updateAccount(accountName = false, address = this.tronWeb.defaultAddress.hex, callback = false)\n    {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback) {\n            return this.injectPromise(this.updateAccount, accountName, address);\n        }\n\n        if (!utils.isString(accountName) || !accountName.length) {\n            return callback('Name must be a string');\n        }\n\n        if(!this.tronWeb.isAddress(address)) {\n            return callback('Invalid origin address provided');\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateaccount', {\n            account_name: this.tronWeb.fromUtf8(accountName),\n            owner_address: this.tronWeb.address.toHex(address),\n        }, 'post').then(transaction => {\n\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    updateToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.updateToken, options, issuerAddress);\n\n        const {\n            description = false,\n            url = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0 // Out of `totalFreeBandwidth`, the amount each token holder get\n        } = options;\n\n        if(!utils.isInteger(freeBandwidth) || freeBandwidth < 0)\n            return callback('Invalid free bandwidth amount provided');\n\n        if(!utils.isInteger(freeBandwidthLimit) || freeBandwidthLimit < 0 || (freeBandwidth && !freeBandwidthLimit))\n            return callback('Invalid free bandwidth limit provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        this.tronWeb.fullNode.request('wallet/updateasset', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            description: this.tronWeb.fromUtf8(description),\n            url: this.tronWeb.fromUtf8(url),\n            new_limit: parseInt(freeBandwidth),\n            new_public_limit: parseInt(freeBandwidthLimit)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    purchaseAsset(...args) {\n        return this.purchaseToken(...args);\n    }\n\n    createAsset(...args) {\n        return this.createToken(...args);\n    }\n\n    updateAsset(...args) {\n        return this.updateToken(...args);\n    }\n\n    /**\n     * Creates a proposal to modify the network.\n     * Can only be created by a current Super Representative.\n     */\n    createProposal(parameters = false, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!parameters)\n            return callback('Invalid proposal parameters provided');\n\n        if(!callback)\n            return this.injectPromise(this.createProposal, parameters, issuerAddress);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuerAddress provided');\n\n        if(!utils.isObject(parameters))\n            return callback('Invalid parameters provided');\n\n        this.tronWeb.fullNode.request('wallet/proposalcreate', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            parameters: parameters\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Deletes a network modification proposal that the owner issued.\n     * Only current Super Representative can vote on a proposal.\n     */\n    deleteProposal(proposalID = false, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.deleteProposal, proposalID, issuerAddress);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuerAddress provided');\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/proposaldelete', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            proposal_id: parseInt(proposalID)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds a vote to an issued network modification proposal.\n     * Only current Super Representative can vote on a proposal.\n     */\n    voteProposal(proposalID = false, hasApproval = false, voterAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.voteProposal, proposalID, hasApproval, voterAddress);\n\n        if(!this.tronWeb.isAddress(voterAddress))\n            return callback('Invalid voterAddress address provided');\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        if(!utils.isBoolean(hasApproval))\n            return callback('Invalid hasApproval provided');\n\n        this.tronWeb.fullNode.request('wallet/proposalapprove', {\n            owner_address: this.tronWeb.address.toHex(voterAddress),\n            proposal_id: parseInt(proposalID),\n            is_add_approval: isApproval.toString()\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between a token and TRX.\n     * Token Name should be a CASE SENSITIVE string. \n     * PLEASE VERIFY THIS ON TRONSCAN.\n     */\n    createTRXExchange(tokenName, tokenBalance, trxBalance, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createTRXExchange, tokenName, tokenBalance, trxBalance, ownerAddress);\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid address provided');\n\n        if (!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if (!utils.isInteger(tokenBalance) || tokenBalance <= 0\n            || !utils.isInteger(trxBalance) || trxBalance <= 0)\n            return callback('Invalid amount provided');\n\n        console.log({\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            first_token_id: this.tronWeb.fromUtf8(tokenName),\n            first_token_balance: tokenBalance,\n            second_token_id: '5f', // Constant for TRX.\n            second_token_balance: trxBalance\n        })\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            first_token_id: this.tronWeb.fromUtf8(tokenName),\n            first_token_balance: tokenBalance,\n            second_token_id: '5f', // Constant for TRX.\n            second_token_balance: trxBalance\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds tokens into a bancor style exchange.\n     */\n    injectExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.injectExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmount) || tokenAmount < 1)\n            return callback('Invalid tokenAmount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangeinject', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromUtf8(tokenName),\n            quant:parseInt(tokenAmount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Withdraws tokens from a bancor style exchange.\n     */\n    withdrawExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.withdrawExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmount) || tokenAmount < 1)\n            return callback('Invalid tokenAmount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangewithdraw', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromUtf8(tokenName),\n            quant:parseInt(tokenAmount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Trade tokens on a bancor style exchange.\n     */\n    tradeExchangeTokens(exchangeID = false, \n        tokenName = false, \n        tokenAmountSold = 0, \n        tokenAmountExpected = 0, \n        ownerAddress = this.tronWeb.defaultAddress.hex, \n        callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.tradeExchangeTokens, exchangeID, tokenName, tokenAmountSold, tokenAmountExpected, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmountSold) || tokenAmountSold < 1)\n            return callback('Invalid tokenAmountSold provided');\n\n        if(!utils.isInteger(tokenAmountExpected) || tokenAmountExpected < 1)\n            return callback('Invalid tokenAmountExpected provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangewithdraw', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant:parseInt(tokenAmountSold),\n            expected:parseInt(tokenAmountExpected)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport * as Ethers from 'ethers';\n\nconst TRX_MESSAGE_HEADER = '\\x19TRON Signed Message:\\n32';\nconst ETH_MESSAGE_HEADER = '\\x19Ethereum Signed Message:\\n32';\n\nexport default class Trx {\n    constructor(tronWeb = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    parseToken(token) {\n        return {\n            ...token,\n            name: this.tronWeb.toUtf8(token.name),\n            abbr: token.abbr && this.tronWeb.toUtf8(token.abbr),\n            description: token.description && this.tronWeb.toUtf8(token.description),\n            url: token.url && this.tronWeb.toUtf8(token.url)\n        };\n    }\n\n    getCurrentBlock(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getCurrentBlock);\n\n        this.tronWeb.fullNode.request('wallet/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlock(block = this.tronWeb.defaultBlock, callback = false) {\n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlock, block);\n\n        if(block === false)\n            return callback('No block identifier provided');\n\n        if(block == 'earliest')\n            block = 0;\n\n        if(block == 'latest')\n            return this.getCurrentBlock(callback);\n\n        if(isNaN(block) && utils.isHex(block))\n            return this.getBlockByHash(block, callback);\n\n        this.getBlockByNumber(block, callback);\n    }\n\n    getBlockByHash(blockHash, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getBlockByHash, blockHash);\n\n        this.tronWeb.fullNode.request('wallet/getblockbyid', { \n            value: blockHash \n        }, 'post').then(block => {\n            if(!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockByNumber(blockID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getBlockByNumber, blockID);\n\n        if(!utils.isInteger(blockID) || blockID < 0)\n            return callback('Invalid block number provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbynum', { \n            num: parseInt(blockID) \n        }, 'post').then(block => {\n            if(!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockTransactionCount(block = this.tronWeb.defaultBlock, callback = false) {\n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlockTransactionCount, block);\n\n        this.getBlock(block).then(({ transactions = [] }) => {\n            callback(null, transactions.length);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionFromBlock(block = this.tronWeb.defaultBlock, index = 0, callback = false) {\n        if(utils.isFunction(index)) {\n            callback = index;\n            index = 0;\n        }\n        \n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionFromBlock, block, index);\n\n        if(!utils.isInteger(index) || index < 0)\n            return callback('Invalid transaction index provided');\n\n        this.getBlock(block).then(({ transactions = false }) => {\n            if(!transactions || transactions.length < index)\n                return callback('Transaction not found in block');\n\n            callback(null, transactions[index]);\n        }).catch(err => callback(err));\n    }\n\n    getTransaction(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTransaction, transactionID);\n\n        this.tronWeb.fullNode.request('wallet/gettransactionbyid', { \n            value: transactionID \n        }, 'post').then(transaction => {\n            if(!Object.keys(transaction).length)\n                return callback('Transaction not found');\n                \n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getConfirmedTransaction(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getConfirmedTransaction, transactionID);\n\n        this.tronWeb.solidityNode.request('walletsolidity/gettransactionbyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            if(!Object.keys(transaction).length)\n                return callback('Transaction not found');\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionInfo(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTransactionInfo, transactionID);\n\n        this.tronWeb.solidityNode.request('walletsolidity/gettransactioninfobyid', { \n            value: transactionID \n        }, 'post').then(transaction => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionsToAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;          \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsToAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'to', limit, offset, callback);\n    }\n\n    getTransactionsFromAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;           \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsFromAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'from', limit, offset, callback);\n    }\n\n    async getTransactionsRelated(address = this.tronWeb.defaultAddress.hex, direction = 'all', limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;         \n        }\n\n        if(utils.isFunction(direction)) {\n            callback = direction;\n            direction = 'all';\n        }\n\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsRelated, address, direction, limit, offset);\n\n        if(![ 'to', 'from', 'all' ].includes(direction))\n            return callback('Invalid direction provided: Expected \"to\", \"from\" or \"all\"');\n        \n        if(direction == 'all') {\n            try {\n                const from = await this.getTransactionsRelated(address, 'from', limit, offset);\n                const to = await this.getTransactionsRelated(address, 'to', limit, offset);\n\n                return callback(null, [\n                    ...from.map(tx => (tx.direction = 'from', tx)),\n                    ...to.map(tx => (tx.direction = 'to', tx))\n                ].sort((a, b) => b.raw_data.timestamp - a.raw_data.timestamp));\n            } catch(ex) {\n                return callback(ex);\n            }\n        }\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if(!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request(`walletextension/gettransactions${direction}this`, {\n            account: {\n                address\n            },\n            offset,\n            limit\n        }, 'post').then(({ transaction }) => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getAccount, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBalance, address);\n\n        this.getAccount(address).then(({ balance = 0 }) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getUnconfirmedAccount, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getUnconfirmedBalance, address);\n\n        this.getUnconfirmedAccount(address).then(({ balance = 0 }) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getBandwidth(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBandwidth, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccountnet', {\n            address\n        }, 'post').then(({ freeNetUsed = 0, freeNetLimit = 0, NetUsed = 0, NetLimit = 0 }) => {\n            callback(null, (freeNetLimit - freeNetUsed) + (NetLimit - NetUsed));\n        }).catch(err => callback(err));\n    }\n\n    getTokensIssuedByAddress(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTokensIssuedByAddress, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyaccount', {\n            address\n        }, 'post').then(({ assetIssue = false }) => {\n            if(!assetIssue)\n                return callback(null, {});\n\n            const tokens = assetIssue.map(token => {\n                return this.parseToken(token);\n            }).reduce((tokens, token) => {\n                return tokens[token.name] = token, tokens;\n            }, {});\n\n            callback(null, tokens);\n        }).catch(err => callback(err));\n    }\n\n    getTokenFromID(tokenID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTokenFromID, tokenID);\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if(!token.name)\n                return callback('Token does not exist');\n                \n            callback(null, this.parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    listNodes(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listNodes);\n\n        this.tronWeb.fullNode.request('wallet/listnodes').then(({ nodes = [] }) => {\n            callback(null, nodes.map(({ address: { host, port } }) => (\n                `${this.tronWeb.toUtf8(host)}:${port}`\n            )));\n        }).catch(err => callback(err));\n    }\n\n    getBlockRange(start = 0, end = 30, callback = false) {\n        if(utils.isFunction(end)) {\n            callback = end;\n            end = 30;            \n        }\n\n        if(utils.isFunction(start)) {\n            callback = start;\n            start = 0;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlockRange, start, end);\n\n        if(!utils.isInteger(start) || start < 0)\n            return callback('Invalid start of range provided');\n\n        if(!utils.isInteger(end) || end <= start)\n            return callback('Invalid end of range provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbylimitnext', { \n            startNum: parseInt(start),\n            endNum: parseInt(end) + 1\n        }, 'post').then(({ block = [] }) => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    listSuperRepresentatives(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listSuperRepresentatives);\n\n        this.tronWeb.fullNode.request('wallet/listwitnesses').then(({ witnesses = [] }) => {\n            callback(null, witnesses);\n        }).catch(err => callback(err));\n    }\n\n    listTokens(limit = 0, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 0;  \n        }\n        \n        if(!callback)\n            return this.injectPromise(this.listTokens, limit, offset);\n\n        if(!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if(!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        if(!limit) {\n            return this.tronWeb.fullNode.request('wallet/getassetissuelist').then(({ assetIssue = [] }) => {\n                callback(null, assetIssue.map(token => this.parseToken(token)));\n            }).catch(err => callback(err));\n        }\n\n        this.tronWeb.fullNode.request('wallet/getpaginatedassetissuelist', {\n            offset: parseInt(offset),\n            limit: parseInt(limit)\n        }, 'post').then(({ assetIssue = [] }) => {\n            callback(null, assetIssue.map(token => this.parseToken(token)));\n        }).catch(err => callback(err));\n    }\n\n    timeUntilNextVoteCycle(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.timeUntilNextVoteCycle);\n\n        this.tronWeb.fullNode.request('wallet/getnextmaintenancetime').then(({ num = -1 }) => {\n            if(num == -1)\n                return callback('Failed to get time until next vote cycle');\n\n            callback(null, Math.floor(num / 1000));\n        }).catch(err => callback(err));\n    }\n\n    getContract(contractAddress, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getContract, contractAddress);\n\n        if(!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        contractAddress = this.tronWeb.address.toHex(contractAddress);\n\n        this.tronWeb.fullNode.request('wallet/getcontract', {\n            value: contractAddress\n        }).then(contract => {\n            if(contract.Error)\n                return callback('Contract does not exist');\n\n            callback(null, contract);\n        }).catch(err => callback(err));\n    }\n\n    async verifyMessage(message = false, signature = false, address = this.tronWeb.defaultAddress.base58, useTronHeader = true, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.base58;\n            useTronHeader = true;\n        }\n\n        if(utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.verifyMessage, message, signature, address, useTronHeader);\n\n        if(!utils.isHex(message))\n            return callback('Expected hex message input');\n\n        if(message.substr(0, 2) == '0x')\n            message = message.substring(2);\n\n        if(signature.substr(0, 2) == '0x')\n            signature = signature.substr(2);\n\n        const messageBytes = [\n            ...Ethers.utils.toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n            ...utils.code.hexStr2byteArray(message)\n        ];\n\n        const messageDigest = Ethers.utils.keccak256(messageBytes);\n        const recovered = Ethers.utils.recoverAddress(messageDigest, {\n            recoveryParam: signature.substring(128, 130) == '1c' ? 1 : 0,\n            r: '0x' + signature.substring(0, 64),\n            s: '0x' + signature.substring(64, 128)\n        });\n\n        const tronAddress = '41' + recovered.substr(2);\n        const base58Address = this.tronWeb.address.fromHex(tronAddress);\n\n        if(base58Address == this.tronWeb.address.fromHex(address))\n            return callback(null, true);\n\n        callback('Signature does not match');\n    }\n\n    async sign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, useTronHeader = true, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n            useTronHeader = true;\n        }\n\n        if(utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sign, transaction, privateKey, useTronHeader);\n\n        // Message signing\n        if(utils.isString(transaction)) {\n            if(transaction.substring(0, 2) == '0x')\n                transaction = transaction.substring(2);\n\n            if(!utils.isHex(transaction))\n                return callback('Expected hex message input');\n\n            try {\n                const signingKey = new Ethers.utils.SigningKey(privateKey);\n                const messageBytes = [\n                    ...Ethers.utils.toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n                    ...utils.code.hexStr2byteArray(transaction)\n                ];\n\n                const messageDigest = Ethers.utils.keccak256(messageBytes);\n                const signature = signingKey.signDigest(messageDigest);\n\n                const signatureHex = [\n                    '0x',\n                    signature.r.substring(2),\n                    signature.s.substring(2),\n                    Number(signature.v).toString(16)\n                ].join('');\n\n                return callback(null, signatureHex);\n            } catch(ex) {\n                callback(ex);\n            }\n        }\n\n        if(!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if(transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            const address = this.tronWeb.address.toHex(\n                this.tronWeb.address.fromPrivateKey(privateKey)\n            ).toLowerCase();\n\n            if(address !== transaction.raw_data.contract[0].parameter.value.owner_address.toLowerCase())\n                return callback('Private key does not match address in transaction');\n\n            return callback(null,\n                utils.crypto.signTransaction(privateKey, transaction)\n            );\n        } catch(ex) {\n            callback(ex);\n        }\n    }\n\n    sendRawTransaction(signedTransaction = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.sendRawTransaction, signedTransaction);\n\n        if(!utils.isObject(signedTransaction))\n            return callback('Invalid transaction provided');\n\n        if(!signedTransaction.signature || !utils.isArray(signedTransaction.signature))\n            return callback('Transaction is not signed');\n\n        this.tronWeb.fullNode.request(\n            'wallet/broadcasttransaction', \n            signedTransaction,\n            'post'\n        ).then(result => {\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    async sendTransaction(to = false, amount = false, options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        \n        if(typeof options === 'string')\n            options = { privateKey: options };\n\n        if(!callback)\n            return this.injectPromise(this.sendTransaction, to, amount, options);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendTrx(to, amount, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    async sendToken(to = false, amount = false, tokenID = false, options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        \n        if(typeof options === 'string')\n            options = { privateKey: options };\n\n        if(!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, options);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isString(tokenID))\n            return callback('Invalid token ID provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendToken(to, amount, tokenID, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n/**\n     * Freezes an amount of TRX.\n     * Will give bandwidth OR Energy and TRON Power(voting rights)\n     * to the owner of the frozen tokens.\n     *\n     * @param amount - is the number of frozen trx\n     * @param duration - is the duration in days to be frozen\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", options = {}, callback = false)\n    {\n        if(utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        \n        if(typeof options === 'string')\n            options = { privateKey: options };\n\n        if(!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, options);\n\n        if(![ 'BANDWIDTH', 'ENERGY' ].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isInteger(duration) || duration < 3)\n            return callback('Invalid duration provided, minimum of 3 days');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const freezeBalance = await this.tronWeb.transactionBuilder.freezeBalance(amount, duration, resource, address);\n            const signedTransaction = await this.sign(freezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Unfreeze TRX that has passed the minimum freeze duration.\n     * Unfreezing will remove bandwidth and TRON Power.\n     *\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async unfreezeBalance(resource = \"BANDWIDTH\", options = {}, callback = false)\n    {\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = 'BANDWIDTH';\n        }\n\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        \n        if(typeof options === 'string')\n            options = { privateKey: options };\n\n        if(!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, options);\n\n        if(![ 'BANDWIDTH', 'ENERGY' ].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const unfreezeBalance = await this.tronWeb.transactionBuilder.unfreezeBalance(resource, address);\n            const signedTransaction = await this.sign(unfreezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Modify account name\n     * Note: Username is allowed to edit only once.\n     *\n     * @param privateKey - Account private Key\n     * @param accountName - name of the account\n     * @param callback\n     *\n     * @return modified Transaction Object\n     */\n    async updateAccount(accountName = false, options = {},  callback = false)\n    {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        \n        if(typeof options === 'string')\n            options = { privateKey: options };\n\n        if(!callback) {\n            return this.injectPromise(this.updateAccount, accountName, options);\n        }\n\n        if (!utils.isString(accountName) || !accountName.length) {\n            return callback('Name must be a string');\n        }\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const updateAccount = await this.tronWeb.transactionBuilder.updateAccount(accountName, address);\n            const signedTransaction = await this.sign(updateAccount, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    signMessage(...args) {\n        return this.sign(...args);\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    send(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    sendTrx(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    broadcast(...args) {\n        return this.sendRawTransaction(...args);\n    }\n\n    signTransaction(...args) {\n        return this.sign(...args);\n    }\n\n    /**\n     * Gets a network modification proposal by ID.\n     */\n    getProposal(proposalID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getProposal, proposalID);\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/getproposalbyid', { \n            id: parseInt(proposalID),\n        }, 'post').then(proposal => {\n            callback(null, proposal);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listProposals(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listProposals);\n\n        this.tronWeb.fullNode.request('wallet/listproposals', {}, 'post').then(({ proposals = [] }) => {\n            callback(null, proposals);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all parameters available for network modification proposals.\n     */\n    getChainParameters(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getChainParameters);\n\n        this.tronWeb.fullNode.request('wallet/getchainparameters', {}, 'post').then(({ chainParameter = [] }) => {\n            callback(null, chainParameter);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the account resources\n     */\n    getAccountResources(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getAccountResources, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/getaccountresource', { \n            address: this.tronWeb.address.toHex(address),\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the exchange ID.\n     */\n    getExchangeByID(exchangeID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getExchangeByID, exchangeID);\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        this.tronWeb.fullNode.request('wallet/getexchangebyid', {\n            value: exchangeID,\n        }, 'post').then(exchange => {\n            callback(null, exchange);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists the exchanges\n     */\n    listExchanges(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchanges', {}, 'post').then(({ exchanges = [] }) => {\n            callback(null, exchanges);\n        }, 'post').catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listExchangesPaginated(limit = 10, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n        if(!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchangespaginated', {\n            limit,\n            offset\n        }, 'post').then(({ exchanges = [] }) => {\n            callback(null, exchanges);\n        }).catch(err => callback(err));\n    }\n};\n","import utils from 'utils';\n\nconst getFunctionSelector = abi => {\n    return abi.name + '(' + getParamTypes(abi.inputs || []).join(',') + ')';\n}\n\nconst getParamTypes = params => {\n    return params.map(({ type }) => type);\n}\n\nconst decodeOutput = (abi, output) => {\n    const names = abi.map(({ name }) => name).filter(name => !!name);\n    const types = abi.map(({ type }) => type);\n\n    return utils.abi.decodeParams(names, types, output);\n};\n\nexport default class Method {\n    constructor(contract, abi) {\n        this.tronWeb = contract.tronWeb;\n        this.contract = contract;\n\n        this.abi = abi;\n        this.name = abi.name || (abi.name = abi.type);\n\n        this.inputs = abi.inputs || [];\n        this.outputs = abi.outputs || [];\n\n        this.functionSelector = getFunctionSelector(abi);\n        this.signature = this.tronWeb.sha3(this.functionSelector, false).slice(0, 8);\n        this.injectPromise = utils.promiseInjector(this);\n\n        this.defaultOptions = {\n            feeLimit: 1000000000,\n            callValue: 0,\n            from: this.tronWeb.defaultAddress.hex, // Only used for send()\n            shouldPollResponse: false // Only used for sign()\n        };\n    }\n\n    decodeInput(data) {\n        return decodeOutput(this.inputs, '0x' + data);\n    }\n\n    onMethod(...args) {\n        const types = getParamTypes(this.inputs);\n\n        args.forEach((arg, index) => {\n            if (types[index] == 'address')\n                args[index] = this.tronWeb.address.toHex(arg).replace(/^(41)/, '0x')\n\n            if (types[index] == 'address[]') {\n                args[index] = args[index].map(address => {\n                    return this.tronWeb.address.toHex(address).replace(/^(41)/, '0x')\n                })\n            }\n        });\n\n        return {\n            call: (...methodArgs) => this._call(types, args, ...methodArgs),\n            send: (...methodArgs) => this._send(types, args, ...methodArgs),\n            watch: (...methodArgs) => this._watch(...methodArgs)\n        }\n    }\n\n    async _call(types, args, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this._call, types, args, options);\n\n        if (types.length !== args.length)\n            return callback('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (!['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use send()`);\n\n        options = { ...this.defaultOptions, ...options };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        this.tronWeb.transactionBuilder.triggerSmartContract(\n            this.contract.address,\n            this.functionSelector,\n            options.feeLimit,\n            options.callValue,\n            parameters,\n            this.tronWeb.address.toHex(options.from),\n            (err, transaction) => {\n                if (err)\n                    return callback(err);\n\n                if (!utils.hasProperty(transaction, 'constant_result'))\n                    return callback('Failed to execute');\n\n                try {\n                    let output = decodeOutput(this.outputs, '0x' + transaction.constant_result[0]);\n\n                    if (output.length === 1)\n                        output = output[0];\n\n                    return callback(null, output);\n                } catch (ex) {\n                    return callback(ex);\n                }\n            });\n    }\n\n    async _send(types, args, options = {}, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this._send, types, args, options, privateKey);\n\n        if (types.length !== args.length)\n            throw new Error('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use call()`);\n\n        // If a function isn't payable, dont provide a callValue.\n        if (!['payable'].includes(stateMutability.toLowerCase()))\n            options.callValue = 0;\n\n        options = {...this.defaultOptions, ...options};\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        try {\n            const address = privateKey ? this.tronWeb.address.fromPrivateKey(privateKey) : this.tronWeb.defaultAddress.base58;\n            const transaction = await this.tronWeb.transactionBuilder.triggerSmartContract(\n                this.contract.address,\n                this.functionSelector,\n                options.feeLimit,\n                options.callValue,\n                parameters,\n                this.tronWeb.address.toHex(address)\n            );\n\n            if (!transaction.result || !transaction.result.result)\n                return callback('Unknown error: ' + JSON.stringify(transaction, null, 2));\n\n            // If privateKey is false, this won't be signed here. We assume sign functionality will be replaced.\n            const signedTransaction = await this.tronWeb.trx.sign(transaction.transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n                \n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if (!broadcast.result)\n                return callback('Unknown error: ' + JSON.stringify(broadcast, null, 2));\n\n            if (!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if (index == 20) {\n                    return callback({\n                        error: 'Cannot find result in solidity node',\n                        transaction: signedTransaction\n                    });\n                }\n\n                const output = await this.tronWeb.trx.getTransactionInfo(signedTransaction.txID);\n\n                if (!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if (output.result && output.result == 'FAILED') {\n                    return callback({\n                        error: this.tronWeb.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (!utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                let decoded = decodeOutput(this.outputs, '0x' + output.contractResult[0]);\n\n                if (decoded.length === 1)\n                    decoded = decoded[0];\n\n                return callback(null, decoded);\n            }\n\n            checkResult();\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async _watch(options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!utils.isFunction(callback))\n            throw new Error('Expected callback to be provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (this.abi.type.toLowerCase() !== 'event')\n            return callback('Invalid method type for event watching');\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        let listener = false;\n        let lastBlock = false;\n        const sinceTimestamp = new Date().getTime();\n\n        const getEvents = async () => {\n            try {\n                const events = await this.tronWeb.getEventResult(this.contract.address, sinceTimestamp, this.name);\n                const [ latestEvent ] = events.sort((a, b) => b.block - a.block);\n                const newEvents = events.filter((event, index) => {\n\n                    if (options.resourceNode && !RegExp(options.resourceNode, 'i').test(event.resourceNode))\n                        return false;\n\n                    const duplicate = events.slice(0, index).some(priorEvent => (\n                        JSON.stringify(priorEvent) == JSON.stringify(event)\n                    ));\n\n                    if (duplicate)\n                        return false;\n\n                    if (!lastBlock)\n                        return true;\n\n                    return event.block > lastBlock;\n                });\n\n                if (latestEvent)\n                    lastBlock = latestEvent.block;\n\n                return newEvents;\n            } catch (ex) {\n                return Promise.reject(ex);\n            }\n        };\n\n        const bindListener = () => {\n            if (listener)\n                clearInterval(listener);\n\n            listener = setInterval(() => {\n                getEvents().then(events => events.forEach(event => {\n                    callback(null, utils.parseEvent(event, this.abi))\n                })).catch(err => callback(err));\n            }, 3000);\n        };\n\n        await getEvents();\n        bindListener();\n\n        return {\n            start: bindListener(),\n            stop: () => {\n                if (!listener)\n                    return;\n\n                clearInterval(listener);\n                listener = false;\n            }\n        }\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport Method from './method';\n\nexport default class Contract {\n    constructor(tronWeb = false, abi = [], address = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n\n        this.address = address;\n        this.abi = abi;\n\n        this.eventListener = false;\n        this.bytecode = false;\n        this.deployed = false;\n        this.lastBlock = false;\n\n        this.methods = {};\n        this.methodInstances = {};\n        this.props = [];\n\n        if(this.tronWeb.isAddress(address))\n            this.deployed = true;\n        else this.address = false;\n\n        this.loadAbi(abi);\n    }\n\n    async _getEvents(options = {}) {\n        const events = await this.tronWeb.getEventResult(this.address);\n        const [ latestEvent ] = events.sort((a, b) => b.block - a.block);\n        const newEvents = events.filter((event, index) => {\n\n            if (options.resourceNode && !RegExp(options.resourceNode, 'i').test(event.resourceNode))\n                return false;\n\n            const duplicate = events.slice(0, index).some(priorEvent => (\n                JSON.stringify(priorEvent) == JSON.stringify(event)\n            ));\n\n            if(duplicate)\n                return false;\n\n            if(!this.lastBlock)\n                return true;\n\n            return event.block > this.lastBlock;\n        });\n\n        if(latestEvent)\n            this.lastBlock = latestEvent.block;\n\n        return newEvents;\n    }\n\n    async _startEventListener(options = {}, callback) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(this.eventListener)\n            clearInterval(this.eventListener);\n\n        if(!this.tronWeb.eventServer)\n            throw new Error('Event server is not configured');\n\n        if(!this.address)\n            throw new Error('Contract is not configured with an address');\n\n        this.eventCallback = callback;\n        await this._getEvents(options);\n\n        this.eventListener = setInterval(() => {\n            this._getEvents(options).then(newEvents => newEvents.forEach(event => {\n                this.eventCallback && this.eventCallback(event)\n            })).catch(err => {\n                console.error('Failed to get event list', err);\n            });\n        }, 3000);\n    }\n\n    _stopEventListener() {\n        if(!this.eventListener)\n            return;\n\n        clearInterval(this.eventListener);\n        this.eventListener = false;\n        this.eventCallback = false;\n    }\n\n    hasProperty(property) {\n        return this.hasOwnProperty(property) || this.__proto__.hasOwnProperty(property);\n    }\n\n    loadAbi(abi) {\n        this.abi = abi;\n        this.methods = {};\n\n        this.props.forEach(prop => delete this[prop]);\n\n        abi.forEach(func => {\n            // Don't build a method for constructor function. That's handled through contract create.\n            if (func.type.toLowerCase() === 'constructor')\n                return;\n\n            const method = new Method(this, func);\n            const methodCall = method.onMethod.bind(method);\n\n            const {\n                name,\n                functionSelector,\n                signature\n            } = method;\n\n            this.methods[name] = methodCall;\n            this.methods[functionSelector] = methodCall;\n            this.methods[signature] = methodCall;\n\n            this.methodInstances[name] = method;\n            this.methodInstances[functionSelector] = method;\n            this.methodInstances[signature] = method;\n\n            if(!this.hasProperty(name)) {\n                this[name] = methodCall;\n                this.props.push(name);\n            }\n\n            if(!this.hasProperty(functionSelector)) {\n                this[functionSelector] = methodCall;\n                this.props.push(functionSelector);\n            }\n\n            if(!this.hasProperty(signature)) {\n                this[signature] = methodCall;\n                this.props.push(signature);\n            }\n        });\n    }\n\n    decodeInput(data) {\n\n        const methodName = data.substring(0, 8);\n        const inputData = data.substring(8);\n\n        if (!this.methodInstances[methodName])\n            throw new Error('Contract method ' + methodName + \" not found\");\n\n        const methodInstance = this.methodInstances[methodName];\n\n        return {\n            name: methodInstance.name,\n            params: this.methodInstances[methodName].decodeInput(inputData),\n        }\n    }\n\n    async new(options, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.new, options, privateKey);\n\n        try {\n            const address = this.tronWeb.address.fromPrivateKey(privateKey);\n            const transaction = await this.tronWeb.transactionBuilder.createSmartContract(options, address);\n            const signedTransaction = await this.tronWeb.trx.sign(transaction, privateKey);\n            const contract = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if(!contract.result)\n                return callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            return this.at(signedTransaction.contract_address, callback);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    async at(contractAddress, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.at, contractAddress);\n\n        try {\n            const contract = await this.tronWeb.trx.getContract(contractAddress);\n\n            if(!contract.contract_address)\n                callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            this.address = contract.contract_address;\n            this.bytecode = contract.bytecode;\n            this.deployed = true;\n\n            this.loadAbi(contract.abi.entrys);\n\n            callback(null, this);\n        } catch(ex) {\n            if(ex.toString().includes('does not exist'))\n                return callback('Contract has not been deployed on the network');\n\n            return callback(ex);\n        }\n    }\n\n    events(options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!utils.isFunction(callback))\n            throw new Error('Callback function expected');\n\n        const self = this;\n\n        return {\n            start(startCallback = false) {\n                if(!startCallback) {\n                    self._startEventListener(options, callback);\n                    return this;\n                }\n\n                self._startEventListener(options, callback).then(() => {\n                    startCallback();\n                }).catch(err => {\n                    startCallback(err)\n                });\n\n                return this;\n            },\n            stop() {\n                self._stopEventListener();\n            }\n        };\n    }\n}\n","import providers from 'lib/providers';\nimport utils from 'utils';\nimport BigNumber from 'bignumber.js';\nimport EventEmitter from 'eventemitter3';\n\nimport TransactionBuilder from 'lib/transactionBuilder';\nimport Trx from 'lib/trx';\nimport Contract from 'lib/contract';\n\nimport { keccak256 } from 'js-sha3';\n\nexport default class TronWeb extends EventEmitter {\n    static providers = providers;\n    static BigNumber = BigNumber;\n    \n    constructor(fullNode, solidityNode, eventServer = false, privateKey = false) {\n        super();\n\n        if(utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if(utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if(utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n        this.setEventServer(eventServer);\n        \n        this.providers = providers;\n        this.BigNumber = BigNumber;\n\n        this.defaultBlock = false;\n        this.defaultPrivateKey = false;\n        this.defaultAddress = {\n            hex: false,\n            base58: false\n        };\n        \n        [\n            'sha3', 'toHex', 'toUtf8', 'fromUtf8',\n            'toAscii', 'fromAscii', 'toDecimal', 'fromDecimal',\n            'toSun', 'fromSun', 'toBigNumber', 'isAddress', \n            'createAccount', 'address'\n        ].forEach(key => {\n            this[key] = TronWeb[key];\n        });\n\n        if(privateKey)\n            this.setPrivateKey(privateKey);\n\n        this.transactionBuilder = new TransactionBuilder(this);\n        this.trx = new Trx(this);\n        this.utils = utils;\n\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    setDefaultBlock(blockID = false) {\n        if([ false, 'latest', 'earliest', 0 ].includes(blockID)) {\n            return this.defaultBlock = blockID;\n        }\n\n        if(!utils.isInteger(blockID) || !blockID)\n            throw new Error('Invalid block ID provided');\n\n        this.defaultBlock = Math.abs(blockID);\n    }\n\n    setPrivateKey(privateKey) {\n        try {\n            this.setAddress(\n                this.address.fromPrivateKey(privateKey)\n            );\n        } catch {\n            throw new Error('Invalid private key provided');\n        }\n\n        this.defaultPrivateKey = privateKey;\n        this.emit('privateKeyChanged', privateKey);\n    }\n\n    setAddress(address) {\n        if(!this.isAddress(address))\n            throw new Error('Invalid address provided');\n\n        const hex = this.address.toHex(address);\n        const base58 = this.address.fromHex(address);\n\n        if(this.defaultPrivateKey && this.address.fromPrivateKey(this.defaultPrivateKey) !== base58)\n           this.defaultPrivateKey = false;\n\n        this.defaultAddress = {\n            hex,\n            base58\n        };\n\n        this.emit('addressChanged', { hex, base58 });\n    }\n\n    isValidProvider(provider) {\n        return Object.values(providers).some(knownProvider => provider instanceof knownProvider);\n    }\n\n    setFullNode(fullNode) {\n        if(utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if(!this.isValidProvider(fullNode))\n            throw new Error('Invalid full node provided');\n\n        this.fullNode = fullNode;\n        this.fullNode.setStatusPage('wallet/getnowblock');\n    }\n\n    setSolidityNode(solidityNode) {\n        if(utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if(!this.isValidProvider(solidityNode))\n            throw new Error('Invalid solidity node provided');\n\n        this.solidityNode = solidityNode;\n        this.solidityNode.setStatusPage('walletsolidity/getnowblock');\n    }\n\n    setEventServer(eventServer = false) {\n        if(!eventServer)\n            return this.eventServer = false;\n\n        if(utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n            \n        if(!this.isValidProvider(eventServer))\n            throw new Error('Invalid event server provided');\n\n        this.eventServer = eventServer;\n        this.eventServer.isConnected = () => this.eventServer.request('healthcheck').then(() => true).catch(() => (\n            this.eventServer.request('events?size=1').then(data => (\n                Array.isArray(data)\n            ))\n        )).catch(() => false);\n    }\n\n    currentProviders() {\n        return {\n            fullNode: this.fullNode,\n            solidityNode: this.solidityNode,\n            eventServer: this.eventServer\n        };\n    }\n\n    currentProvider() {\n        return this.currentProviders();\n    }\n\n    getEventResult(contractAddress = false, sinceTimestamp = 0, eventName = false, blockNumber = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getEventResult, contractAddress, sinceTimestamp, eventName, blockNumber);\n\n        if(!this.eventServer)\n            callback('No event server configured');\n\n        const routeParams = [];\n\n        if(!this.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if(eventName && !contractAddress)\n            return callback('Usage of event name filtering requires a contract address');\n        \n        if(blockNumber && !eventName)\n            return callback('Usage of block number filtering requires an event name');\n\n        if(contractAddress)\n            routeParams.push(this.address.fromHex(contractAddress));\n\n        if(eventName)\n            routeParams.push(eventName);\n\n        if(blockNumber)\n            routeParams.push(blockNumber);\n\n        return this.eventServer.request(`event/contract/${routeParams.join('/')}?since=${sinceTimestamp}`).then((data = false) => {\n            if(!data)\n                return callback('Unknown error occurred');\n\n            if(!utils.isArray(data))\n                return callback(data);\n\n            return callback(null, \n                data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err)); \n    }\n\n    getEventByTransactionID(transactionID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getEventByTransactionID, transactionID);\n\n        if(!this.eventServer)\n            callback('No event server configured');\n\n        return this.eventServer.request(`event/transaction/${transactionID}`).then((data = false) => {\n            if(!data)\n                return callback('Unknown error occurred');\n\n            if(!utils.isArray(data))\n                return callback(data);\n\n            return callback(null, \n                data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n    contract(abi = [], address = false) {\n        return new Contract(this, abi, address);\n    }\n\n    static get address() {\n        return {\n            fromHex(address) {\n                if(!utils.isHex(address))\n                    return address;\n\n                return utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address)\n                );\n            },\n            toHex(address) {\n                if(utils.isHex(address))\n                    return address.toLowerCase().replace(/^0x/,'41');\n\n                return utils.code.byteArray2hexStr(\n                    utils.crypto.decodeBase58Address(address)\n                ).toLowerCase();\n            },\n            fromPrivateKey(privateKey) {\n                try {\n                    return utils.crypto.pkToAddress(privateKey);\n                } catch { return false; }\n            }\n        }\n    }\n\n    static sha3(string, prefix = true) {\n        return (prefix ? '0x' : '') + keccak256(string);\n    }\n\n    static toHex(val) {\n        if(utils.isBoolean(val))\n            return TronWeb.fromDecimal(+val);\n\n        if(utils.isBigNumber(val))\n            return TronWeb.fromDecimal(val);\n\n        if(typeof val === 'object')\n            return TronWeb.fromUtf8(JSON.stringify(val));\n\n        if(utils.isString(val)) {\n            if (/^(-|)0x/.test(val))\n                return val;\n\n            if(!isFinite(val))\n                return TronWeb.fromUtf8(val);\n        }\n\n        let result = TronWeb.fromDecimal(val);\n        if (result === '0xNaN') {\n            throw new Error('The passed value is not convertible to a hex string');\n        } else {\n            return result;\n        }\n    }\n\n    static toUtf8(hex) {\n        if (utils.isHex(hex)) {\n            hex = hex.replace(/^0x/, '');\n            return Buffer.from(hex, 'hex').toString('utf8');\n        } else {\n            throw new Error('The passed value is not a valid hex string');\n        }\n    }\n\n    static fromUtf8(string) {\n        if (!utils.isString(string)) {\n            throw new Error('The passed value is not a valid utf-8 string')\n        }\n        return '0x' + Buffer.from(string, 'utf8').toString('hex');\n    }\n\n    static toAscii(hex) {\n        if (utils.isHex(hex)) {\n            let str = \"\";\n            let i = 0, l = hex.length;\n            if (hex.substring(0, 2) === '0x') {\n                i = 2;\n            }\n            for (; i < l; i+=2) {\n                let code = parseInt(hex.substr(i, 2), 16);\n                str += String.fromCharCode(code);\n            }\n            return str;\n        } else {\n            throw new Error('The passed value is not a valid hex string');\n        }\n    }\n\n    static fromAscii(string, padding) {\n        if (!utils.isString(string)) {\n            throw new Error('The passed value is not a valid utf-8 string')\n        }\n        return '0x' + Buffer.from(string, 'ascii').toString('hex').padEnd(padding, '0');\n    }\n\n\n    static toDecimal(value) {\n        return TronWeb.toBigNumber(value).toNumber();\n    }\n\n    static fromDecimal(value) {\n        const number = TronWeb.toBigNumber(value);\n        const result = number.toString(16);\n\n        return number.isLessThan(0) ? '-0x' + result.substr(1) : '0x' + result;\n    }\n\n    static fromSun(sun) {\n        const trx = TronWeb.toBigNumber(sun).div(1_000_000);        \n        return utils.isBigNumber(sun) ? trx : trx.toString(10);\n    }\n\n    static toSun(trx) {\n        const sun = TronWeb.toBigNumber(trx).times(1_000_000);        \n        return utils.isBigNumber(trx) ? sun : sun.toString(10);\n    }\n\n    static toBigNumber(amount = 0) {\n        if(utils.isBigNumber(amount))\n            return amount;\n\n        if(utils.isString(amount) && /^(-|)0x/.test(amount))\n            return new BigNumber(amount.replace('0x', ''), 16);\n\n        return new BigNumber(amount.toString(10), 10);\n    }\n\n    static isAddress(address = false) {\n        if(!utils.isString(address))\n            return false;\n\n        // Convert HEX to Base58\n        if(address.length === 42) {\n            return TronWeb.isAddress(\n                utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address)\n                )\n            );\n        }\n\n        return utils.crypto.isAddressValid(address);\n    }\n\n    static async createAccount(callback = false) {\n        const account = utils.accounts.generateAccount();\n\n        if(callback)\n            callback(null, account);\n\n        return account;\n    }\n\n    async isConnected(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.isConnected);\n\n        callback(null, {\n            fullNode: await this.fullNode.isConnected(),\n            solidityNode: await this.solidityNode.isConnected(),\n            eventServer: this.eventServer && await this.eventServer.isConnected()\n        });\n    }\n};\n"],"sourceRoot":""}