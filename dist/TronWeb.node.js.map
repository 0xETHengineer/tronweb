{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@babel/runtime/helpers/asyncToGenerator\"","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///external \"@babel/runtime/helpers/objectSpread\"","webpack:///external \"ethers\"","webpack:///external \"@babel/runtime/helpers/toConsumableArray\"","webpack:///external \"@babel/runtime/helpers/slicedToArray\"","webpack:///external \"bignumber.js\"","webpack:///external \"@babel/runtime/helpers/assertThisInitialized\"","webpack:///external \"js-sha3\"","webpack:///external \"elliptic\"","webpack:///external \"axios\"","webpack:///external \"@babel/runtime/helpers/defineProperty\"","webpack:///external \"@babel/runtime/helpers/typeof\"","webpack:///external \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack:///external \"@babel/runtime/helpers/getPrototypeOf\"","webpack:///external \"@babel/runtime/helpers/inherits\"","webpack:///external \"jssha\"","webpack:///external \"validator\"","webpack:///external \"eventemitter3\"","webpack:///./src/utils/base64.js","webpack:///./src/utils/bytes.js","webpack:///./src/utils/address.js","webpack:///./src/utils/code.js","webpack:///./src/utils/base58.js","webpack:///./src/utils/crypto.js","webpack:///./src/utils/accounts.js","webpack:///./src/utils/abi.js","webpack:///./src/utils/index.js","webpack:///./src/lib/providers/index.js","webpack:///./src/lib/providers/HttpProvider.js","webpack:///./src/lib/transactionBuilder.js","webpack:///./src/lib/trx.js","webpack:///./src/lib/contract/method.js","webpack:///./src/lib/contract/index.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","Base64","_this","this","_keyStr","encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","length","charCodeAt","isNaN","charAt","encodeIgnoreUtf8","inputBytes","decode","replace","indexOf","String","fromCharCode","_utf8_decode","decodeToByteArray","_out2ByteArray","utftext","byteArray","Array","c1","c2","_utf8_encode","string","c3","byte2hexStr","byte","str","bytesToString","arr","one","toString","v","match","bytesLength","store","slice","st","parseInt","hextoString","hex","split","out","tmp","concat","base64DecodeFromString","string64","byteArray2hexStr","ADDRESS_SIZE","ADDRESS_PREFIX","ADDRESS_PREFIX_BYTE","bin2String","array","apply","toConsumableArray_default","arrayEquals","array1","array2","stringToBytes","len","bytes","push","code_bytesToString","code_hextoString","hexChar2byte","isHexChar","hexStr2byteArray","j","k","code_byte2hexStr","code_byteArray2hexStr","reduce","code_base64DecodeFromString","base64EncodeToString","strToDate","tempStrs","dateStrs","year","month","day","timeStrs","hour","minute","second","Date","isNumber","getStringType","ALPHABET","ALPHABET_MAP","base58_i","BASE","encode58","buffer","digits","carry","reverse","map","digit","join","decode58","Error","getBase58CheckAddress","addressBytes","checkSum","SHA256","decodeBase58Address","base58Sting","address","offset","checkSum1","signTransaction","priKeyBytes","transaction","signature","ECKeySign","txID","arrayToBase64String","a","btoa","crypto_signBytes","privateKey","contents","getRowBytesFromTransactionBase64","base64Data","bytesDecode","proto","protocol","Transaction","deserializeBinary","getRawData","serializeBinary","genPriKey","priKeyHex","external_elliptic_","genKeyPair","getPrivate","computeAddress","pubBytes","hash","external_js_sha3_","substring","getAddressFromPriKey","getPubKeyFromPriKey","decode58Check","addressStr","decodeCheck","decodeData","hash1","isAddressValid","base58Str","getBase58CheckAddressFromPriKeyBase64String","priKeyBase64String","getHexStrAddressFromPriKeyBase64String","getAddressFromPriKeyBase64String","pubkey","keyFromPrivate","getPublic","x","y","xHex","yHex","hashBytes","sign","id","recoveryParam","rHex","sHex","msgBytes","shaObj","external_jssha_default","msgHex","update","getHash","passwordToAddress","password","pkToAddress","generateAccount","pubKeyBytes","publicKey","base58","abi_abiCoder","external_ethers_","AbiCoder","decodeParams","names","types","ignoreMethodHash","obj","arg","index","substr","toLowerCase","encodeParams","values","src_TronWeb","toHex","utils","isValidURL","url","external_validator_default","isURL","protocols","isObject","isArray","isJson","JSON","parse","ex","isBoolean","bool","isBigNumber","number","external_bignumber_js_default","constructor","isString","isFunction","isHex","isInteger","Number","hasProperty","hasProperties","_len","arguments","properties","_key","includes","injectPromise","func","_len2","args","_key2","Promise","resolve","reject","err","res","promiseInjector","scope","_this2","_len3","_key3","mapEvent","event","block","block_number","timestamp","block_timestamp","contract","contract_address","event_name","transaction_id","result","resourceNode","resource_Node","parseEvent","_ref","abi","inputs","type","_abi$index","padLeft","padding","amount","src_utils","objectSpread_default","code","code_namespaceObject","accounts","accounts_namespaceObject","base58_namespaceObject","bytes_namespaceObject","crypto","crypto_namespaceObject","abi_namespaceObject","providers","HttpProvider","host","timeout","undefined","user","headers","statusPage","classCallCheck_default","instance","external_axios_default","baseURL","auth","request","then","data","catch","payload","method","keys","params","transactionBuilder_TransactionBuilder","TransactionBuilder","tronWeb","to","from","defaultAddress","callback","isAddress","fullNode","to_address","owner_address","sendTrx","tokenID","fromUtf8","asset_name","sendToken","issuerAddress","buyer","purchaseToken","duration","resource","frozen_balance","frozen_duration","freezeBalance","unfreezeBalance","withdrawBlockRewards","applyForSR","votes","voterAddress","vote","invalid","entries","_ref2","slicedToArray_default","srAddress","voteCount","vote_address","vote_count","options","createSmartContract","_options$abi","_options$bytecode","bytecode","_options$feeLimit","feeLimit","_options$callValue","callValue","_options$userFeePerce","userFeePercentage","_options$parameters","parameters","_options$name","_unused","payable","some","constructorParams","find","it","abiCoder","fee_limit","call_value","consume_user_resource_percent","stringify","parameter","contractAddress","functionSelector","triggerSmartContract","_parameters$i","function_selector","message","toUtf8","_this3","createToken","_options$name2","_options$abbreviation","abbreviation","_options$description","description","_options$url","_options$totalSupply","totalSupply","_options$trxRatio","trxRatio","_options$tokenRatio","tokenRatio","_options$saleStart","saleStart","now","_options$saleEnd","saleEnd","_options$freeBandwidt","freeBandwidth","_options$freeBandwidt2","freeBandwidthLimit","_options$frozenAmount","frozenAmount","_options$frozenDurati","frozenDuration","abbr","total_supply","trx_num","num","start_time","end_time","free_asset_net_limit","public_free_asset_net_limit","frozen_supply","frozen_amount","frozen_days","accountName","account_name","updateAccount","_this4","updateToken","_options$description2","_options$url2","_options$freeBandwidt3","_options$freeBandwidt4","new_limit","new_public_limit","_this5","createProposal","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","iterator","next","done","return","_this6","proposalID","proposal_id","deleteProposal","_this7","hasApproval","is_add_approval","isApproval","voteProposal","tokenName","tokenBalance","trxBalance","ownerAddress","first_token_id","first_token_balance","second_token_id","second_token_balance","resources","createTRXExchange","firstTokenName","firstTokenBalance","secondTokenName","secondTokenBalance","_this8","exchangeID","tokenAmount","exchange_id","token_id","quant","injectExchangeTokens","_this9","withdrawExchangeTokens","_this10","tokenAmountSold","tokenAmountExpected","fromAscii","expected","tradeExchangeTokens","trx_Trx","Trx","token","getCurrentBlock","defaultBlock","getBlockByHash","getBlockByNumber","getBlock","blockHash","blockID","getBlockTransactionCount","_ref$transactions","transactions","_ref2$transactions","getTransactionFromBlock","transactionID","getTransaction","getConfirmedTransaction","solidityNode","getTransactionInfo","limit","getTransactionsRelated","getTransactionsToAddress","getTransactionsFromAddress","direction","all","tx","sort","b","raw_data","_context","t0","account","_ref5","getAccount","getBalance","_ref6","_ref6$balance","balance","getUnconfirmedAccount","getUnconfirmedBalance","_ref7","_ref7$balance","_ref8","_ref8$freeNetUsed","freeNetUsed","_ref8$freeNetLimit","freeNetLimit","_ref8$NetUsed","NetUsed","_ref8$NetLimit","NetLimit","getBandwidth","_ref9","_ref9$assetIssue","assetIssue","tokens","parseToken","getTokensIssuedByAddress","getTokenFromID","listNodes","_ref10","_ref10$nodes","nodes","_ref11","_ref11$address","port","start","end","startNum","endNum","_ref12","_ref12$block","getBlockRange","listSuperRepresentatives","_ref13","_ref13$witnesses","witnesses","_ref15","_ref15$assetIssue","_ref14","_ref14$assetIssue","listTokens","timeUntilNextVoteCycle","_ref16","_ref16$num","Math","floor","getContract","useTronHeader","verifyMessage","messageBytes","toUtf8Bytes","messageDigest","keccak256","recovered","recoverAddress","tronAddress","fromHex","defaultPrivateKey","signingKey","SigningKey","signDigest","signatureHex","_context3","fromPrivateKey","t1","signedTransaction","isMined","_ref17","asyncToGenerator_default","regenerator_default","mark","_callee4","wrap","_context4","prev","trx","sent","blockNumber","onConfirmation","setTimeout","stop","sendRawTransaction","sendTransaction","transactionBuilder","_context5","_context6","_context7","_context8","_context9","proposal","getProposal","listProposals","_ref18","_ref18$proposals","proposals","getChainParameters","_ref19","_ref19$chainParameter","chainParameter","getAccountResources","exchange","getExchangeByID","listExchanges","_ref20","_ref20$exchanges","exchanges","_ref21","_ref21$exchanges","getFunctionSelector","getParamTypes","method_decodeOutput","filter","_ref3","method_Method","Method","outputs","sha3","defaultOptions","shouldPollResponse","forEach","methodArgs","_call","send","_send","watch","_watch","deployed","stateMutability","constant_result","broadcast","checkResult","_callee2","decoded","_args2","_context2","abrupt","error","resMessage","contractResult","eventServer","listener","lastBlock","sinceTimestamp","getTime","getEvents","events","_events$sort","_events$sort2","latestEvent","newEvents","getEventResult","RegExp","test","priorEvent","bindListener","clearInterval","setInterval","contract_Contract","Contract","eventListener","methods","methodInstances","props","loadAbi","eventCallback","_getEvents","console","__proto__","prop","methodCall","onMethod","methodName","inputData","decodeInput","new","at","entrys","self","startCallback","_startEventListener","_stopEventListener","TronWeb","possibleConstructorReturn_default","getPrototypeOf_default","setFullNode","setSolidityNode","setEventServer","BigNumber","setPrivateKey","assertThisInitialized_default","abs","setAddress","emit","provider","knownProvider","isValidProvider","setStatusPage","isConnected","currentProviders","eventName","routeParams","response","getEventByTransactionID","val","fromDecimal","typeof_default","isFinite","Buffer","padEnd","toBigNumber","toNumber","isLessThan","sun","div","times","_unused2","external_eventemitter3_default"],"mappings":"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","file":"TronWeb.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 21);\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","module.exports = require(\"@babel/runtime/helpers/objectSpread\");","module.exports = require(\"ethers\");","module.exports = require(\"@babel/runtime/helpers/toConsumableArray\");","module.exports = require(\"@babel/runtime/helpers/slicedToArray\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"@babel/runtime/helpers/assertThisInitialized\");","module.exports = require(\"js-sha3\");","module.exports = require(\"elliptic\");","module.exports = require(\"axios\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"@babel/runtime/helpers/typeof\");","module.exports = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"@babel/runtime/helpers/getPrototypeOf\");","module.exports = require(\"@babel/runtime/helpers/inherits\");","module.exports = require(\"jssha\");","module.exports = require(\"validator\");","module.exports = require(\"eventemitter3\");","export function Base64() {\n    this._keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n    this.encode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n        \n        while (i < input.length) {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.encodeIgnoreUtf8 = inputBytes => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n        \n        while (i < inputBytes.length) {\n            chr1 = inputBytes[i++];\n            chr2 = inputBytes[i++];\n            chr3 = inputBytes[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.decode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = _keyStr.indexOf(input.charAt(i++));\n            enc2 = _keyStr.indexOf(input.charAt(i++));\n            enc3 = _keyStr.indexOf(input.charAt(i++));\n            enc4 = _keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n                \n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n        \n        return this._utf8_decode(output);\n    }\n\n    this.decodeToByteArray = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = _keyStr.indexOf(input.charAt(i++));\n            enc2 = _keyStr.indexOf(input.charAt(i++));\n            enc3 = _keyStr.indexOf(input.charAt(i++));\n            enc4 = _keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n        \n        return this._out2ByteArray(output);\n    }\n\n    this._out2ByteArray = utftext => {\n        const byteArray = new Array(utftext.length);\n\n        let i = 0;\n        let c = c1 = c2 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n            byteArray[i] = c;\n            i++;\n        }\n\n        return byteArray;\n    }\n\n    this._utf8_encode = string => {\n        string = string.replace(/\\r\\n/g, \"\\n\");\n        let utftext = \"\";\n\n        for (let n = 0; n < string.length; n++) {\n            const c = string.charCodeAt(n);\n\n            if (c < 128) {\n                utftext += String.fromCharCode(c);\n            } else if ((c > 127) && (c < 2048)) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            } else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n        }\n\n        return utftext;\n    }\n\n    this._utf8_decode = utftext => {\n        let string = \"\";\n        let i = 0;\n        let c = c1 = c2 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n\n            if (c < 128) {\n                string += String.fromCharCode(c);\n                i++;\n            } else if ((c > 191) && (c < 224)) {\n                c2 = utftext.charCodeAt(i + 1);\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                i += 2;\n            } else {\n                c2 = utftext.charCodeAt(i + 1);\n                c3 = utftext.charCodeAt(i + 2);\n\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\n                i += 3;\n            }\n        }\n\n        return string;\n    }\n}","import { Base64 } from './base64';\n\nexport function byte2hexStr(byte) {\n    const hexByteMap = '0123456789ABCDEF';\n\n    let str = '';\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n        \n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length === 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else {\n            str += String.fromCharCode(arr[i]);\n        }\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.split('');\n    let out = '';\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        let tmp = `0x${ arr[i * 2] }${ arr[i * 2 + 1] }`;\n        out += String.fromCharCode(tmp);\n    }\n\n    return out;\n}\n\nexport function base64DecodeFromString(string64) {\n    return new Base64().decodeToByteArray(string64);\n}\n\nexport function byteArray2hexStr(byteArray) {\n    let str = '';\n\n    for (let i = 0; i < (byteArray.length); i++)\n        str += byte2hexStr(byteArray[i]);\n        \n    return str;\n}","export const ADDRESS_SIZE = 34;\nexport const ADDRESS_PREFIX = \"41\";\nexport const ADDRESS_PREFIX_BYTE = 0x41;\n","import { Base64 } from './base64';\n\nexport function bin2String(array) {\n    return String.fromCharCode(...array);\n}\n\nexport function arrayEquals(array1, array2) {\n    if (array1.length != array2.length)\n        return false;\n        \n    let i;\n\n    for (i = 0; i < array1.length; i++) {\n        if (array1[i] != array2[i])\n            return false;\n    }\n\n    return true;\n}\n\nexport function stringToBytes(str) {\n    const bytes = new Array();\n    let len;\n    let c;\n\n    len = str.length;\n\n    for (let i = 0; i < len; i++) {\n        c = str.charCodeAt(i);\n\n        if (c >= 0x010000 && c <= 0x10FFFF) {\n            bytes.push(((c >> 18) & 0x07) | 0xF0);\n            bytes.push(((c >> 12) & 0x3F) | 0x80);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000800 && c <= 0x00FFFF) {\n            bytes.push(((c >> 12) & 0x0F) | 0xE0);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000080 && c <= 0x0007FF) {\n            bytes.push(((c >> 6) & 0x1F) | 0xC0);\n            bytes.push((c & 0x3F) | 0x80);\n        } else bytes.push(c & 0xFF);\n    }\n\n    return bytes;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n        \n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length == 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else str += String.fromCharCode(arr[i]);\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.split(\"\");\n    let out = \"\";\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        const tmp = `0x${arr[i * 2]}${arr[i * 2 + 1]}`;\n        const charValue = String.fromCharCode(tmp);\n\n        out += charValue;\n    }\n\n    return out\n}\n\nexport function hexChar2byte(c) {\n    let d = 0;\n\n    if (c >= 'A' && c <= 'F')\n        d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    else if (c >= 'a' && c <= 'f')\n        d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10;\n    else if (c >= '0' && c <= '9')\n        d = c.charCodeAt(0) - '0'.charCodeAt(0);\n        \n    return d;\n}\n\nexport function isHexChar(c) {\n    if ((c >= 'A' && c <= 'F') ||\n        (c >= 'a' && c <= 'f') ||\n        (c >= '0' && c <= '9')) {\n        return 1;\n    }\n\n    return 0;\n}\n\nexport function hexStr2byteArray(str) {\n    const byteArray = Array();\n    let d = 0;\n    let j = 0;\n    let k = 0;\n\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charAt(i);\n\n        if (isHexChar(c)) {\n            d <<= 4;\n            d += hexChar2byte(c);\n            j++;\n\n            if (0 === (j % 2)) {\n                byteArray[k++] = d;\n                d = 0;\n            }\n        }\n    }\n\n    return byteArray;\n}\n\nexport function byte2hexStr(byte) {\n    const hexByteMap = \"0123456789ABCDEF\";\n    let str = \"\";\n\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function byteArray2hexStr(byteArray) {\n    return byteArray.reduce((string, byte) => {\n        return string + byte2hexStr(byte);\n    }, '');\n}\n\nexport function base64DecodeFromString(string64) {\n    const b = new Base64();\n    const decodeBytes = b.decodeToByteArray(string64);\n\n    return decodeBytes;\n}\n\nexport function base64EncodeToString(bytes) {\n    const b = new Base64();\n    const string64 = b.encodeIgnoreUtf8(bytes);\n\n    return string64\n}\n\n//yyyy-MM-DD HH-mm-ss\nexport function strToDate(str) {\n    const tempStrs = str.split(\" \");\n    const dateStrs = tempStrs[0].split(\"-\");\n    const year = parseInt(dateStrs[0], 10);\n    const month = parseInt(dateStrs[1], 10) - 1;\n    const day = parseInt(dateStrs[2], 10);\n\n    if (tempStrs.length > 1) {\n        const timeStrs = tempStrs[1].split(\"-\");\n        const hour = parseInt(timeStrs[0], 10);\n        const minute = parseInt(timeStrs[1], 10) - 1;\n        const second = parseInt(timeStrs[2], 10);\n\n        return new Date(year, month, day, hour, minute, second);\n    }\n\n    return new Date(year, month, day);\n}\n\nexport function isNumber(c) {\n    if (c >= '0' && c <= '9')\n        return 1;\n        \n    return 0;\n}\n\n//return 1: address  --- 20Bytes HexString\n//return 2: blockNumber ------ Decimal number\n//return 3: assetName ------ String\n//return other: error\nexport function getStringType(str) {\n    if (null == str)\n        return -1;\n\n    if (typeof (str) != 'string')\n        return -1;\n\n    if (str.length == 0 || str == \"\")\n        return -1;\n\n    let i = 0;\n\n    if (str.length == 40) {\n        for (; i < 40; i++) {\n            var c = str.charAt(i);\n\n            if (!isHexChar(c))\n                break;\n        }\n    }\n\n    if (i == 40)\n        return 1; //40 Hex, Address\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (!isNumber(c))\n            break;\n    }\n\n    if (i == str.length)\n        return 2; //Alll Decimal number, BlockNumber\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (c > ' ')\n            return 3; //At least one visible character\n    }\n\n    return -1;\n}","const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nconst ALPHABET_MAP = {};\n\nfor (let i = 0; i < ALPHABET.length; i++)\n    ALPHABET_MAP[ALPHABET.charAt(i)] = i;\n\nconst BASE = 58;\n\nexport function encode58(buffer) {\n    if (buffer.length === 0) \n        return '';\n\n    let i;\n    let j;\n\n    const digits = [0];\n\n    for (i = 0; i < buffer.length; i++) {\n        for (j = 0; j < digits.length; j++) \n            digits[j] <<= 8;\n\n        digits[0] += buffer[i];\n        let carry = 0;\n\n        for (j = 0; j < digits.length; ++j) {\n            digits[j] += carry;\n            carry = (digits[j] / BASE) | 0;\n            digits[j] %= BASE\n        }\n\n        while (carry) {\n            digits.push(carry % BASE);\n            carry = (carry / BASE) | 0\n        }\n    }\n\n    for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++) \n        digits.push(0);\n\n    return digits.reverse().map(digit => ALPHABET[digit]).join('');\n}\n\nexport function decode58(string) {\n    if (string.length === 0) \n        return [];\n\n    let i;\n    let j;\n\n    const bytes = [0];\n\n    for (i = 0; i < string.length; i++) {\n        const c = string[i];\n\n        if (!(c in ALPHABET_MAP))\n            throw new Error('Non-base58 character');\n\n        for (j = 0; j < bytes.length; j++) \n            bytes[j] *= BASE;\n\n        bytes[0] += ALPHABET_MAP[c];\n        let carry = 0;\n\n        for (j = 0; j < bytes.length; ++j) {\n            bytes[j] += carry;\n            carry = bytes[j] >> 8;\n            bytes[j] &= 0xff;\n        }\n\n        while (carry) {\n            bytes.push(carry & 0xff);\n            carry >>= 8;\n        }\n    }\n\n    for (i = 0; string[i] === '1' && i < string.length - 1; i++)\n        bytes.push(0);\n\n    return bytes.reverse();\n}","import jsSHA from 'jssha';\n\nimport { ADDRESS_PREFIX, ADDRESS_PREFIX_BYTE, ADDRESS_SIZE } from './address';\nimport { base64EncodeToString } from './code';\nimport { base64DecodeFromString, hexStr2byteArray } from './code';\nimport { encode58, decode58 } from './base58';\nimport { keccak256 } from 'js-sha3';\nimport { byte2hexStr, byteArray2hexStr } from './bytes';\nimport { ec as EC } from 'elliptic';\n\nexport function getBase58CheckAddress(addressBytes) {\n    const hash0 = SHA256(addressBytes);\n    const hash1 = SHA256(hash0);\n\n    let checkSum = hash1.slice(0, 4);\n    checkSum = addressBytes.concat(checkSum);\n\n    return encode58(checkSum);\n}\n\nexport function decodeBase58Address(base58Sting) {\n    if (typeof (base58Sting) != 'string')\n        return false;\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    let address = decode58(base58Sting);\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    const len = address.length;\n    const offset = len - 4;\n    const checkSum = address.slice(offset);\n\n    address = address.slice(0, offset);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return address;\n    }\n\n    throw new Error('Invalid address provided');\n}\n\nexport function signTransaction(priKeyBytes, transaction) {\n    if (typeof priKeyBytes === 'string')\n        priKeyBytes = hexStr2byteArray(priKeyBytes);\n\n    const txID = transaction.txID;\n    const signature = ECKeySign(hexStr2byteArray(txID), priKeyBytes);\n\n    transaction.signature = [ signature ];\n    return transaction;\n}\n\nexport function arrayToBase64String(a) {\n    return btoa(String.fromCharCode(...a));\n}\n\nexport function signBytes(privateKey, contents) {\n    if (typeof privateKey === 'string')\n        privateKey = hexStr2byteArray(privateKey);\n\n    const hashBytes = SHA256(contents);\n    const signBytes = ECKeySign(hashBytes, privateKey);\n\n    return signBytes;\n}\n\nexport function getRowBytesFromTransactionBase64(base64Data) {\n    const bytesDecode = base64DecodeFromString(base64Data);\n    const transaction = proto.protocol.Transaction.deserializeBinary(bytesDecode);\n    const raw = transaction.getRawData();\n\n    return raw.serializeBinary();\n}\n\nexport function genPriKey() {\n    const ec = new EC('secp256k1');\n    const key = ec.genKeyPair();\n    const priKey = key.getPrivate();\n\n    let priKeyHex = priKey.toString('hex');\n\n    while (priKeyHex.length < 64) {\n        priKeyHex = `0${priKeyHex}`;\n    }\n\n    return hexStr2byteArray(priKeyHex);\n}\n\nexport function computeAddress(pubBytes) {\n    if (pubBytes.length === 65)\n        pubBytes = pubBytes.slice(1);\n\n    const hash = keccak256(pubBytes).toString();\n    const addressHex = ADDRESS_PREFIX + hash.substring(24);\n\n    return hexStr2byteArray(addressHex);\n}\n\nexport function getAddressFromPriKey(priKeyBytes) {\n    let pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    return computeAddress(pubBytes);\n}\n\nexport function decode58Check(addressStr) {\n    const decodeCheck = decode58(addressStr);\n\n    if (decodeCheck.length <= 4)\n        return false;\n\n    const decodeData = decodeCheck.slice(0, decodeCheck.length - 4);\n    const hash0 = SHA256(decodeData);\n    const hash1 = SHA256(hash0);\n\n    if (hash1[0] === decodeCheck[decodeData.length] &&\n        hash1[1] === decodeCheck[decodeData.length + 1] &&\n        hash1[2] === decodeCheck[decodeData.length + 2] &&\n        hash1[3] === decodeCheck[decodeData.length + 3]) {\n        return decodeData;\n    }\n\n    return false;\n}\n\nexport function isAddressValid(base58Str) {\n    if (typeof (base58Str) !== 'string')\n        return false;\n        \n    if (base58Str.length !== ADDRESS_SIZE)\n        return false;\n\n    let address = decode58(base58Str);\n\n    if (address.length !== 25)\n        return false;\n        \n    if (address[0] !== ADDRESS_PREFIX_BYTE)\n        return false;\n        \n    const checkSum = address.slice(21);\n    address = address.slice(0, 21);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return true\n    }\n\n    return false;\n}\n\nexport function getBase58CheckAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n\n    return getBase58CheckAddress(addressBytes);\n}\n\nexport function getHexStrAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressHex = byteArray2hexStr(addressBytes);\n\n    return addressHex;\n}\n\nexport function getAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressBase64 = base64EncodeToString(addressBytes);\n\n    return addressBase64;\n}\n\nexport function getPubKeyFromPriKey(priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const pubkey = key.getPublic();\n    const x = pubkey.x;\n    const y = pubkey.y;\n\n    let xHex = x.toString('hex');\n\n    while (xHex.length < 64) {\n        xHex = `0${xHex}`;\n    }\n\n    let yHex = y.toString('hex');\n\n    while (yHex.length < 64) {\n        yHex = `0${yHex}`;\n    }\n\n    const pubkeyHex = `04${xHex}${yHex}`;\n    const pubkeyBytes = hexStr2byteArray(pubkeyHex);\n\n    return pubkeyBytes;\n}\n\nexport function ECKeySign(hashBytes, priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const signature = key.sign(hashBytes);\n    const r = signature.r;\n    const s = signature.s;\n    const id = signature.recoveryParam;\n\n    let rHex = r.toString('hex');\n\n    while (rHex.length < 64) {\n        rHex = `0${rHex}`;\n    }\n\n    let sHex = s.toString('hex');\n\n    while (sHex.length < 64) {\n        sHex = `0${sHex}`;\n    }\n\n    const idHex = byte2hexStr(id);\n    const signHex = rHex + sHex + idHex;\n\n    return signHex;\n}\n\nexport function SHA256(msgBytes) {\n    const shaObj = new jsSHA('SHA-256', 'HEX');\n    const msgHex = byteArray2hexStr(msgBytes);\n\n    shaObj.update(msgHex);\n    const hashHex = shaObj.getHash('HEX');\n\n    return hexStr2byteArray(hashHex);\n}\n\nexport function passwordToAddress(password) {\n    const com_priKeyBytes = base64DecodeFromString(password);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n\nexport function pkToAddress(privateKey) {\n    const com_priKeyBytes = hexStr2byteArray(privateKey);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n","import { byteArray2hexStr } from './bytes';\nimport { \n    getBase58CheckAddress,\n    genPriKey,\n    getAddressFromPriKey,\n    getPubKeyFromPriKey\n} from './crypto';\n\nexport function generateAccount() {\n    const priKeyBytes = genPriKey();\n    const pubKeyBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = getAddressFromPriKey(priKeyBytes);\n    \n    const privateKey = byteArray2hexStr(priKeyBytes);\n    const publicKey = byteArray2hexStr(pubKeyBytes);\n\n    return {\n        privateKey,\n        publicKey,\n        address: {\n            base58: getBase58CheckAddress(addressBytes),\n            hex: byteArray2hexStr(addressBytes)\n        }\n    }\n}","import * as Ethers from 'ethers';\nimport TronWeb from 'index';\n\nconst abiCoder = new Ethers.utils.AbiCoder();\n\nexport function decodeParams(names, types, output, ignoreMethodHash) {\n\n    if (!output || typeof output === 'boolean') {\n        ignoreMethodHash = output;\n        output = types;\n        types = names;\n        names = [];\n    }\n\n    if (ignoreMethodHash && output.replace(/^0x/,'').length % 64 === 8)\n        output = '0x' + output.replace(/^0x/,'').substring(8);\n\n    if (output.replace(/^0x/,'').length % 64)\n        throw new Error('The encoded string is not valid. Its length must be a multiple of 64.');\n\n    return abiCoder.decode(types, output).reduce((obj, arg, index) => {\n        if(types[index] == 'address')\n            arg = '41' + arg.substr(2).toLowerCase();\n\n        if(names.length)\n            obj[names[index]] = arg;\n        else obj.push(arg);\n\n        return obj;\n    }, names.length ? {} : []);\n}\n\nexport function encodeParams(types, values) {\n\n    for (let i =0;i<types.length;i++) {\n        if (types[i] === 'address') {\n            values[i] =  TronWeb.address.toHex(values[i]).replace(/^41/, '0x');\n        }\n    }\n\n    return abiCoder.encode(types, values);\n}\n","import * as accounts from './accounts';\nimport * as base58 from './base58';\nimport * as bytes from './bytes';\nimport * as crypto from './crypto';\nimport * as code from './code';\nimport * as abi from './abi';\n\nimport validator from 'validator';\nimport BigNumber from 'bignumber.js';\n\nconst utils = {\n    isValidURL(url) {\n        return validator.isURL(url.toString(), {\n            protocols: [ 'http', 'https' ]\n        });\n    },\n\n    isObject(obj) {\n        return obj === Object(obj) && Object.prototype.toString.call(obj) !== '[object Array]';\n    },\n\n    isArray(array) {\n        return Array.isArray(array);\n    },\n\n    isJson(string) {\n        try {\n            return !!JSON.parse(string);\n        } catch (ex) {\n            return false;\n        }\n    },\n\n    isBoolean(bool) {\n        return typeof bool === 'boolean';\n    },\n\n    isBigNumber(number) {\n        return number && (number instanceof BigNumber || (number.constructor && number.constructor.name === 'BigNumber'));\n    },\n\n    isString(string) {\n        return typeof string === 'string' || (string && string.constructor && string.constructor.name === 'String');\n    },\n\n    isFunction(obj) {\n        return typeof obj === 'function';\n    },\n\n    isHex(string) {\n        return typeof string === 'string' && !isNaN(parseInt(string, 16));\n    },\n\n    isInteger(number) {\n        return Number.isInteger(\n            Number(number)\n        );\n    },\n\n    hasProperty(obj, property) {\n        return Object.prototype.hasOwnProperty.call(obj, property);\n    },\n\n    hasProperties(obj, ...properties) {\n        return properties.length && !properties.map(property => {\n            return this.hasProperty(obj, property)\n        }).includes(false);\n    },\n\n    injectPromise(func, ...args) {\n        return new Promise((resolve, reject) => {\n            func(...args, (err, res) => {\n                if(err)\n                    reject(err);\n                else resolve(res);\n            });\n        });\n    },\n\n    promiseInjector(scope) {\n        return (func, ...args) => {\n            return this.injectPromise(func.bind(scope), ...args);\n        }\n    },\n\n    mapEvent(event) {\n        return {\n            block: event.block_number,\n            timestamp: event.block_timestamp,\n            contract: event.contract_address,\n            name: event.event_name,\n            transaction: event.transaction_id,\n            result: event.result,\n            resourceNode: event.resource_Node\n        };\n    },\n\n    parseEvent(event, { inputs: abi }) {\n        if(!event.result)\n            return event;\n\n        if (this.isObject(event.result)) {\n            for (var i = 0; i < abi.length; i++) {\n                let obj = abi[i];\n                if (obj.type == 'address' && obj.name in event.result)\n                    event.result[obj.name] = '41' + event.result[obj.name].substr(2).toLowerCase();\n            }\n        } else if (this.isArray(event.result)) {\n            event.result = event.result.reduce((obj, result, index) => {\n                const {\n                    name,\n                    type\n                } = abi[index];\n\n                if(type == 'address')\n                    result = '41' + result.substr(2).toLowerCase();\n\n                obj[name] = result;\n\n                return obj;\n            }, {});\n        }\n\n        return event;\n    },\n\n    padLeft(input, padding, amount) {\n        let res = input.toString();\n\n        while(res.length < amount)\n            res = padding + res;\n\n        return res;\n    }\n}\n\nexport default {\n    ...utils,\n    code,\n    accounts,\n    base58,\n    bytes,\n    crypto,\n    abi\n};\n","import HttpProvider from './HttpProvider';\n\nexport default {\n    HttpProvider\n};","import axios from 'axios';\nimport utils from 'utils';\n\nexport default class HttpProvider {\n    constructor(host, timeout = 30000, user = false, password = false, headers = {}, statusPage = '/') {\n        if(!utils.isValidURL(host))\n            throw new Error('Invalid URL provided to HttpProvider');\n\n        if(isNaN(timeout) || timeout < 0)\n            throw new Error('Invalid timeout duration provided');\n\n        if(!utils.isObject(headers))\n            throw new Error('Invalid headers object provided');\n\n        host = host.replace(/\\/+$/,'');\n\n        this.host = host;\n        this.timeout = timeout;\n        this.user = user;\n        this.password = password;\n        this.headers = headers;\n        this.statusPage = statusPage;\n\n        this.instance = axios.create({\n            baseURL: host,\n            timeout: timeout,\n            headers: headers,\n            auth: user && {\n                user,\n                password\n            },\n        });\n    }\n\n    setStatusPage(statusPage = '/') {\n        this.statusPage = statusPage;\n    }\n\n    async isConnected(statusPage = this.statusPage) {\n        return this.request(statusPage).then(data => {\n            return utils.hasProperties(data, 'blockID', 'block_header');\n        }).catch(() => false);\n    }\n\n    request(url, payload = {}, method = 'get') {\n        method = method.toLowerCase();\n\n        return this.instance.request({\n            data: method == 'post' && Object.keys(payload).length ? payload : null,\n            params: method =='get' && payload,\n            url,\n            method\n        }).then(({ data }) => data);\n    }\n};\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport * as Ethers from 'ethers';\n\nexport default class TransactionBuilder {\n    constructor(tronWeb = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    sendTrx(to = false, amount = 0, from = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.sendTrx, to, amount, from);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!this.tronWeb.isAddress(from))\n            return callback('Invalid origin address provided');\n\n        to = this.tronWeb.address.toHex(to);\n        from = this.tronWeb.address.toHex(from);\n\n        if(to === from)\n            return callback('Cannot transfer TRX to the same account');\n\n        this.tronWeb.fullNode.request('wallet/createtransaction', {\n            to_address: to,\n            owner_address: from,\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    sendToken(to = false, amount = 0, tokenID = false, from = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, from);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if(!this.tronWeb.isAddress(from))\n            return callback('Invalid origin address provided');\n\n        to = this.tronWeb.address.toHex(to);\n        tokenID = this.tronWeb.fromUtf8(tokenID);\n        from = this.tronWeb.address.toHex(from);\n\n        if(to === from)\n            return callback('Cannot transfer tokens to the same account');\n\n        this.tronWeb.fullNode.request('wallet/transferasset', {\n            to_address: to,\n            owner_address: from,\n            asset_name: tokenID,\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    purchaseToken(issuerAddress = false, tokenID = false, amount = 0, buyer = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(buyer)) {\n            callback = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.purchaseToken, issuerAddress, tokenID, amount, buyer);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!this.tronWeb.isAddress(buyer))\n            return callback('Invalid buyer address provided');\n\n        this.tronWeb.fullNode.request('wallet/participateassetissue', {\n            to_address: this.tronWeb.address.toHex(issuerAddress),\n            owner_address: this.tronWeb.address.toHex(buyer),\n            asset_name: this.tronWeb.fromUtf8(tokenID),\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, callback = false)\n    {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if(!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, address);\n\n        if(![ 'BANDWIDTH', 'ENERGY' ].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isInteger(duration) || duration < 3)\n            return callback('Invalid duration provided, minimum of 3 days');\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/freezebalance', {\n            owner_address: this.tronWeb.address.toHex(address),\n            frozen_balance: parseInt(amount),\n            frozen_duration: parseInt(duration),\n            resource: resource\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    unfreezeBalance(resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, callback = false)\n    {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if(!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, address);\n\n        if(![ 'BANDWIDTH', 'ENERGY' ].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/unfreezebalance', {\n            owner_address: this.tronWeb.address.toHex(address),\n            resource: resource\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    withdrawBlockRewards(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.withdrawBlockRewards, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n        \n        this.tronWeb.fullNode.request('wallet/withdrawbalance', {\n            owner_address: this.tronWeb.address.toHex(address)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    applyForSR(address = this.tronWeb.defaultAddress.hex, url = false, callback = false) {\n        if(utils.isValidURL(address)) {\n            callback = url || false;\n            url = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.applyForSR, address, url);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isValidURL(url))\n            return callback('Invalid url provided');\n        \n        this.tronWeb.fullNode.request('wallet/createwitness', {\n            owner_address: this.tronWeb.address.toHex(address),\n            url: this.tronWeb.fromUtf8(url)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    vote(votes = {}, voterAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.vote, votes, voterAddress);\n\n        if(!utils.isObject(votes) || !Object.keys(votes).length)\n            return callback('Invalid votes object provided');\n\n        if(!this.tronWeb.isAddress(voterAddress))\n            return callback('Invalid voter address provided');\n\n        let invalid = false;\n\n        votes = Object.entries(votes).map(([ srAddress, voteCount ]) => {\n            if(invalid)\n                return;\n\n            if(!this.tronWeb.isAddress(srAddress)) {\n                callback('Invalid SR address provided: ' + srAddress);\n                return invalid = true;\n            }\n\n            if(!utils.isInteger(voteCount) || voteCount <= 0) {\n                callback('Invalid vote count provided for SR: ' + srAddress);\n                return invalid = true;\n            }\n\n            return {\n                vote_address: this.tronWeb.address.toHex(srAddress),\n                vote_count: parseInt(voteCount)\n            };\n        });\n\n        if(invalid)\n            return;\n\n        this.tronWeb.fullNode.request('wallet/votewitnessaccount', {\n            owner_address: this.tronWeb.address.toHex(voterAddress),\n            votes\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    createSmartContract(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.createSmartContract, options, issuerAddress);\n\n        let {\n            abi = false,\n            bytecode = false,\n            feeLimit = 1_000_000_000,\n            callValue = 0,\n            userFeePercentage = 0,\n            parameters = [],\n            name = \"\",\n        } = options;\n        \n\n        if(abi && utils.isString(abi)) {\n            try {\n                abi = JSON.parse(abi);\n            } catch{\n                return callback('Invalid options.abi provided');\n            }\n        }\n\n        if(!utils.isArray(abi))\n            return callback('Invalid options.abi provided');\n\n\n        const payable = abi.some(func => {\n            return func.type == 'constructor' && func.payable;\n        });\n\n        if(!utils.isHex(bytecode))\n            return callback('Invalid options.bytecode provided');\n\n        if(!utils.isInteger(feeLimit) || feeLimit <= 0 || feeLimit > 1_000_000_000)\n            return callback('Invalid options.feeLimit provided');\n\n        if(!utils.isInteger(callValue) || callValue < 0)\n            return callback('Invalid options.callValue provided');\n\n        if(payable && callValue == 0)\n            return callback('When contract is payable, options.callValue must be a positive integer');\n\n        if(!payable && callValue > 0)\n            return callback('When contract is not payable, options.callValue must be 0');\n\n        if(!utils.isInteger(userFeePercentage) || userFeePercentage < 0 || userFeePercentage > 100)\n            return callback('Invalid options.userFeePercentage provided');\n\n        if(!utils.isArray(parameters))\n            return callback('Invalid parameters provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        var constructorParams = abi.find(\n            (it) => {\n                return it.type === 'constructor';\n            }\n        );\n\n        if(typeof constructorParams !== 'undefined' && constructorParams) {\n            const abiCoder = new Ethers.utils.AbiCoder();\n            const types = [];\n            const values = [];\n            constructorParams = constructorParams.inputs;\n\n            if(parameters.length != constructorParams.length)\n                return callback(`constructor needs ${constructorParams.length} but ${parameters.length} provided`);\n\n            for(let i = 0; i < parameters.length; i++) {\n                let type = constructorParams[i].type;\n                let value = parameters[i];\n\n                if(!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if(type == 'address')\n                    value = this.tronWeb.address.toHex(value).replace(/^(41)/, '0x');\n                    \n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        this.tronWeb.fullNode.request('wallet/deploycontract', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            consume_user_resource_percent: userFeePercentage,\n            abi: JSON.stringify(abi),\n            bytecode,\n            parameter: parameters,\n            name\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    triggerSmartContract(\n        contractAddress, \n        functionSelector,\n        feeLimit = 1_000_000_000,\n        callValue = 0,\n        parameters = [], \n        issuerAddress = this.tronWeb.defaultAddress.hex, \n        callback = false\n    ) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(parameters)) {\n            callback = parameters;\n            parameters = [];\n        }\n\n        if(utils.isFunction(callValue)) {\n            callback = callValue;\n            callValue = 0;\n        }\n\n        if(utils.isFunction(feeLimit)) {\n            callback = feeLimit;\n            feeLimit = 1_000_000_000;\n        }\n\n        if(!callback) {\n            return this.injectPromise(\n                this.triggerSmartContract, \n                contractAddress, \n                functionSelector, \n                feeLimit,\n                callValue, \n                parameters,\n                issuerAddress\n            );\n        }\n\n        if(!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if(!utils.isString(functionSelector) || !functionSelector.length)\n            return callback('Invalid function selector provided');\n\n        if(!utils.isInteger(callValue) || callValue < 0)\n            return callback('Invalid call value provided');\n\n        if(!utils.isInteger(feeLimit) || feeLimit <= 0 || feeLimit > 1_000_000_000)\n            return callback('Invalid fee limit provided');\n\n        if(!utils.isArray(parameters))\n            return callback('Invalid parameters provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        functionSelector = functionSelector.replace('/\\s*/g', '');\n\n        if(parameters.length) {\n            const abiCoder = new Ethers.utils.AbiCoder();\n            const types = [];\n            const values = [];\n\n            for(let i = 0; i < parameters.length; i++) {\n                let { type, value } = parameters[i];\n\n                if(!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if(type == 'address')\n                    value = this.tronWeb.address.toHex(value).replace(/^(41)/, '0x');\n                    \n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        this.tronWeb.fullNode.request('wallet/triggersmartcontract', {\n            contract_address: this.tronWeb.address.toHex(contractAddress),\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            function_selector: functionSelector,\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            parameter: parameters\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            if(!transaction.result.result)\n                return callback(transaction);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    createToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.createToken, options, issuerAddress);\n\n        const {\n            name = false,\n            abbreviation = false,\n            description = false,\n            url = false,\n            totalSupply = 0,\n            trxRatio = 1, // How much TRX will `tokenRatio` cost?\n            tokenRatio = 1, // How many tokens will `trxRatio` afford?\n            saleStart = Date.now(),\n            saleEnd = false,            \n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0, // Out of `totalFreeBandwidth`, the amount each token holder get\n            frozenAmount = 0,\n            frozenDuration = 0\n        } = options;\n\n        if(!utils.isString(name) || !name.length)\n            return callback('Invalid token name provided');\n\n        if(!utils.isString(abbreviation) || !abbreviation.length)\n            return callback('Invalid token abbreviation provided');\n\n        if(!utils.isInteger(totalSupply) || totalSupply <= 0)\n            return callback('Invalid supply amount provided');\n\n        if(!utils.isInteger(trxRatio) || trxRatio <= 0)\n            return callback('TRX ratio must be a positive integer');\n\n        if(!utils.isInteger(tokenRatio) || tokenRatio <= 0)\n            return callback('Token ratio must be a positive integer');\n\n        if(!utils.isInteger(saleStart) || saleStart < Date.now())\n            return callback('Invalid sale start timestamp provided');\n\n        if(!utils.isInteger(saleEnd) || saleEnd <= saleStart)\n            return callback('Invalid sale end timestamp provided');\n\n        if(!utils.isString(description) || !description.length)\n            return callback('Invalid token description provided');\n\n        if(!utils.isString(url) || !url.length || !utils.isValidURL(url))\n            return callback('Invalid token url provided');\n\n        if(!utils.isInteger(freeBandwidth) || freeBandwidth < 0)\n            return callback('Invalid free bandwidth amount provided');\n\n        if(!utils.isInteger(freeBandwidthLimit) || freeBandwidthLimit < 0 || (freeBandwidth && !freeBandwidthLimit))\n            return callback('Invalid free bandwidth limit provided');\n\n        if(!utils.isInteger(frozenAmount) || frozenAmount < 0 || (!frozenDuration && frozenAmount))\n            return callback('Invalid frozen supply provided');\n\n        if(!utils.isInteger(frozenDuration) || frozenDuration < 0 || (frozenDuration && !frozenAmount))\n            return callback('Invalid frozen duration provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        this.tronWeb.fullNode.request('wallet/createassetissue', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            name: this.tronWeb.fromUtf8(name),\n            abbr: this.tronWeb.fromUtf8(abbreviation),\n            description: this.tronWeb.fromUtf8(description),\n            url: this.tronWeb.fromUtf8(url),\n            total_supply: parseInt(totalSupply),\n            trx_num: parseInt(trxRatio),\n            num: parseInt(tokenRatio),\n            start_time: parseInt(saleStart),\n            end_time: parseInt(saleEnd),\n            free_asset_net_limit: parseInt(freeBandwidth),\n            public_free_asset_net_limit: parseInt(freeBandwidthLimit),\n            frozen_supply: {\n                frozen_amount: parseInt(frozenAmount),\n                frozen_days: parseInt(frozenDuration)\n            }\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    updateAccount(accountName = false, address = this.tronWeb.defaultAddress.hex, callback = false)\n    {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback) {\n            return this.injectPromise(this.updateAccount, accountName, address);\n        }\n\n        if (!utils.isString(accountName) || !accountName.length) {\n            return callback('Name must be a string');\n        }\n\n        if(!this.tronWeb.isAddress(address)) {\n            return callback('Invalid origin address provided');\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateaccount', {\n            account_name: this.tronWeb.fromUtf8(accountName),\n            owner_address: this.tronWeb.address.toHex(address),\n        }, 'post').then(transaction => {\n\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    updateToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.updateToken, options, issuerAddress);\n\n        const {\n            description = false,\n            url = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0 // Out of `totalFreeBandwidth`, the amount each token holder get\n        } = options;\n\n        if(!utils.isInteger(freeBandwidth) || freeBandwidth < 0)\n            return callback('Invalid free bandwidth amount provided');\n\n        if(!utils.isInteger(freeBandwidthLimit) || freeBandwidthLimit < 0 || (freeBandwidth && !freeBandwidthLimit))\n            return callback('Invalid free bandwidth limit provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        this.tronWeb.fullNode.request('wallet/updateasset', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            description: this.tronWeb.fromUtf8(description),\n            url: this.tronWeb.fromUtf8(url),\n            new_limit: parseInt(freeBandwidth),\n            new_public_limit: parseInt(freeBandwidthLimit)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    purchaseAsset(...args) {\n        return this.purchaseToken(...args);\n    }\n\n    createAsset(...args) {\n        return this.createToken(...args);\n    }\n\n    updateAsset(...args) {\n        return this.updateToken(...args);\n    }\n\n    /**\n     * Creates a proposal to modify the network.\n     * Can only be created by a current Super Representative.\n     */\n    createProposal(parameters = false, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!parameters)\n            return callback('Invalid proposal parameters provided');\n\n        if(!callback)\n            return this.injectPromise(this.createProposal, parameters, issuerAddress);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuerAddress provided');\n\n        if (!utils.isArray(parameters)) {\n            parameters = [parameters];\n        }\n\n        for (let parameter of parameters) {\n            if(!utils.isObject(parameter))\n                return callback('Invalid parameters provided');\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposalcreate', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            parameters: parameters\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Deletes a network modification proposal that the owner issued.\n     * Only current Super Representative can vote on a proposal.\n     */\n    deleteProposal(proposalID = false, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.deleteProposal, proposalID, issuerAddress);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuerAddress provided');\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/proposaldelete', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            proposal_id: parseInt(proposalID)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds a vote to an issued network modification proposal.\n     * Only current Super Representative can vote on a proposal.\n     */\n    voteProposal(proposalID = false, hasApproval = false, voterAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.voteProposal, proposalID, hasApproval, voterAddress);\n\n        if(!this.tronWeb.isAddress(voterAddress))\n            return callback('Invalid voterAddress address provided');\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        if(!utils.isBoolean(hasApproval))\n            return callback('Invalid hasApproval provided');\n\n        this.tronWeb.fullNode.request('wallet/proposalapprove', {\n            owner_address: this.tronWeb.address.toHex(voterAddress),\n            proposal_id: parseInt(proposalID),\n            is_add_approval: isApproval.toString()\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between a token and TRX.\n     * Token Name should be a CASE SENSITIVE string. \n     * PLEASE VERIFY THIS ON TRONSCAN.\n     */\n    createTRXExchange(tokenName, tokenBalance, trxBalance, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createTRXExchange, tokenName, tokenBalance, trxBalance, ownerAddress);\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid address provided');\n\n        if (!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if (!utils.isInteger(tokenBalance) || tokenBalance <= 0\n            || !utils.isInteger(trxBalance) || trxBalance <= 0)\n            return callback('Invalid amount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            first_token_id: this.tronWeb.fromUtf8(tokenName),\n            first_token_balance: tokenBalance,\n            second_token_id: '5f', // Constant for TRX.\n            second_token_balance: trxBalance\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between a token and another token.\n     * DO NOT USE THIS FOR TRX.\n     * Token Names should be a CASE SENSITIVE string. \n     * PLEASE VERIFY THIS ON TRONSCAN.\n     */\n    createTokenExchange(firstTokenName, firstTokenBalance, secondTokenName, secondTokenBalance, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createTRXExchange, firstTokenName, firstTokenBalance, secondTokenName, secondTokenBalance, ownerAddress);\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid address provided');\n\n        if (!utils.isString(firstTokenName) || !firstTokenName.length)\n            return callback('Invalid firstTokenName provided');\n\n        if (!utils.isString(secondTokenName) || !secondTokenName.length)\n            return callback('Invalid secondTokenName provided');\n\n        if (!utils.isInteger(firstTokenBalance) || firstTokenBalance <= 0\n            || !utils.isInteger(secondTokenBalance) || secondTokenBalance <= 0)\n            return callback('Invalid amount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            first_token_id: this.tronWeb.fromUtf8(firstTokenName),\n            first_token_balance: firstTokenBalance,\n            second_token_id: this.tronWeb.fromUtf8(secondTokenName),\n            second_token_balance: secondTokenBalance\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds tokens into a bancor style exchange.\n     * Will add both tokens at market rate.\n     * Use \"_\" for the constant value for TRX.\n     */\n    injectExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.injectExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmount) || tokenAmount < 1)\n            return callback('Invalid tokenAmount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangeinject', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromUtf8(tokenName),\n            quant:parseInt(tokenAmount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Withdraws tokens from a bancor style exchange.\n     * Will withdraw at market rate both tokens.\n     * Use \"_\" for the constant value for TRX.\n     */\n    withdrawExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.withdrawExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmount) || tokenAmount < 1)\n            return callback('Invalid tokenAmount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangewithdraw', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromUtf8(tokenName),\n            quant:parseInt(tokenAmount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Trade tokens on a bancor style exchange.\n     * Expected value is a validation and used to cap the total amt of token 2 spent.\n     * Use \"_\" for the constant value for TRX.\n     */\n    tradeExchangeTokens(exchangeID = false, \n        tokenName = false, \n        tokenAmountSold = 0, \n        tokenAmountExpected = 0, \n        ownerAddress = this.tronWeb.defaultAddress.hex, \n        callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.tradeExchangeTokens, exchangeID, tokenName, tokenAmountSold, tokenAmountExpected, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmountSold) || tokenAmountSold < 1)\n            return callback('Invalid tokenAmountSold provided');\n\n        if(!utils.isInteger(tokenAmountExpected) || tokenAmountExpected < 1)\n            return callback('Invalid tokenAmountExpected provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangetransaction', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant:parseInt(tokenAmountSold),\n            expected:parseInt(tokenAmountExpected)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport * as Ethers from 'ethers';\n\nconst TRX_MESSAGE_HEADER = '\\x19TRON Signed Message:\\n32';\nconst ETH_MESSAGE_HEADER = '\\x19Ethereum Signed Message:\\n32';\n\nexport default class Trx {\n    constructor(tronWeb = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    parseToken(token) {\n        return {\n            ...token,\n            name: this.tronWeb.toUtf8(token.name),\n            abbr: token.abbr && this.tronWeb.toUtf8(token.abbr),\n            description: token.description && this.tronWeb.toUtf8(token.description),\n            url: token.url && this.tronWeb.toUtf8(token.url)\n        };\n    }\n\n    getCurrentBlock(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getCurrentBlock);\n\n        this.tronWeb.fullNode.request('wallet/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlock(block = this.tronWeb.defaultBlock, callback = false) {\n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlock, block);\n\n        if(block === false)\n            return callback('No block identifier provided');\n\n        if(block == 'earliest')\n            block = 0;\n\n        if(block == 'latest')\n            return this.getCurrentBlock(callback);\n\n        if(isNaN(block) && utils.isHex(block))\n            return this.getBlockByHash(block, callback);\n\n        this.getBlockByNumber(block, callback);\n    }\n\n    getBlockByHash(blockHash, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getBlockByHash, blockHash);\n\n        this.tronWeb.fullNode.request('wallet/getblockbyid', { \n            value: blockHash \n        }, 'post').then(block => {\n            if(!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockByNumber(blockID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getBlockByNumber, blockID);\n\n        if(!utils.isInteger(blockID) || blockID < 0)\n            return callback('Invalid block number provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbynum', { \n            num: parseInt(blockID) \n        }, 'post').then(block => {\n            if(!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockTransactionCount(block = this.tronWeb.defaultBlock, callback = false) {\n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlockTransactionCount, block);\n\n        this.getBlock(block).then(({ transactions = [] }) => {\n            callback(null, transactions.length);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionFromBlock(block = this.tronWeb.defaultBlock, index = 0, callback = false) {\n        if(utils.isFunction(index)) {\n            callback = index;\n            index = 0;\n        }\n        \n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionFromBlock, block, index);\n\n        if(!utils.isInteger(index) || index < 0)\n            return callback('Invalid transaction index provided');\n\n        this.getBlock(block).then(({ transactions = false }) => {\n            if(!transactions || transactions.length < index)\n                return callback('Transaction not found in block');\n\n            callback(null, transactions[index]);\n        }).catch(err => callback(err));\n    }\n\n    getTransaction(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTransaction, transactionID);\n\n        this.tronWeb.fullNode.request('wallet/gettransactionbyid', { \n            value: transactionID \n        }, 'post').then(transaction => {\n            if(!Object.keys(transaction).length)\n                return callback('Transaction not found');\n                \n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getConfirmedTransaction(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getConfirmedTransaction, transactionID);\n\n        this.tronWeb.solidityNode.request('walletsolidity/gettransactionbyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            if(!Object.keys(transaction).length)\n                return callback('Transaction not found');\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionInfo(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTransactionInfo, transactionID);\n\n        this.tronWeb.solidityNode.request('walletsolidity/gettransactioninfobyid', { \n            value: transactionID \n        }, 'post').then(transaction => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionsToAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;          \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsToAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'to', limit, offset, callback);\n    }\n\n    getTransactionsFromAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;           \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsFromAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'from', limit, offset, callback);\n    }\n\n    async getTransactionsRelated(address = this.tronWeb.defaultAddress.hex, direction = 'all', limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;         \n        }\n\n        if(utils.isFunction(direction)) {\n            callback = direction;\n            direction = 'all';\n        }\n\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsRelated, address, direction, limit, offset);\n\n        if(![ 'to', 'from', 'all' ].includes(direction))\n            return callback('Invalid direction provided: Expected \"to\", \"from\" or \"all\"');\n        \n        if(direction == 'all') {\n            try {\n                const [from, to] = await Promise.all([\n                    this.getTransactionsRelated(address, 'from', limit, offset),\n                    this.getTransactionsRelated(address, 'to', limit, offset)\n                ])\n\n                return callback(null, [\n                    ...from.map(tx => (tx.direction = 'from', tx)),\n                    ...to.map(tx => (tx.direction = 'to', tx))\n                ].sort((a, b) => b.raw_data.timestamp - a.raw_data.timestamp));\n            } catch(ex) {\n                return callback(ex);\n            }\n        }\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if(!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request(`walletextension/gettransactions${direction}this`, {\n            account: {\n                address\n            },\n            offset,\n            limit\n        }, 'post').then(({ transaction }) => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getAccount, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBalance, address);\n\n        this.getAccount(address).then(({ balance = 0 }) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getUnconfirmedAccount, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getUnconfirmedBalance, address);\n\n        this.getUnconfirmedAccount(address).then(({ balance = 0 }) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getBandwidth(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBandwidth, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccountnet', {\n            address\n        }, 'post').then(({ freeNetUsed = 0, freeNetLimit = 0, NetUsed = 0, NetLimit = 0 }) => {\n            callback(null, (freeNetLimit - freeNetUsed) + (NetLimit - NetUsed));\n        }).catch(err => callback(err));\n    }\n\n    getTokensIssuedByAddress(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTokensIssuedByAddress, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyaccount', {\n            address\n        }, 'post').then(({ assetIssue = false }) => {\n            if(!assetIssue)\n                return callback(null, {});\n\n            const tokens = assetIssue.map(token => {\n                return this.parseToken(token);\n            }).reduce((tokens, token) => {\n                return tokens[token.name] = token, tokens;\n            }, {});\n\n            callback(null, tokens);\n        }).catch(err => callback(err));\n    }\n\n    getTokenFromID(tokenID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTokenFromID, tokenID);\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if(!token.name)\n                return callback('Token does not exist');\n                \n            callback(null, this.parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    listNodes(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listNodes);\n\n        this.tronWeb.fullNode.request('wallet/listnodes').then(({ nodes = [] }) => {\n            callback(null, nodes.map(({ address: { host, port } }) => (\n                `${this.tronWeb.toUtf8(host)}:${port}`\n            )));\n        }).catch(err => callback(err));\n    }\n\n    getBlockRange(start = 0, end = 30, callback = false) {\n        if(utils.isFunction(end)) {\n            callback = end;\n            end = 30;            \n        }\n\n        if(utils.isFunction(start)) {\n            callback = start;\n            start = 0;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlockRange, start, end);\n\n        if(!utils.isInteger(start) || start < 0)\n            return callback('Invalid start of range provided');\n\n        if(!utils.isInteger(end) || end <= start)\n            return callback('Invalid end of range provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbylimitnext', { \n            startNum: parseInt(start),\n            endNum: parseInt(end) + 1\n        }, 'post').then(({ block = [] }) => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    listSuperRepresentatives(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listSuperRepresentatives);\n\n        this.tronWeb.fullNode.request('wallet/listwitnesses').then(({ witnesses = [] }) => {\n            callback(null, witnesses);\n        }).catch(err => callback(err));\n    }\n\n    listTokens(limit = 0, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 0;  \n        }\n        \n        if(!callback)\n            return this.injectPromise(this.listTokens, limit, offset);\n\n        if(!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if(!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        if(!limit) {\n            return this.tronWeb.fullNode.request('wallet/getassetissuelist').then(({ assetIssue = [] }) => {\n                callback(null, assetIssue.map(token => this.parseToken(token)));\n            }).catch(err => callback(err));\n        }\n\n        this.tronWeb.fullNode.request('wallet/getpaginatedassetissuelist', {\n            offset: parseInt(offset),\n            limit: parseInt(limit)\n        }, 'post').then(({ assetIssue = [] }) => {\n            callback(null, assetIssue.map(token => this.parseToken(token)));\n        }).catch(err => callback(err));\n    }\n\n    timeUntilNextVoteCycle(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.timeUntilNextVoteCycle);\n\n        this.tronWeb.fullNode.request('wallet/getnextmaintenancetime').then(({ num = -1 }) => {\n            if(num == -1)\n                return callback('Failed to get time until next vote cycle');\n\n            callback(null, Math.floor(num / 1000));\n        }).catch(err => callback(err));\n    }\n\n    getContract(contractAddress, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getContract, contractAddress);\n\n        if(!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        contractAddress = this.tronWeb.address.toHex(contractAddress);\n\n        this.tronWeb.fullNode.request('wallet/getcontract', {\n            value: contractAddress\n        }).then(contract => {\n            if(contract.Error)\n                return callback('Contract does not exist');\n\n            callback(null, contract);\n        }).catch(err => callback(err));\n    }\n\n    async verifyMessage(message = false, signature = false, address = this.tronWeb.defaultAddress.base58, useTronHeader = true, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.base58;\n            useTronHeader = true;\n        }\n\n        if(utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.verifyMessage, message, signature, address, useTronHeader);\n\n        if(!utils.isHex(message))\n            return callback('Expected hex message input');\n\n        if(message.substr(0, 2) == '0x')\n            message = message.substring(2);\n\n        if(signature.substr(0, 2) == '0x')\n            signature = signature.substr(2);\n\n        const messageBytes = [\n            ...Ethers.utils.toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n            ...utils.code.hexStr2byteArray(message)\n        ];\n\n        const messageDigest = Ethers.utils.keccak256(messageBytes);\n        const recovered = Ethers.utils.recoverAddress(messageDigest, {\n            recoveryParam: signature.substring(128, 130) == '1c' ? 1 : 0,\n            r: '0x' + signature.substring(0, 64),\n            s: '0x' + signature.substring(64, 128)\n        });\n\n        const tronAddress = '41' + recovered.substr(2);\n        const base58Address = this.tronWeb.address.fromHex(tronAddress);\n\n        if(base58Address == this.tronWeb.address.fromHex(address))\n            return callback(null, true);\n\n        callback('Signature does not match');\n    }\n\n    async sign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, useTronHeader = true, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n            useTronHeader = true;\n        }\n\n        if(utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sign, transaction, privateKey, useTronHeader);\n\n        // Message signing\n        if(utils.isString(transaction)) {\n            if(transaction.substring(0, 2) == '0x')\n                transaction = transaction.substring(2);\n\n            if(!utils.isHex(transaction))\n                return callback('Expected hex message input');\n\n            try {\n                const signingKey = new Ethers.utils.SigningKey(privateKey);\n                const messageBytes = [\n                    ...Ethers.utils.toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n                    ...utils.code.hexStr2byteArray(transaction)\n                ];\n\n                const messageDigest = Ethers.utils.keccak256(messageBytes);\n                const signature = signingKey.signDigest(messageDigest);\n\n                const signatureHex = [\n                    '0x',\n                    signature.r.substring(2),\n                    signature.s.substring(2),\n                    Number(signature.v).toString(16)\n                ].join('');\n\n                return callback(null, signatureHex);\n            } catch(ex) {\n                callback(ex);\n            }\n        }\n\n        if(!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if(transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            const address = this.tronWeb.address.toHex(\n                this.tronWeb.address.fromPrivateKey(privateKey)\n            ).toLowerCase();\n\n            if(address !== transaction.raw_data.contract[0].parameter.value.owner_address.toLowerCase())\n                return callback('Private key does not match address in transaction');\n\n            return callback(null,\n                utils.crypto.signTransaction(privateKey, transaction)\n            );\n        } catch(ex) {\n            callback(ex);\n        }\n    }\n\n    sendRawTransaction(signedTransaction = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sendRawTransaction, signedTransaction, options);\n\n        if(!utils.isObject(signedTransaction))\n            return callback('Invalid transaction provided');\n\n        if(!utils.isObject(options))\n            return callback('Invalid options provided');\n\n        if(!signedTransaction.signature || !utils.isArray(signedTransaction.signature))\n            return callback('Transaction is not signed');\n\n        this.tronWeb.fullNode.request(\n            'wallet/broadcasttransaction',\n            signedTransaction,\n            'post'\n        ).then(result => {\n            callback(null, result);\n            if (result.result) {\n                const timeout = Date.now() + 6e4 // 1 minutes\n                const isMined = async () => {\n                    let transaction = await this.tronWeb.trx.getTransactionInfo(signedTransaction.txID)\n                    if (Date.now() < timeout && (!utils.isObject(transaction) || !transaction.blockNumber)) {\n                        this.tronWeb.fullNode.request(\n                            'wallet/broadcasttransaction',\n                            signedTransaction,\n                            'post'\n                        ).then(result => {\n                        }).catch(err => {\n                        });\n                        setTimeout(isMined, 5e3)\n                    } else if (options.onConfirmation) {\n                        let err = null\n                        if (Date.now() >= timeout) {\n                            err = 'Broadcast timeout'\n                            transaction = null\n                        }\n                        options.onConfirmation(err, transaction);\n                    }\n                }\n\n                setTimeout(isMined, 5e3)\n            }\n        }).catch(err => callback(err));\n    }\n\n\n    async sendTransaction(to = false, amount = false, options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        \n        if(typeof options === 'string')\n            options = { privateKey: options };\n\n        if(!callback)\n            return this.injectPromise(this.sendTransaction, to, amount, options);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendTrx(to, amount, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    async sendToken(to = false, amount = false, tokenID = false, options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        \n        if(typeof options === 'string')\n            options = { privateKey: options };\n\n        if(!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, options);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isString(tokenID))\n            return callback('Invalid token ID provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendToken(to, amount, tokenID, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n/**\n     * Freezes an amount of TRX.\n     * Will give bandwidth OR Energy and TRON Power(voting rights)\n     * to the owner of the frozen tokens.\n     *\n     * @param amount - is the number of frozen trx\n     * @param duration - is the duration in days to be frozen\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", options = {}, callback = false)\n    {\n        if(utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        \n        if(typeof options === 'string')\n            options = { privateKey: options };\n\n        if(!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, options);\n\n        if(![ 'BANDWIDTH', 'ENERGY' ].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isInteger(duration) || duration < 3)\n            return callback('Invalid duration provided, minimum of 3 days');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const freezeBalance = await this.tronWeb.transactionBuilder.freezeBalance(amount, duration, resource, address);\n            const signedTransaction = await this.sign(freezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Unfreeze TRX that has passed the minimum freeze duration.\n     * Unfreezing will remove bandwidth and TRON Power.\n     *\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async unfreezeBalance(resource = \"BANDWIDTH\", options = {}, callback = false)\n    {\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = 'BANDWIDTH';\n        }\n\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        \n        if(typeof options === 'string')\n            options = { privateKey: options };\n\n        if(!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, options);\n\n        if(![ 'BANDWIDTH', 'ENERGY' ].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const unfreezeBalance = await this.tronWeb.transactionBuilder.unfreezeBalance(resource, address);\n            const signedTransaction = await this.sign(unfreezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Modify account name\n     * Note: Username is allowed to edit only once.\n     *\n     * @param privateKey - Account private Key\n     * @param accountName - name of the account\n     * @param callback\n     *\n     * @return modified Transaction Object\n     */\n    async updateAccount(accountName = false, options = {},  callback = false)\n    {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        \n        if(typeof options === 'string')\n            options = { privateKey: options };\n\n        if(!callback) {\n            return this.injectPromise(this.updateAccount, accountName, options);\n        }\n\n        if (!utils.isString(accountName) || !accountName.length) {\n            return callback('Name must be a string');\n        }\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const updateAccount = await this.tronWeb.transactionBuilder.updateAccount(accountName, address);\n            const signedTransaction = await this.sign(updateAccount, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    signMessage(...args) {\n        return this.sign(...args);\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    send(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    sendTrx(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    broadcast(...args) {\n        return this.sendRawTransaction(...args);\n    }\n\n    signTransaction(...args) {\n        return this.sign(...args);\n    }\n\n    /**\n     * Gets a network modification proposal by ID.\n     */\n    getProposal(proposalID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getProposal, proposalID);\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/getproposalbyid', { \n            id: parseInt(proposalID),\n        }, 'post').then(proposal => {\n            callback(null, proposal);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listProposals(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listProposals);\n\n        this.tronWeb.fullNode.request('wallet/listproposals', {}, 'post').then(({ proposals = [] }) => {\n            callback(null, proposals);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all parameters available for network modification proposals.\n     */\n    getChainParameters(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getChainParameters);\n\n        this.tronWeb.fullNode.request('wallet/getchainparameters', {}, 'post').then(({ chainParameter = [] }) => {\n            callback(null, chainParameter);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the account resources\n     */\n    getAccountResources(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getAccountResources, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/getaccountresource', { \n            address: this.tronWeb.address.toHex(address),\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the exchange ID.\n     */\n    getExchangeByID(exchangeID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getExchangeByID, exchangeID);\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        this.tronWeb.fullNode.request('wallet/getexchangebyid', {\n            id: exchangeID,\n        }, 'post').then(exchange => {\n            callback(null, exchange);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists the exchanges\n     */\n    listExchanges(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchanges', {}, 'post').then(({ exchanges = [] }) => {\n            callback(null, exchanges);\n        }, 'post').catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listExchangesPaginated(limit = 10, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n        if(!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchangespaginated', {\n            limit,\n            offset\n        }, 'post').then(({ exchanges = [] }) => {\n            callback(null, exchanges);\n        }).catch(err => callback(err));\n    }\n};\n","import utils from 'utils';\n\nconst getFunctionSelector = abi => {\n    return abi.name + '(' + getParamTypes(abi.inputs || []).join(',') + ')';\n}\n\nconst getParamTypes = params => {\n    return params.map(({ type }) => type);\n}\n\nconst decodeOutput = (abi, output) => {\n    const names = abi.map(({ name }) => name).filter(name => !!name);\n    const types = abi.map(({ type }) => type);\n\n    return utils.abi.decodeParams(names, types, output);\n};\n\nexport default class Method {\n    constructor(contract, abi) {\n        this.tronWeb = contract.tronWeb;\n        this.contract = contract;\n\n        this.abi = abi;\n        this.name = abi.name || (abi.name = abi.type);\n\n        this.inputs = abi.inputs || [];\n        this.outputs = abi.outputs || [];\n\n        this.functionSelector = getFunctionSelector(abi);\n        this.signature = this.tronWeb.sha3(this.functionSelector, false).slice(0, 8);\n        this.injectPromise = utils.promiseInjector(this);\n\n        this.defaultOptions = {\n            feeLimit: 1000000000,\n            callValue: 0,\n            from: this.tronWeb.defaultAddress.hex, // Only used for send()\n            shouldPollResponse: false // Only used for sign()\n        };\n    }\n\n    decodeInput(data) {\n        return decodeOutput(this.inputs, '0x' + data);\n    }\n\n    onMethod(...args) {\n        const types = getParamTypes(this.inputs);\n\n        args.forEach((arg, index) => {\n            if (types[index] == 'address')\n                args[index] = this.tronWeb.address.toHex(arg).replace(/^(41)/, '0x')\n\n            if (types[index] == 'address[]') {\n                args[index] = args[index].map(address => {\n                    return this.tronWeb.address.toHex(address).replace(/^(41)/, '0x')\n                })\n            }\n        });\n\n        return {\n            call: (...methodArgs) => this._call(types, args, ...methodArgs),\n            send: (...methodArgs) => this._send(types, args, ...methodArgs),\n            watch: (...methodArgs) => this._watch(...methodArgs)\n        }\n    }\n\n    async _call(types, args, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this._call, types, args, options);\n\n        if (types.length !== args.length)\n            return callback('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (!['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use send()`);\n\n        options = { ...this.defaultOptions, ...options };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        this.tronWeb.transactionBuilder.triggerSmartContract(\n            this.contract.address,\n            this.functionSelector,\n            options.feeLimit,\n            options.callValue,\n            parameters,\n            this.tronWeb.address.toHex(options.from),\n            (err, transaction) => {\n                if (err)\n                    return callback(err);\n\n                if (!utils.hasProperty(transaction, 'constant_result'))\n                    return callback('Failed to execute');\n\n                try {\n                    let output = decodeOutput(this.outputs, '0x' + transaction.constant_result[0]);\n\n                    if (output.length === 1)\n                        output = output[0];\n\n                    return callback(null, output);\n                } catch (ex) {\n                    return callback(ex);\n                }\n            });\n    }\n\n    async _send(types, args, options = {}, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this._send, types, args, options, privateKey);\n\n        if (types.length !== args.length)\n            throw new Error('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use call()`);\n\n        // If a function isn't payable, dont provide a callValue.\n        if (!['payable'].includes(stateMutability.toLowerCase()))\n            options.callValue = 0;\n\n        options = {...this.defaultOptions, ...options};\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        try {\n            const address = privateKey ? this.tronWeb.address.fromPrivateKey(privateKey) : this.tronWeb.defaultAddress.base58;\n            const transaction = await this.tronWeb.transactionBuilder.triggerSmartContract(\n                this.contract.address,\n                this.functionSelector,\n                options.feeLimit,\n                options.callValue,\n                parameters,\n                this.tronWeb.address.toHex(address)\n            );\n\n            if (!transaction.result || !transaction.result.result)\n                return callback('Unknown error: ' + JSON.stringify(transaction, null, 2));\n\n            // If privateKey is false, this won't be signed here. We assume sign functionality will be replaced.\n            const signedTransaction = await this.tronWeb.trx.sign(transaction.transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n                \n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if (!broadcast.result)\n                return callback('Unknown error: ' + JSON.stringify(broadcast, null, 2));\n\n            if (!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if (index == 20) {\n                    return callback({\n                        error: 'Cannot find result in solidity node',\n                        transaction: signedTransaction\n                    });\n                }\n\n                const output = await this.tronWeb.trx.getTransactionInfo(signedTransaction.txID);\n\n                if (!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if (output.result && output.result == 'FAILED') {\n                    return callback({\n                        error: this.tronWeb.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (!utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                let decoded = decodeOutput(this.outputs, '0x' + output.contractResult[0]);\n\n                if (decoded.length === 1)\n                    decoded = decoded[0];\n\n                return callback(null, decoded);\n            }\n\n            checkResult();\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async _watch(options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!utils.isFunction(callback))\n            throw new Error('Expected callback to be provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (this.abi.type.toLowerCase() !== 'event')\n            return callback('Invalid method type for event watching');\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        let listener = false;\n        let lastBlock = false;\n        const sinceTimestamp = new Date().getTime();\n\n        const getEvents = async () => {\n            try {\n                const events = await this.tronWeb.getEventResult(this.contract.address, sinceTimestamp, this.name);\n                const [ latestEvent ] = events.sort((a, b) => b.block - a.block);\n                const newEvents = events.filter((event, index) => {\n\n                    if (options.resourceNode && !RegExp(options.resourceNode, 'i').test(event.resourceNode))\n                        return false;\n\n                    const duplicate = events.slice(0, index).some(priorEvent => (\n                        JSON.stringify(priorEvent) == JSON.stringify(event)\n                    ));\n\n                    if (duplicate)\n                        return false;\n\n                    if (!lastBlock)\n                        return true;\n\n                    return event.block > lastBlock;\n                });\n\n                if (latestEvent)\n                    lastBlock = latestEvent.block;\n\n                return newEvents;\n            } catch (ex) {\n                return Promise.reject(ex);\n            }\n        };\n\n        const bindListener = () => {\n            if (listener)\n                clearInterval(listener);\n\n            listener = setInterval(() => {\n                getEvents().then(events => events.forEach(event => {\n                    callback(null, utils.parseEvent(event, this.abi))\n                })).catch(err => callback(err));\n            }, 3000);\n        };\n\n        await getEvents();\n        bindListener();\n\n        return {\n            start: bindListener(),\n            stop: () => {\n                if (!listener)\n                    return;\n\n                clearInterval(listener);\n                listener = false;\n            }\n        }\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport Method from './method';\n\nexport default class Contract {\n    constructor(tronWeb = false, abi = [], address = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n\n        this.address = address;\n        this.abi = abi;\n\n        this.eventListener = false;\n        this.bytecode = false;\n        this.deployed = false;\n        this.lastBlock = false;\n\n        this.methods = {};\n        this.methodInstances = {};\n        this.props = [];\n\n        if(this.tronWeb.isAddress(address))\n            this.deployed = true;\n        else this.address = false;\n\n        this.loadAbi(abi);\n    }\n\n    async _getEvents(options = {}) {\n        const events = await this.tronWeb.getEventResult(this.address);\n        const [ latestEvent ] = events.sort((a, b) => b.block - a.block);\n        const newEvents = events.filter((event, index) => {\n\n            if (options.resourceNode && !RegExp(options.resourceNode, 'i').test(event.resourceNode))\n                return false;\n\n            const duplicate = events.slice(0, index).some(priorEvent => (\n                JSON.stringify(priorEvent) == JSON.stringify(event)\n            ));\n\n            if(duplicate)\n                return false;\n\n            if(!this.lastBlock)\n                return true;\n\n            return event.block > this.lastBlock;\n        });\n\n        if(latestEvent)\n            this.lastBlock = latestEvent.block;\n\n        return newEvents;\n    }\n\n    async _startEventListener(options = {}, callback) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(this.eventListener)\n            clearInterval(this.eventListener);\n\n        if(!this.tronWeb.eventServer)\n            throw new Error('Event server is not configured');\n\n        if(!this.address)\n            throw new Error('Contract is not configured with an address');\n\n        this.eventCallback = callback;\n        await this._getEvents(options);\n\n        this.eventListener = setInterval(() => {\n            this._getEvents(options).then(newEvents => newEvents.forEach(event => {\n                this.eventCallback && this.eventCallback(event)\n            })).catch(err => {\n                console.error('Failed to get event list', err);\n            });\n        }, 3000);\n    }\n\n    _stopEventListener() {\n        if(!this.eventListener)\n            return;\n\n        clearInterval(this.eventListener);\n        this.eventListener = false;\n        this.eventCallback = false;\n    }\n\n    hasProperty(property) {\n        return this.hasOwnProperty(property) || this.__proto__.hasOwnProperty(property);\n    }\n\n    loadAbi(abi) {\n        this.abi = abi;\n        this.methods = {};\n\n        this.props.forEach(prop => delete this[prop]);\n\n        abi.forEach(func => {\n            // Don't build a method for constructor function. That's handled through contract create.\n            if (func.type.toLowerCase() === 'constructor')\n                return;\n\n            const method = new Method(this, func);\n            const methodCall = method.onMethod.bind(method);\n\n            const {\n                name,\n                functionSelector,\n                signature\n            } = method;\n\n            this.methods[name] = methodCall;\n            this.methods[functionSelector] = methodCall;\n            this.methods[signature] = methodCall;\n\n            this.methodInstances[name] = method;\n            this.methodInstances[functionSelector] = method;\n            this.methodInstances[signature] = method;\n\n            if(!this.hasProperty(name)) {\n                this[name] = methodCall;\n                this.props.push(name);\n            }\n\n            if(!this.hasProperty(functionSelector)) {\n                this[functionSelector] = methodCall;\n                this.props.push(functionSelector);\n            }\n\n            if(!this.hasProperty(signature)) {\n                this[signature] = methodCall;\n                this.props.push(signature);\n            }\n        });\n    }\n\n    decodeInput(data) {\n\n        const methodName = data.substring(0, 8);\n        const inputData = data.substring(8);\n\n        if (!this.methodInstances[methodName])\n            throw new Error('Contract method ' + methodName + \" not found\");\n\n        const methodInstance = this.methodInstances[methodName];\n\n        return {\n            name: methodInstance.name,\n            params: this.methodInstances[methodName].decodeInput(inputData),\n        }\n    }\n\n    async new(options, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.new, options, privateKey);\n\n        try {\n            const address = this.tronWeb.address.fromPrivateKey(privateKey);\n            const transaction = await this.tronWeb.transactionBuilder.createSmartContract(options, address);\n            const signedTransaction = await this.tronWeb.trx.sign(transaction, privateKey);\n            const contract = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if(!contract.result)\n                return callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            return this.at(signedTransaction.contract_address, callback);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    async at(contractAddress, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.at, contractAddress);\n\n        try {\n            const contract = await this.tronWeb.trx.getContract(contractAddress);\n\n            if(!contract.contract_address)\n                callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            this.address = contract.contract_address;\n            this.bytecode = contract.bytecode;\n            this.deployed = true;\n\n            this.loadAbi(contract.abi.entrys);\n\n            callback(null, this);\n        } catch(ex) {\n            if(ex.toString().includes('does not exist'))\n                return callback('Contract has not been deployed on the network');\n\n            return callback(ex);\n        }\n    }\n\n    events(options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!utils.isFunction(callback))\n            throw new Error('Callback function expected');\n\n        const self = this;\n\n        return {\n            start(startCallback = false) {\n                if(!startCallback) {\n                    self._startEventListener(options, callback);\n                    return this;\n                }\n\n                self._startEventListener(options, callback).then(() => {\n                    startCallback();\n                }).catch(err => {\n                    startCallback(err)\n                });\n\n                return this;\n            },\n            stop() {\n                self._stopEventListener();\n            }\n        };\n    }\n}\n","import providers from 'lib/providers';\nimport utils from 'utils';\nimport axios from 'axios';\nimport BigNumber from 'bignumber.js';\nimport EventEmitter from 'eventemitter3';\n\nimport TransactionBuilder from 'lib/transactionBuilder';\nimport Trx from 'lib/trx';\nimport Contract from 'lib/contract';\n\nimport { keccak256 } from 'js-sha3';\n\nexport default class TronWeb extends EventEmitter {\n    static providers = providers;\n    static BigNumber = BigNumber;\n    \n    constructor(fullNode, solidityNode, eventServer = false, privateKey = false) {\n        super();\n\n        if(utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if(utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if(utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n        this.setEventServer(eventServer);\n        \n        this.providers = providers;\n        this.BigNumber = BigNumber;\n\n        this.defaultBlock = false;\n        this.defaultPrivateKey = false;\n        this.defaultAddress = {\n            hex: false,\n            base58: false\n        };\n        \n        [\n            'sha3', 'toHex', 'toUtf8', 'fromUtf8',\n            'toAscii', 'fromAscii', 'toDecimal', 'fromDecimal',\n            'toSun', 'fromSun', 'toBigNumber', 'isAddress', \n            'createAccount', 'address'\n        ].forEach(key => {\n            this[key] = TronWeb[key];\n        });\n\n        if(privateKey)\n            this.setPrivateKey(privateKey);\n\n        this.transactionBuilder = new TransactionBuilder(this);\n        this.trx = new Trx(this);\n        this.utils = utils;\n\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    setDefaultBlock(blockID = false) {\n        if([ false, 'latest', 'earliest', 0 ].includes(blockID)) {\n            return this.defaultBlock = blockID;\n        }\n\n        if(!utils.isInteger(blockID) || !blockID)\n            throw new Error('Invalid block ID provided');\n\n        this.defaultBlock = Math.abs(blockID);\n    }\n\n    setPrivateKey(privateKey) {\n        try {\n            this.setAddress(\n                this.address.fromPrivateKey(privateKey)\n            );\n        } catch {\n            throw new Error('Invalid private key provided');\n        }\n\n        this.defaultPrivateKey = privateKey;\n        this.emit('privateKeyChanged', privateKey);\n    }\n\n    setAddress(address) {\n        if(!this.isAddress(address))\n            throw new Error('Invalid address provided');\n\n        const hex = this.address.toHex(address);\n        const base58 = this.address.fromHex(address);\n\n        if(this.defaultPrivateKey && this.address.fromPrivateKey(this.defaultPrivateKey) !== base58)\n           this.defaultPrivateKey = false;\n\n        this.defaultAddress = {\n            hex,\n            base58\n        };\n\n        this.emit('addressChanged', { hex, base58 });\n    }\n\n    isValidProvider(provider) {\n        return Object.values(providers).some(knownProvider => provider instanceof knownProvider);\n    }\n\n    setFullNode(fullNode) {\n        if(utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if(!this.isValidProvider(fullNode))\n            throw new Error('Invalid full node provided');\n\n        this.fullNode = fullNode;\n        this.fullNode.setStatusPage('wallet/getnowblock');\n    }\n\n    setSolidityNode(solidityNode) {\n        if(utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if(!this.isValidProvider(solidityNode))\n            throw new Error('Invalid solidity node provided');\n\n        this.solidityNode = solidityNode;\n        this.solidityNode.setStatusPage('walletsolidity/getnowblock');\n    }\n\n    setEventServer(eventServer = false) {\n        if(!eventServer)\n            return this.eventServer = false;\n\n        if(utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n            \n        if(!this.isValidProvider(eventServer))\n            throw new Error('Invalid event server provided');\n\n        this.eventServer = eventServer;\n        this.eventServer.isConnected = () => this.eventServer.request('healthcheck').then(() => true).catch(() => (\n            this.eventServer.request('events?size=1').then(data => (\n                Array.isArray(data)\n            ))\n        )).catch(() => false);\n    }\n\n    currentProviders() {\n        return {\n            fullNode: this.fullNode,\n            solidityNode: this.solidityNode,\n            eventServer: this.eventServer\n        };\n    }\n\n    currentProvider() {\n        return this.currentProviders();\n    }\n\n    getEventResult(contractAddress = false, sinceTimestamp = 0, eventName = false, blockNumber = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getEventResult, contractAddress, sinceTimestamp, eventName, blockNumber);\n\n        if(!this.eventServer)\n            callback('No event server configured');\n\n        const routeParams = [];\n\n        if(!this.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if(eventName && !contractAddress)\n            return callback('Usage of event name filtering requires a contract address');\n        \n        if(blockNumber && !eventName)\n            return callback('Usage of block number filtering requires an event name');\n\n        if(contractAddress)\n            routeParams.push(this.address.fromHex(contractAddress));\n\n        if(eventName)\n            routeParams.push(eventName);\n\n        if(blockNumber)\n            routeParams.push(blockNumber);\n\n        return this.eventServer.request(`event/contract/${routeParams.join('/')}?since=${sinceTimestamp}`).then((data = false) => {\n            if(!data)\n                return callback('Unknown error occurred');\n\n            if(!utils.isArray(data))\n                return callback(data);\n\n            return callback(null, \n                data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err)); \n    }\n\n    getEventByTransactionID(transactionID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getEventByTransactionID, transactionID);\n\n        if(!this.eventServer)\n            callback('No event server configured');\n\n        return this.eventServer.request(`event/transaction/${transactionID}`).then((data = false) => {\n            if(!data)\n                return callback('Unknown error occurred');\n\n            if(!utils.isArray(data))\n                return callback(data);\n\n            return callback(null, \n                data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n    contract(abi = [], address = false) {\n        return new Contract(this, abi, address);\n    }\n\n    static get address() {\n        return {\n            fromHex(address) {\n                if(!utils.isHex(address))\n                    return address;\n\n                return utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address)\n                );\n            },\n            toHex(address) {\n                if(utils.isHex(address))\n                    return address.toLowerCase().replace(/^0x/,'41');\n\n                return utils.code.byteArray2hexStr(\n                    utils.crypto.decodeBase58Address(address)\n                ).toLowerCase();\n            },\n            fromPrivateKey(privateKey) {\n                try {\n                    return utils.crypto.pkToAddress(privateKey);\n                } catch { return false; }\n            }\n        }\n    }\n\n    static sha3(string, prefix = true) {\n        return (prefix ? '0x' : '') + keccak256(string);\n    }\n\n    static toHex(val) {\n        if(utils.isBoolean(val))\n            return TronWeb.fromDecimal(+val);\n\n        if(utils.isBigNumber(val))\n            return TronWeb.fromDecimal(val);\n\n        if(typeof val === 'object')\n            return TronWeb.fromUtf8(JSON.stringify(val));\n\n        if(utils.isString(val)) {\n            if (/^(-|)0x/.test(val))\n                return val;\n\n            if(!isFinite(val))\n                return TronWeb.fromUtf8(val);\n        }\n\n        return TronWeb.fromDecimal(val);\n    }\n\n    static toUtf8(hex) {\n        hex = hex.replace(/^0x/,'');\n        return Buffer.from(hex, 'hex').toString('utf8');\n    }\n\n    static fromUtf8(string) {\n        return '0x' + Buffer.from(string, 'utf8').toString('hex');\n    }\n\n    static toAscii(hex) {\n        hex = hex.replace(/^0x/,'');\n        return Buffer.from(hex, 'hex').toString('ascii');\n    }\n\n    static fromAscii(string, padding) {\n        return '0x' + Buffer.from(string, 'ascii').toString('hex').padEnd(padding, '0');\n    }\n\n    static toDecimal(value) {\n        return TronWeb.toBigNumber(value).toNumber();\n    }\n\n    static fromDecimal(value) {\n        const number = TronWeb.toBigNumber(value);\n        const result = number.toString(16);\n\n        return number.isLessThan(0) ? '-0x' + result.substr(1) : '0x' + result;\n    }\n\n    static fromSun(sun) {\n        const trx = TronWeb.toBigNumber(sun).div(1_000_000);        \n        return utils.isBigNumber(sun) ? trx : trx.toString(10);\n    }\n\n    static toSun(trx) {\n        const sun = TronWeb.toBigNumber(trx).times(1_000_000);        \n        return utils.isBigNumber(trx) ? sun : sun.toString(10);\n    }\n\n    static toBigNumber(amount = 0) {\n        if(utils.isBigNumber(amount))\n            return amount;\n\n        if(utils.isString(amount) && (amount.indexOf('0x') === 0 || amount.indexOf('-0x') === 0))\n            return new BigNumber(amount.replace('0x', ''), 16);\n\n        return new BigNumber(amount.toString(10), 10);\n    }\n\n    static isAddress(address = false) {\n        if(!utils.isString(address))\n            return false;\n\n        // Convert HEX to Base58\n        if(address.length === 42) {\n            return TronWeb.isAddress(\n                utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address)\n                )\n            );\n        }\n\n        return utils.crypto.isAddressValid(address);\n    }\n\n    static async createAccount(callback = false) {\n        const account = utils.accounts.generateAccount();\n\n        if(callback)\n            callback(null, account);\n\n        return account;\n    }\n\n    async isConnected(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.isConnected);\n\n        callback(null, {\n            fullNode: await this.fullNode.isConnected(),\n            solidityNode: await this.solidityNode.isConnected(),\n            eventServer: this.eventServer && await this.eventServer.isConnected()\n        });\n    }\n};\n"],"sourceRoot":""}