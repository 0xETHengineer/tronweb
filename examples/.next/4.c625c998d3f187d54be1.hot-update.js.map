{"version":3,"file":"4.c625c998d3f187d54be1.hot-update.js","sources":["webpack:///../src/index.js"],"sourcesContent":["import xhr from 'axios'\nimport  {address2HexString,stringUtf8toHex,hexString2Address,hexString2Utf8} from './utils/help'\nimport {parseAbi} from \"./private\";\nimport { generateAccount } from './utils/account'\nimport {signTransaction,pkToAddress} from './utils/crypto'\nimport {utils} from 'ethers'\nimport {BigNumber} from 'bignumber.js'\n\nclass TronWeb {\n    constructor(apiUrl,tronInfuraUrl) {\n        this.apiUrl = apiUrl;\n        this.defaultAccount='';\n        this.defaultPk='';\n        this.tronInfuraUrl = tronInfuraUrl;\n        //xhr.defaults.baseURL = this.apiUrl;\n    }\n    toHex(str){\n        //address\n        if(str.length==34&&str.indexOf('T')==0){\n            return address2HexString(str)\n        }\n        return stringUtf8toHex(str)\n    }\n    fromHex(sHex){\n        if(sHex.length==42&&sHex.indexOf('41')==0){\n            return hexString2Address(sHex)\n        }\n        return hexString2Utf8(sHex)\n    }\n    setFullNodeServer(value){\n        this.apiUrl = value;\n    }\n    setEventServer(value = 'http://52.44.75.99:18889'){\n        this.tronInfuraUrl = value;\n    }\n\n    /**\n     * get address from pk\n     * @param {string} pk\n     * @return {string} address\n     * */\n    login(pk){\n        return pkToAddress(pk);\n    }\n\n    /**\n     * Obtain account balance\n     * @param {string} address\n     * @return {object}\n     **/\n    async getBalance(address){\n        let {data} = await xhr.post(`${this.apiUrl}/wallet/getaccount`,{\n            address : address2HexString(address)\n        })\n        return data;\n    }\n\n    /**\n     * Query the latest block\n     * @param null\n     * @return {object}\n     * */\n    async blockNumber(){\n        let  { data }= await xhr.post(`${this.apiUrl}/wallet/getnowblock`)\n        return data;\n    }\n\n    /**\n     * Query the block by hashString or blockNumber\n     * parms {string or number} \n     * @return {object}\n     */\n    async getBlock(hashStringOrBlockNumber){\n        let data;\n        if(isNaN(hashStringOrBlockNumber)){\n            data = await xhr.post(`${this.apiUrl}/wallet/getblockbyid`,{value:hashStringOrBlockNumber})\n        }else{\n            hashStringOrBlockNumber = typeof hashStringOrBlockNumber === 'number' ? hashStringOrBlockNumber : parseInt(hashStringOrBlockNumber);\n            data = await xhr.post(`${this.apiUrl}/wallet/getblockbynum`,{num:hashStringOrBlockNumber})\n        }\n        return data.data;\n    }\n\n    /**\n     * Query the count of transaction in a block by hashString or blockNumber\n     * params {string or number} \n     * @return {object}\n     */\n    async getBlockTransactionCount(hashStringOrBlockNumber){\n        const data = await this.getBlock(hashStringOrBlockNumber)\n        return {count:data.transactions?data.transactions.length:0};\n    }\n\n    /**\n     * Query a transactional information by hash string of txId \n     * params {string or number} \n     * @return {object}\n     */\n    async getTransaction(id){\n        const {data} = await xhr.post(`${this.apiUrl}/wallet/gettransactionbyid`,{value:id})\n        return data;\n    }\n    /**\n     * Total all transactions\n     * @param null\n     * @returns {object} {num:11111}\n     * */\n    async getTransactionCount(){\n        let {data} = await xhr.post(`${this.apiUrl}/wallet/totaltransaction`);\n        return data.num;\n    }\n    /**\n     * A transaction that sends a transfer\n     * @param {string} from ,{string} to ,{int} amount,\n     * @return {object} transaction\n     * */\n    async sendTransaction(from,to,amount,privateKey){\n        try{\n            if(!privateKey){\n                throw \"please input privateKey！\";\n            }\n            const transaction = await this.createTransaction(to,from,amount)\n            const signTransaction = await this.signTransaction(transaction,privateKey,0);\n            const res = await this.sendRawTransaction(signTransaction);\n            return Object.assign(res,signTransaction)\n        }catch(err){\n            console.error(err);\n        }\n    }\n\n    /**\n     * Create a transfer transaction,If the to address for the transfer does not exist, create the account on the blockchain  \n     * @param {string} to_address,{string} owner_address,{int} amount\n     * @return {object} transaction\n     * */\n    async createTransaction(to_address,owner_address,amount){\n        let {data} = await xhr.post(`${this.apiUrl}/wallet/createtransaction`,{\n            to_address:address2HexString(to_address),\n            owner_address:address2HexString(owner_address),\n            amount\n        })\n        return data;\n    }\n    /**\n     * Sign a transaction，this api maybe leak the private key,so apply this api in a safe environment please.\n     * @param {object} transaction，{string} privateKey,{int} teriminal 0: client, 1: service\n     * @return {object} transaction\n     *\n     * */\n\n    async signTransaction(transaction,privateKey,teriminal=0){\n        try{\n        const addr = this.login(privateKey);\n        if(addr !== this.fromHex(transaction.raw_data.contract[0].parameter.value.owner_address)){\n            throw \"Private key is error!\";\n        }\n        if(teriminal==0){\n            return signTransaction(privateKey,transaction);\n        } else {\n            let {data} = await xhr.post(`${this.apiUrl}/wallet/gettransactionsign`,{\n                transaction : transaction,\n                privateKey : privateKey\n            })\n            return data;\n        }\n        }catch(err){\n            console.err(err);\n            return false;\n        }\n    }\n    /**\n     * Broadcast signed transactions。\n     * @param {object} signTransaction\n     * @return {object} {result:true}\n     * */\n    async sendRawTransaction(signTransaction){\n        let {data} = await xhr.post(`${this.apiUrl}/wallet/broadcasttransaction`,signTransaction)\n        return data;\n    }\n    /**\n     * Change the account name (only once)\n     * @param {string} account_name,{string} owner_address\n     * @return {object}\n     * */\n    async updateAccount(account_name,owner_address){\n        let {data} = await xhr.post(`${this.apiUrl}/wallet/updateaccount`,{\n            account_name:stringUtf8toHex(account_name),\n            owner_address:address2HexString(owner_address)\n        })\n        return data;\n    }\n    /**\n     * Vote on superdelegates\n     * @param {string} owner_address, {object} votes example:\n     * [{\"vote_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"vote_count\": 5}]\n     *\n     * */\n    async voteWitnessAccount(owner_address,votes){\n        let newVotes = votes.map((item)=>{\n            return {\n                vote_count:item.vote_count,\n                vote_address:address2HexString(item.vote_address)\n            }\n        })\n        let {data} = await xhr.post(`${this.apiUrl}/wallet/votewitnessaccount`,{\n            owner_address:address2HexString(owner_address),\n            votes:newVotes\n        })\n        return data;\n    }\n\n    /**\n     * Publish the Token\n     * @param {object} oToken: {\n        \"owner_address\":\"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\",\n        \"name\":\"0x6173736574497373756531353330383934333132313538\",\n        \"abbr\": \"0x6162627231353330383934333132313538\",\n        \"total_supply\" :4321,\n        \"trx_num\":1,\n        \"num\":1,\n        \"start_time\" : 1530894315158,\n        \"end_time\":1533894312158,\n        \"description\":\"007570646174654e616d6531353330363038383733343633\",\n        \"url\":\"007570646174654e616d6531353330363038383733343633\",\n        \"free_asset_net_limit\":10000,\n        \"public_free_asset_net_limit\":10000,\n        \"frozen_supply\":{\"frozen_amount\":1, \"frozen_days\":2}\n        }\n     *\n     * */\n    async createToken(oToken){\n        let {\n            owner_address,\n            name,\n            abbr,\n            total_supply,\n            trx_num,\n            num,\n            start_time,\n            end_time,\n            description,\n            url,\n            free_asset_net_limit,\n            public_free_asset_net_limit,\n            frozen_supply\n        } = oToken;\n        owner_address = address2HexString(owner_address);\n        name = stringUtf8toHex(name);\n        abbr=stringUtf8toHex(abbr);\n        description=stringUtf8toHex(description);\n        url = stringUtf8toHex(url);\n        let {data} = await xhr.post(`${this.apiUrl}/wallet/createassetissue`,{\n            owner_address,\n            name,\n            abbr,\n            total_supply,\n            trx_num,\n            num,\n            start_time,\n            end_time,\n            description,\n            url,\n            free_asset_net_limit,\n            public_free_asset_net_limit,\n            frozen_supply\n        })\n        return data;\n\n    }\n\n    /**\n     * Create account\n     * @param {string} owner_address,{string} account_address\n     * */\n    async createAccount(owner_address,account_address){\n        let {data} = await xhr.post(`${this.apiUrl}/wallet/createaccount`,{\n            owner_address:address2HexString(owner_address),\n            account_address:address2HexString(account_address)\n        })\n        return data;\n    }\n\n    /**\n     * Apply to be a super delegate\n     * @param {string} owner_address,{string} url\n     * @return {object} transaction\n     * */\n    async createWitness(owner_address,url){\n        let {data}=await xhr.post(`${this.apiUrl}/wallet/createwitness`,{\n            owner_address:address2HexString(owner_address),\n            url:stringUtf8toHex(url)\n        })\n        return data;\n    }\n    /**Transfer the Token\n     * @param {object} options {{\"owner_address\":\"Txxxxxxx...\", \"to_address\": \"Txxxxxxx...\", \"asset_name\": \"a token\", \"amount\": 100}}\n     * @return {object} transaction\n     *\n     * */\n    async transferAsset(options){\n        let {owner_address,to_address,asset_name,amount} = options;\n        owner_address = address2HexString(owner_address);\n        to_address = address2HexString(to_address);\n        asset_name = stringUtf8toHex(asset_name);\n\n        let {data} = await xhr.post(`${this.apiUrl}/wallet/transferasset`,{\n            owner_address,to_address,asset_name,amount\n        })\n        return data;\n    }\n    /**\n     * Quick transfer,this api maybe leak the private key,so call this api in a safe environment please.(before call this api,please call createAddress api to generate the address)\n     * @param {string} passPhrase,{string} toAddress, {int} amount\n     * @return {object}\n     * */\n    async easytransfer(passPhrase,toAddress,amount) {\n        let { data } = await xhr.post(`${this.apiUrl}/wallet/easytransfer`,{\n            passPhrase:stringUtf8toHex(passPhrase),\n            toAddress:address2HexString(toAddress),\n            amount\n        })\n        return data;\n    }\n\n    /**\n     * Create an address with a password,this api maybe leak the password,so call this api in a safe environment please.\n     * @param {string} password\n     * @return {object}\n     * */\n    async createAddress(password){\n        let {data} = await xhr.post(`${this.apiUrl}/wallet/createaddress`,{\n            value: stringUtf8toHex(password)\n        })\n        return data;\n    }\n\n    /**\n     * Participate in token issuance\n     * @param {object} {\n                \"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\",\n                \"owner_address\":\"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\",\n                \"amount\":100,\n                \"asset_name\":\"3230313271756265696a696e67\"\n               }\n     * @return {object} transaction\n     * */\n    async participateAssetIssue(options){\n        let {to_address,owner_address,amount,asset_name} = options;\n        to_address = address2HexString(to_address);\n        owner_address = address2HexString(owner_address);\n        asset_name = stringUtf8toHex(asset_name);\n\n        let {data} = await xhr.post(`${this.apiUrl}/wallet/participateassetissue`,{\n            to_address,\n            owner_address,\n            amount,\n            asset_name\n        });\n        return data;\n    }\n    /**\n     * Freeze TRX, gain bandwidth, gain voting rights\n     * @param {string} owner_address,{float} frozen_balance,{int} frozen_duration\n     * @return {object} transaction\n     * */\n    async freezeBalance(owner_address,frozen_balance,frozen_duration){\n        owner_address = address2HexString(owner_address);\n        let {data} = await xhr.post(`${this.apiUrl}/wallet/freezebalance`,{\n            owner_address,\n            frozen_balance,\n            frozen_duration\n        })\n        return data;\n    }\n\n    /**\n     * The thawing of TRX that has ended the freeze will also lose the bandwidth and voting power that this part of TRX brings\n     * @param {string} owner_address\n     * @return {object} transaction\n     * */\n    async unfreezeBalance(owner_address){\n        owner_address = address2HexString(owner_address);\n        let {data} = xhr.post(`${this.apiUrl}/wallet/unfreezebalance`,{\n            owner_address\n        })\n        return data;\n    }\n\n    /**\n     * Thawing has ended the Token freeze\n     * @param {string} owner_address\n     * @return {object} transaction\n     * */\n    async unfreezeAsset(owner_address){\n        owner_address = address2HexString(owner_address);\n        let {data} = await xhr.post(`${this.apiUrl}/wallet/unfreezeasset`,{\n            owner_address\n        })\n        return data;\n    }\n    /**\n     * Superdelegates represent rewards to balance, which can be withdrawn every 24 hours\n     * @param {string} owner_address\n     * @return {object} transaction\n     */\n    async withdrawBalance(owner_address){\n        owner_address = address2HexString(owner_address);\n        let {data} = await xhr.post(`${this.apiUrl}/wallet/withdrawbalance`,{\n            owner_address\n        })\n        return data;\n    }\n    /**\n     * Modify token information\n     * @param {string} owner_address,{string} description,{string} url,{int} new_limit,{int} new_public_limit\n     * @return {object} transaction\n     * */\n    async updateAsset(options){\n        let {owner_address,description,url,new_limit,new_public_limit} = options;\n        owner_address = address2HexString(owner_address);\n        description = stringUtf8toHex(description);\n        url = stringUtf8toHex(url);\n        let {data} = await xhr.post(`${this.apiUrl}/wallet/updateasset`,{\n            owner_address,description,url,new_limit,new_public_limit\n        })\n        return data;\n    }\n    /**\n     * Query the node on which the API is connected\n     * @param null\n     * @return {object Array}\n     * */\n    async listNodes(){\n        let {data} = await xhr.post(`${this.apiUrl}/wallet/listnodes`);\n        return data;\n    }\n    /**\n     * Check the token issued by the account\n     * @param {string} address\n     * @return {object}\n     * */\n    async getAssetIssueByAccount(address){\n        address = address2HexString(address);\n        let {data} = await xhr.post(`${this.apiUrl}/wallet/getassetissuebyaccount`,{address})\n        return data;\n    }\n    /**\n     * Query bandwidth information\n     * @param {string} address\n     * @return {object}\n     * */\n    async getAccountNet(address){\n        address = address2HexString(address);\n        let {data} = await xhr.post(`${this.apiUrl}/wallet/getaccountnet`,{address})\n        return data;\n    }\n    /**\n     * Query token by name\n     * @param {string} value\n     * @return {object}\n     * */\n    async getAssetIssueByName(value){\n        value = stringUtf8toHex(value);\n        let {data} = await xhr.post(`${this.apiUrl}/wallet/getassetissuebyname`,{value})\n        return data;\n    }\n   \n    /**\n     * Query blocks by scope\n     * @param {int} startNum,{int} endNum\n     * @return {object}\n     * */\n    async getBlockByLimitNext(startNum,endNum){\n        let {data} = await xhr.post(`${this.apiUrl}/wallet/getblockbylimitnext`,{startNum,endNum});\n        return data;\n    }\n\n    /**\n     * Query the latest blocks\n     * @param {int} num\n     * @return {object}\n     * */\n    async getBlockByLatestNum(num){\n        let {data} = await xhr.post(`${this.apiUrl}/wallet/getblockbylatestnum`,{num});\n        return data;\n    }\n   \n\n    /**\n     * query all withnesses list\n     * @param null\n     * @returns {Array}\n     * */\n    async listWitNesses(){\n        let {data} = await xhr.post(`${this.apiUrl}/wallet/listwitnesses`)\n        return data;\n    }\n    /**\n     * query all token list\n     * @returns {Array}\n     * */\n    async getAssetIssueList(){\n        let {data} = await xhr.post(`${this.apiUrl}/wallet/getassetissuelist`)\n        return data;\n    }\n    /**\n     * query token list by page\n     * @param {int} offset {int} limit\n     * @returns {Array} \n     * */\n    async getPaginateDassetIssueList(offset,limit){\n        let {data} = await xhr.post(`${this.apiUrl}/wallet/getpaginatedassetissuelist`,{offset,limit})\n        return data;\n    }\n    \n    /**\n     * Get the time for the next count\n     * @param null\n     * @returns {object} {num:time stamp}\n     * */\n    async getNextMainteNanceTime(){\n        let {data} = await xhr.post(`${this.apiUrl}/wallet/getnextmaintenancetime`);\n        return data;\n    }\n\n    /**\n     * Quick transfer\n     * @param {string}privateKey,{string} toAddress,{int} amount\n     * @return {object}\n     * */\n    async easyTransferByPrivate(privateKey,toAddress,amount){\n        privateKey = stringUtf8toHex(privateKey);\n        toAddress = address2HexString(toAddress);\n        let {data} = await xhr.post(`${this.apiUrl}/wallet/easytransferbyprivate`,{\n            privateKey,toAddress,amount\n        })\n        return data;\n    }\n    /**\n     * Generate private keys and addresses online\n     * @param null\n     * @return {object}\n     * */\n    async generateAddressOnLine(){\n        let {data} = await xhr.post(`${this.apiUrl}/wallet/generateaddress`)\n        return data;\n    }\n    /**\n     * Generate private keys and addresses locally\n     * @param null\n     * @return {object}\n     * */\n    async generateAddressOnClient(){\n        let data = await generateAccount();\n        return data;\n    }\n\n\n    /**\n     * Check that the address is correct\n     * @param {string hexString} address\n     * @return {object}\n     * */\n    async validateAddress(address){\n        address = address2HexString(address);\n        let {data} = await xhr.post(`${this.apiUrl}/wallet/validateaddress`,{address})\n        return data;\n    }\n    /**\n     * Deploy contract\n     * @param\n     * {string} abi,\n     * {string} bytecode,\n     * {int} bandwidth_limit 字节数,\n     * {int} cpu_limit 微秒,\n     * {int} storage_limit 字节数\n     * {int} drop_limit 最大消耗的Drop (1trx = 1000000drop)\n     * {int} call_value 本次调用网合约转账的Drop (1trx = 1000000drop)\n     * {string hexString} owner_address 发起部署合约的账户地址\n     * @return {object transction}\n     * */\n    async deployContract(options){\n        try{\n            let payable = false;\n            let {abi,bytecode,fee_limit,call_value,owner_address,consume_user_resource_percent} = options;\n            owner_address = address2HexString(owner_address);\n            for(let v of JSON.parse(abi)){\n                if(v.payable){\n                    payable = true;\n                }\n            }\n            if(fee_limit>1000000000){\n                throw \"fee_limit don't allow greater than 1000000000\";\n            }\n            if(payable && call_value == 0){\n                throw \"call_value must be set greater than 0 ,if contract type is payable\";\n            }\n            if(!payable && call_value > 0){\n                throw \"call_value must be set as 0 ,if contract type is't payable\";\n            }\n            let {data} = await xhr.post(`${this.apiUrl}/wallet/deploycontract`,{\n                abi,\n                bytecode,\n                fee_limit,\n                call_value,\n                owner_address,\n                consume_user_resource_percent\n            })\n            return data;\n        }catch(err){\n            console.error(err);\n            return false;\n        }\n        \n    }\n\n    async getContract(contractAddress){\n        try {\n            let {data} = await xhr.post(`${this.apiUrl}/wallet/getcontract`, {\n                value: address2HexString(contractAddress)\n            })\n            return data;\n        }catch (e) {\n            console.warn(e.toString())\n        }\n    }\n\n    async triggerSmartContract(options){\n        let coder = new utils.AbiCoder()\n        let {\n            contract_address,\n            function_selector,\n            parameter,\n            fee_limit,\n            call_value,\n            owner_address\n        } = options\n        contract_address = address2HexString(contract_address);\n        function_selector = function_selector.replace(/\\s*/g,'');\n        if(parameter||parameter.length){\n            let paramTypes = parameter[0];\n            let paramValues = parameter[1];\n            paramTypes.forEach((itemType,index)=>{\n                if(itemType =='address'){\n                    paramValues[index] = address2HexString(paramValues[index]).replace(/^(41)/,'0x');\n                }\n            })\n            parameter = coder.encode(paramTypes,paramValues).replace(/^(0x)/,'');\n        }\n\n        owner_address = address2HexString(owner_address);\n\n        let { data } = await xhr.post(`${this.apiUrl}/wallet/triggersmartcontract`,{\n            contract_address,\n            function_selector,\n            parameter,\n            fee_limit,\n            call_value,\n            owner_address\n        })\n\n        return data;\n    }\n\n    async getEventResult({contractAddress,eventName,blockNum,transactionId}) {\n        let requestUrl = `${this.tronInfuraUrl}/event/contract`;\n        if(contractAddress){\n            requestUrl+=`/${contractAddress}`\n        }\n        if(eventName){\n            requestUrl+=`/${eventName}`\n        }\n        if(blockNum){\n            requestUrl+=`/${blockNum}`\n        }\n        if(transactionId){\n            requestUrl = `${this.tronInfuraUrl}/event/transaction/${transactionId}`\n        }\n        let result = await xhr.get(requestUrl);\n        return result;\n    }\n\n    contract(abiArray){\n        let _this = this;\n        return {\n            abi: abiArray,\n            at: async function(address) {\n                if (address) {\n                    let { contract_address,origin_address } = await _this.getContract(address);\n                    let abiObj = parseAbi.call(_this,abiArray,{contract_address,owner_address: _this.defaultAccount})\n                    let contractInstance = Object.assign({address:contract_address},abiObj);\n                    return contractInstance;\n                }\n                return new Object();\n            },\n            new: async function(options,pk) {\n                let _self = this;\n                let bytecode = options.data;\n                let owner_address = options.from||_this.defaultAccount;\n                let fee_limit = options.fee_limit;\n                let call_value = options.call_value;\n                let consume_user_resource_percent = options.consume_user_resource_percent;\n                let abi =JSON.stringify(abiArray);\n                let res = await _this.deployContract({\n                    abi,\n                    bytecode,\n                    fee_limit,\n                    call_value,\n                    owner_address,\n                    consume_user_resource_percent\n                })\n                if(res){\n                    let returnRes ={transactionHash:res.txID,address:res.contract_address}\n                    if(Object.keys(res).indexOf('txID')>-1){\n                        const signTransaction = await _this.signTransaction(res,pk)\n                        //广播交易\n                        const result = await _this.sendRawTransaction(signTransaction);\n                        if(result){\n                            returnRes.broadCast = true;\n                        }\n\n                    }\n                    let contractInstance = await _self.at(returnRes.address);\n                    return Object.assign(contractInstance,returnRes);    \n                }else{\n                    return res;\n                }\n                \n            }\n        }\n    }\n\n    toBigNumber(str){\n        return BigNumber(str)\n    }\n    sendTransactionByWallet(options,callback){\n        let {to,amount,transaction} = options;\n        if(document){\n            let oTronWallet = document.getElementById(\"oTronWallet\");\n            let oWalletTransationResult = document.getElementById('transaction_wallet_result');\n            if (oTronWallet) {\n                console.log('Chrome extension is installed!');\n                var open_wallet = document.createEvent('Event');\n                open_wallet.initEvent('open_wallet', true, true);\n                oTronWallet.innerText=JSON.stringify({\n                    to:to,\n                    amount:amount||0,\n                    data:transaction\n                });\n                oTronWallet.dispatchEvent(open_wallet);\n                oWalletTransationResult.value = '';\n                let timer = setInterval(async ()=>{\n                    if(oWalletTransationResult.value){\n                        let walletResult = JSON.parse(oWalletTransationResult.value);\n                        if(!walletResult.success){\n                            callback&&callback('Failed')\n                        }else{\n                            let transactionid = walletResult.transaction.txID;\n                            let validResult = await this.getTransaction(transactionid);\n                            if(Object.keys(validResult).length==0){\n                                callback&&callback('Failed')\n                            }else{\n                                callback&&callback('success')\n                            }\n                        }\n                        clearInterval(timer);\n                    }\n                },500)\n\n            }\n            else {\n                let returnWarn = 'Chrome extention is not installed yet...';\n                console.log(returnWarn);\n                return returnWarn;\n            }\n        }\n    }\n    trxToSun(trxCount){\n        if(trxCount>=0){\n            return trxCount*Math.pow(10,6)\n        }\n        return 0;\n    }\n    sunToTrx(sunCount){\n        if(sunCount>=0){\n            return sunCount/Math.pow(10,6)\n        }\n        return 0;\n    }\n\n}\nexport default TronWeb;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../src/index.js\n// module id = ../src/index.js\n// module chunks = 4"],"mappingssourceRoot":""}